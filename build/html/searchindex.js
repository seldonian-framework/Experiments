Search.setIndex({"docnames": ["_autosummary/experiments", "_autosummary/experiments.base_example", "_autosummary/experiments.base_example.BaseExample", "_autosummary/experiments.baselines", "_autosummary/experiments.baselines.baselines", "_autosummary/experiments.baselines.baselines.RLExperimentBaseline", "_autosummary/experiments.baselines.baselines.SupervisedExperimentBaseline", "_autosummary/experiments.baselines.decision_tree", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "_autosummary/experiments.baselines.decision_tree_leaf_tuning", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline", "_autosummary/experiments.baselines.diabetes_US_baseline", "_autosummary/experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline", "_autosummary/experiments.baselines.fitted_Q", "_autosummary/experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline", "_autosummary/experiments.baselines.fitted_Q.BaseFittedQBaseline", "_autosummary/experiments.baselines.fitted_Q.ExactTabularFittedQBaseline", "_autosummary/experiments.baselines.linear_regression", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline", "_autosummary/experiments.baselines.logistic_regression", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "_autosummary/experiments.baselines.random_classifiers", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "_autosummary/experiments.baselines.random_forest", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline", "_autosummary/experiments.experiment_utils", "_autosummary/experiments.experiment_utils.batch_predictions", "_autosummary/experiments.experiment_utils.generate_behavior_policy_episodes", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J", "_autosummary/experiments.experiment_utils.has_failed", "_autosummary/experiments.experiment_utils.load_regenerated_episodes", "_autosummary/experiments.experiment_utils.load_resampled_datasets", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "_autosummary/experiments.experiment_utils.prep_feat_labels", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp", "_autosummary/experiments.experiment_utils.supervised_initial_solution_fn", "_autosummary/experiments.experiment_utils.trial_arg_chunker", "_autosummary/experiments.experiments", "_autosummary/experiments.experiments.BaselineExperiment", "_autosummary/experiments.experiments.Experiment", "_autosummary/experiments.experiments.FairlearnExperiment", "_autosummary/experiments.experiments.SeldonianExperiment", "_autosummary/experiments.generate_plots", "_autosummary/experiments.generate_plots.PlotGenerator", "_autosummary/experiments.generate_plots.RLPlotGenerator", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator", "_autosummary/experiments.headless_example", "_autosummary/experiments.headless_example.HeadlessExample", "_autosummary/experiments.perf_eval_funcs", "_autosummary/experiments.perf_eval_funcs.MSE", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy", "api", "index", "overview"], "filenames": ["_autosummary/experiments.rst", "_autosummary/experiments.base_example.rst", "_autosummary/experiments.base_example.BaseExample.rst", "_autosummary/experiments.baselines.rst", "_autosummary/experiments.baselines.baselines.rst", "_autosummary/experiments.baselines.baselines.RLExperimentBaseline.rst", "_autosummary/experiments.baselines.baselines.SupervisedExperimentBaseline.rst", "_autosummary/experiments.baselines.decision_tree.rst", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.rst", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.rst", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.rst", "_autosummary/experiments.baselines.diabetes_US_baseline.rst", "_autosummary/experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.rst", "_autosummary/experiments.baselines.fitted_Q.rst", "_autosummary/experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.rst", "_autosummary/experiments.baselines.fitted_Q.BaseFittedQBaseline.rst", "_autosummary/experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.rst", "_autosummary/experiments.baselines.linear_regression.rst", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline.rst", "_autosummary/experiments.baselines.logistic_regression.rst", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.rst", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_forest.rst", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline.rst", "_autosummary/experiments.experiment_utils.rst", "_autosummary/experiments.experiment_utils.batch_predictions.rst", "_autosummary/experiments.experiment_utils.generate_behavior_policy_episodes.rst", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J.rst", "_autosummary/experiments.experiment_utils.has_failed.rst", "_autosummary/experiments.experiment_utils.load_regenerated_episodes.rst", "_autosummary/experiments.experiment_utils.load_resampled_datasets.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat.rst", "_autosummary/experiments.experiment_utils.prep_feat_labels.rst", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp.rst", "_autosummary/experiments.experiment_utils.supervised_initial_solution_fn.rst", "_autosummary/experiments.experiment_utils.trial_arg_chunker.rst", "_autosummary/experiments.experiments.rst", "_autosummary/experiments.experiments.BaselineExperiment.rst", "_autosummary/experiments.experiments.Experiment.rst", "_autosummary/experiments.experiments.FairlearnExperiment.rst", "_autosummary/experiments.experiments.SeldonianExperiment.rst", "_autosummary/experiments.generate_plots.rst", "_autosummary/experiments.generate_plots.PlotGenerator.rst", "_autosummary/experiments.generate_plots.RLPlotGenerator.rst", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator.rst", "_autosummary/experiments.headless_example.rst", "_autosummary/experiments.headless_example.HeadlessExample.rst", "_autosummary/experiments.perf_eval_funcs.rst", "_autosummary/experiments.perf_eval_funcs.MSE.rst", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy.rst", "api.rst", "index.rst", "overview.rst"], "titles": ["experiments", "experiments.base_example", "experiments.base_example.BaseExample", "experiments.baselines", "experiments.baselines.baselines", "experiments.baselines.baselines.RLExperimentBaseline", "experiments.baselines.baselines.SupervisedExperimentBaseline", "experiments.baselines.decision_tree", "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "experiments.baselines.decision_tree_leaf_tuning", "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline", "experiments.baselines.diabetes_US_baseline", "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline", "experiments.baselines.fitted_Q", "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline", "experiments.baselines.fitted_Q.BaseFittedQBaseline", "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline", "experiments.baselines.linear_regression", "experiments.baselines.linear_regression.LinearRegressionBaseline", "experiments.baselines.logistic_regression", "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "experiments.baselines.random_classifiers", "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "experiments.baselines.random_forest", "experiments.baselines.random_forest.RandomForestClassifierBaseline", "experiments.experiment_utils", "experiments.experiment_utils.batch_predictions", "experiments.experiment_utils.generate_behavior_policy_episodes", "experiments.experiment_utils.generate_episodes_and_calc_J", "experiments.experiment_utils.has_failed", "experiments.experiment_utils.load_regenerated_episodes", "experiments.experiment_utils.load_resampled_datasets", "experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "experiments.experiment_utils.prep_feat_labels", "experiments.experiment_utils.setup_SA_spec_for_exp", "experiments.experiment_utils.supervised_initial_solution_fn", "experiments.experiment_utils.trial_arg_chunker", "experiments.experiments", "experiments.experiments.BaselineExperiment", "experiments.experiments.Experiment", "experiments.experiments.FairlearnExperiment", "experiments.experiments.SeldonianExperiment", "experiments.generate_plots", "experiments.generate_plots.PlotGenerator", "experiments.generate_plots.RLPlotGenerator", "experiments.generate_plots.SupervisedPlotGenerator", "experiments.headless_example", "experiments.headless_example.HeadlessExample", "experiments.perf_eval_funcs", "experiments.perf_eval_funcs.MSE", "experiments.perf_eval_funcs.binary_logistic_loss", "experiments.perf_eval_funcs.deterministic_accuracy", "experiments.perf_eval_funcs.multiclass_accuracy", "experiments.perf_eval_funcs.multiclass_logistic_loss", "experiments.perf_eval_funcs.probabilistic_accuracy", "API", "Seldonian Experiments documentation", "Overview"], "terms": {"modul": [0, 1, 3, 39, 44, 48], "run": [0, 1, 2, 10, 12, 15, 33, 34, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 58, 59], "seldonian": [0, 5, 15, 32, 35, 39, 40, 43, 45, 46, 47], "gener": [0, 5, 28, 29, 32, 45, 46, 47, 58], "three": [0, 2, 44, 45, 46, 47, 49, 58], "plot": [0, 2, 30, 44, 45, 46, 47, 49, 58], "contain": [1, 5, 15, 28, 35, 45, 46, 47, 48, 59], "base": [1, 2, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 40, 41, 42, 43, 45, 46, 47, 48, 49], "class": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 59], "exampl": [1, 2, 14, 15, 16, 48, 49, 59], "spec": [2, 32, 36, 45, 46, 47, 49, 58], "object": [2, 5, 6, 10, 12, 14, 15, 16, 32, 35, 41, 45, 46, 47, 58], "__init__": [2, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 40, 41, 42, 43, 45, 46, 47, 49, 58], "__repr__": [2, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 40, 41, 42, 43, 45, 46, 47, 49, 58], "return": [2, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 29, 30, 33, 34, 35, 40, 41, 42, 43, 45, 46, 47, 49, 55, 59], "repr": [2, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 40, 41, 42, 43, 45, 46, 47, 49], "self": [2, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 40, 41, 42, 43, 45, 46, 47, 49], "method": [2, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 40, 41, 42, 43, 45, 46, 47, 49, 59], "n_trial": [2, 28, 32, 38, 45, 46, 47, 49, 58], "data_frac": [2, 31, 32, 33, 34, 36, 38, 40, 42, 43, 45, 46, 47, 49, 58], "results_dir": [2, 31, 32, 36, 40, 41, 42, 43, 45, 46, 47, 49, 58], "perf_eval_fn": [2, 45, 46, 47, 49, 58], "n_worker": [2, 38, 45, 46, 47, 49, 58], "1": [2, 5, 12, 14, 15, 16, 20, 33, 34, 42, 45, 49, 53, 54, 56, 59], "datagen_method": [2, 36, 45, 46, 47, 49, 58], "resampl": [2, 32, 45, 46, 47, 49, 59], "verbos": [2, 28, 31, 32, 40, 41, 42, 43, 46, 47, 49], "fals": [2, 14, 15, 16, 28, 30, 31, 32, 35, 40, 41, 42, 43, 46, 47, 49, 59], "baselin": [2, 40, 41, 49, 58], "model_label_dict": [2, 45, 46, 47, 49], "include_fairlearn_model": 2, "fairlearn_kwarg": 2, "performance_label": [2, 45, 46, 47, 49], "perform": [2, 10, 45, 46, 47, 49, 58, 59], "performance_yscal": [2, 45, 46, 47, 49], "linear": [2, 18, 45, 46, 47, 49], "plot_savenam": [2, 49], "none": [2, 8, 25, 45, 46, 47, 49], "plot_save_format": 2, "pdf": [2, 45, 46, 47], "include_legend": [2, 45, 46, 47], "true": [2, 15, 30, 40, 41, 42, 43, 45, 46, 47, 51, 53, 54, 56, 59], "plot_fonts": [2, 49], "12": [2, 45, 46, 47, 49], "legend_fonts": [2, 45, 46, 47, 49], "8": [2, 45, 46, 47, 49], "thi": [2, 5, 8, 10, 12, 14, 15, 16, 25, 30, 32, 35, 45, 46, 47, 49, 58, 59], "ani": [2, 8, 10, 15, 40, 41, 42, 43, 45, 46, 47, 49], "model": [2, 5, 6, 8, 10, 14, 15, 16, 18, 20, 22, 23, 25, 27, 30, 40, 41, 42, 43, 45, 46, 47, 49, 53, 54, 56, 59], "includ": [2, 16, 20, 45, 46, 47, 49, 59], "paramet": [2, 5, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 28, 30, 32, 33, 34, 35, 40, 41, 42, 43, 45, 46, 47, 49, 51, 53, 54, 56, 59], "first": [2, 10, 15, 49, 59], "Then": [2, 10, 49], "produc": [2, 49, 59], "model_nam": [5, 6, 14, 15, 16, 40, 41, 43, 59], "polici": [5, 12, 14, 15, 16, 28, 59], "env_kwarg": [5, 12, 14, 15, 16], "gamma": [5, 14, 15, 16], "0": [5, 12, 14, 15, 16, 18, 22, 23, 53, 59], "all": [5, 6, 14, 15, 16, 42, 45, 46, 47, 55, 59], "rl": [5, 12, 14, 15, 16, 46, 59], "must": [5, 6, 15, 34, 59], "have": [5, 15, 16, 20, 22, 23, 59], "least": [5, 6], "two": [5, 6, 15, 42, 59], "below": [5, 6], "depend": [5, 14, 15, 16, 45, 59], "constraint": [5, 30, 40, 42, 43, 45, 46, 47, 59], "other": [5, 59], "mai": 5, "requir": [5, 59], "when": [5, 53, 54, 56, 59], "involv": [5, 10, 59], "an": [5, 10, 12, 14, 15, 16, 40, 43, 45, 46, 47, 58], "import": [5, 12, 46], "sampl": [5, 10, 12, 34, 51, 53, 59], "variant": 5, "e": [5, 10, 12, 40, 41, 45, 46, 47, 59], "g": [5, 10, 30, 40, 41, 43, 45, 46, 47, 59], "one": [5, 14, 16, 42, 59], "j_pi_new": 5, "get_probs_from_observations_and_act": [5, 14, 15, 16, 58], "theta": [5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 46, 47], "observ": [5, 14, 15, 16, 20, 22, 23], "action": [5, 14, 15, 16], "behavior_action_prob": [5, 14, 15, 16], "i": [5, 10, 12, 14, 15, 16, 20, 29, 30, 34, 43, 45, 46, 47, 53, 54, 56, 58, 59], "also": [5, 59], "set_new_param": [5, 12, 14, 15, 16, 58], "weight": [5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 40, 42, 43, 46], "set": [5, 10, 12, 14, 15, 16, 59], "new": [5, 6, 8, 10, 14, 15, 16, 25, 28, 58, 59], "given": [5, 14, 15, 16, 35, 40, 43, 59], "train": [5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 40, 58, 59], "dataset": [5, 12, 14, 15, 16, 32, 35, 40, 42, 43, 45, 46, 47, 59], "kwarg": [5, 10, 12, 16, 27, 29, 36, 40, 41, 42, 43, 46, 47, 51, 52, 53, 54, 55, 56], "us": [5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 25, 26, 28, 30, 32, 40, 42, 43, 45, 46, 47, 53, 54, 56, 58, 59], "episod": [5, 14, 15, 16, 28, 29, 46, 59], "behavior": [5, 14, 15, 16, 28, 30, 59], "supervis": [6, 32, 40, 46, 47, 59], "learn": [6, 8, 10, 28, 32, 40, 59], "implement": [6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 59], "predict": [6, 8, 10, 18, 20, 22, 23, 25, 42, 51, 53, 54, 56, 58, 59], "x": [6, 8, 10, 14, 15, 16, 18, 20, 22, 23, 25, 37], "make": [6, 14, 15, 16, 44, 45, 46, 47, 58, 59], "featur": [6, 8, 10, 14, 15, 16, 18, 20, 22, 23, 25, 32, 35, 42, 47], "param": [6, 8, 10, 22, 23, 25], "alwai": [6, 18, 22, 23], "type": [6, 8, 10, 18, 20, 22, 23, 25, 29, 40, 43, 45, 46, 47, 55, 59], "2d": [6, 8, 10, 14, 15, 16, 18, 20, 22, 23, 25], "np": [6, 8, 10, 18, 20, 22, 23, 25, 33, 34, 40, 43, 59], "ndarrai": [6, 8, 10, 14, 15, 16, 18, 20, 22, 23, 25, 33, 34, 40, 43], "y": [6, 8, 10, 14, 15, 16, 18, 20, 22, 23, 25, 37, 45, 46, 47, 51, 52, 53, 54, 55, 56], "data": [6, 8, 10, 20, 22, 23, 25, 30, 32, 33, 34, 35, 40, 41, 42, 43, 45, 46, 47, 55, 59], "label": [6, 8, 10, 14, 15, 16, 18, 20, 22, 23, 25, 32, 35, 42, 45, 46, 47, 51, 53, 54, 56], "1d": [6, 8, 10, 14, 15, 16, 18, 20, 22, 23, 25, 42], "dt_kwarg": [8, 10], "supervisedexperimentbaselin": [8, 10, 18, 20, 22, 23, 25, 58], "decis": [8, 10], "tree": [8, 10, 40, 43, 45, 46, 47, 59], "classifi": [8, 10, 18, 20, 22, 23, 25, 59], "binari": [8, 10, 20, 25, 56], "classif": [8, 10, 20, 25, 54, 55, 56, 59], "task": [8, 10, 25], "keyword": [8, 10, 40, 43, 45, 46, 47], "argument": [8, 10, 40, 43, 45, 46, 47, 59], "scikit": [8, 10], "": [8, 10, 14, 15, 16, 18, 20, 34, 45, 46, 47], "decisiontreeclassifi": [8, 10], "take": [8, 10, 15], "posit": [8, 10, 18, 20, 22, 23, 25, 59], "probabl": [8, 10, 14, 15, 16, 20, 22, 23, 25, 54, 56, 59], "isn": [8, 10, 25], "t": [8, 10, 14, 15, 16, 25, 34], "here": [8, 15, 25, 59], "becaus": [8, 14, 15, 16, 25, 59], "ar": [8, 10, 14, 15, 16, 25, 32, 33, 34, 42, 45, 46, 47, 58, 59], "fit": [8, 10, 14, 15, 16, 18, 20, 25, 58], "case": [8, 25, 59], "instanti": [8, 10, 14, 15, 16, 25], "instanc": [8, 10, 14, 15, 16, 25], "primary_objective_fn": [10, 12, 58], "sub_regim": 10, "adam_kwarg": 10, "seldoniandecisiontre": 10, "leaf": 10, "node": 10, "tune": 10, "primary_object": 10, "The": [10, 14, 15, 16, 18, 20, 22, 23, 28, 30, 32, 33, 34, 35, 40, 41, 42, 43, 45, 46, 47, 53, 58, 59], "primari": [10, 59], "function": [10, 12, 14, 15, 16, 26, 28, 32, 33, 34, 35, 40, 42, 43, 45, 46, 47, 50, 59], "minim": [10, 12], "dure": [10, 40, 43], "process": [10, 33, 34], "sub": 10, "categori": 10, "ml": [10, 59], "problem": [10, 14, 16, 59], "pass": [10, 14, 40, 43, 45, 46, 47, 59], "adam": [10, 58], "optim": [10, 14, 16, 33, 34], "theta_init": 10, "gradient": 10, "descent": 10, "initi": [10, 12], "begin": 10, "best_theta": 10, "A": [10, 14, 15, 16, 32, 33, 34, 45, 46, 47, 59], "wrapper": [10, 14, 15, 16, 18, 20], "around": 10, "sklearn": 10, "built": [10, 59], "numpi": [10, 14, 15, 16, 18, 22, 23, 40, 43], "arrai": [10, 12, 14, 15, 16, 20, 33, 34, 42, 51, 53, 54, 56, 59], "onli": [10, 40, 43, 45, 46, 47, 53, 56, 59], "order": [10, 45, 46, 47, 59], "from": [10, 14, 15, 16, 18, 40, 41, 42, 43, 46, 47, 59], "left": [10, 45, 46, 47, 59], "right": [10, 30, 45, 46, 47, 59], "forward_pass": [10, 58], "do": [10, 45, 46, 47, 59], "forward": [10, 14], "through": [10, 14], "probs_pos_class": 10, "vector": [10, 14, 15, 16, 40, 43], "leaf_nodes_hit": 10, "id": 10, "were": 10, "hit": 10, "each": [10, 14, 15, 16, 20, 22, 23, 28, 32, 33, 34, 40, 41, 42, 43, 45, 46, 47, 54, 56, 59], "These": [10, 14, 15, 16, 40, 41, 42, 43], "need": [10, 12, 14, 15, 16, 28, 59], "comput": [10, 15], "jacobian": 10, "get_jacobian": [10, 58], "d": [10, 33, 34], "_i": 10, "dtheta_j": 10, "where": [10, 16, 29, 33, 34, 45, 46, 47], "over": [10, 14, 15, 16, 46, 55], "datapoint": [10, 20], "j": [10, 20, 29], "result": [10, 14, 15, 16, 32, 40, 41, 42, 43, 45, 46, 47, 59], "evalu": [10, 14, 15, 16, 30, 40, 42, 43, 45, 46, 47, 58, 59], "which": [10, 14, 15, 16, 28, 32, 40, 41, 42, 43, 45, 46, 47, 59], "get_leaf_node_prob": [10, 58], "retriev": 10, "current": [10, 14, 15, 16, 40, 43, 59], "call": [10, 59], "autograd": 10, "primit": 10, "workaround": 10, "sinc": [10, 46], "our": 10, "extern": 10, "librari": [10, 26, 47, 58, 59], "pred": 10, "rtype": 10, "same": [10, 16, 32, 42, 45, 46, 47, 59], "shape": [10, 16, 20, 32, 42, 47], "set_leaf_node_valu": [10, 58], "prob": [10, 18, 22, 23, 45, 46, 47], "updat": [10, 14, 15, 16], "actual": 10, "number": [10, 14, 15, 16, 20, 28, 33, 34, 35, 45, 46, 47, 59], "wrapped_primary_object": [10, 58], "get": [10, 14, 15, 16, 42], "via": [10, 59], "we": [10, 12, 14, 15, 16, 42, 59], "want": [10, 12, 15, 33, 34, 45, 46, 47, 59], "inherit": 10, "so": [10, 12, 14, 15, 16], "arg": [10, 15], "initial_solut": 12, "bb_crmin": 12, "5": [12, 18, 22, 23, 59], "bb_crmax": 12, "15": 12, "bb_cfmin": 12, "bb_cfmax": 12, "25": 12, "cr_shrink_factor": 12, "7320508075688772": 12, "cf_shrink_factor": 12, "unequ": 12, "support": [12, 40, 59], "u": 12, "fix": [12, 33, 34], "area": 12, "In": [12, 59], "maxim": 12, "expect": [12, 29], "neg": 12, "new_param": 12, "agent": [12, 15, 28], "cma": 12, "start": [12, 59], "random": [12, 25, 59], "parameter": [12, 14, 15, 16], "regressor_class": [14, 15, 16], "num_it": [14, 15, 16], "100": [14, 15, 16], "regressor_kwarg": [14, 15, 16], "exacttabularfittedqbaselin": [14, 58], "q": [14, 15, 16], "tabl": [14, 16], "regressor": [14, 15, 16], "approxim": [14, 59], "valu": [14, 15, 16, 30, 33, 34, 40, 42, 43, 45, 46, 47, 59], "nonparametr": 14, "regress": [14, 15, 16, 20, 59], "hot": [14, 16], "pair": [14, 15, 16, 18], "get_max_q": [14, 15, 16, 58], "ob": [14, 15, 16], "max": [14, 15, 16, 34, 59], "For": [14, 15, 16, 42, 54, 56, 59], "max_a": [14, 15, 16], "s_t": [14, 15, 16], "term": [14, 15, 16, 20], "target": [14, 15, 16], "get_next_ob": [14, 15, 16, 58], "index": [14, 15, 16, 32, 40, 42, 43], "next": [14, 15, 16], "o": [14, 15, 16], "transit": [14, 15, 16], "sometim": [14, 15, 16, 59], "trivial": [14, 15, 16], "often": [14, 15, 16, 59], "finit": [14, 15, 16], "time": [14, 15, 16, 34, 45, 46, 47, 59], "horizon": [14, 15, 16], "obtain": [14, 15, 16, 45, 46, 47, 59], "timestep": [14, 15, 16], "singl": [14, 15, 16, 40, 41, 42, 43, 59], "estim": [14, 15, 16, 59], "propos": [14, 15, 16], "trial": [14, 15, 16, 28, 32, 35, 40, 41, 42, 43, 45, 46, 47, 59], "under": [14, 15, 16], "get_regressor_weight": [14, 16, 58], "possibl": [14, 15], "encod": 14, "get_target": [14, 15, 16, 58], "reward": [14, 15, 16], "next_ob": [14, 15, 16], "scalar": [14, 15, 16], "state": [14, 15, 16], "wa": [14, 15, 16, 40, 43, 59], "real": [14, 15, 16, 59], "instantiate_regressor": [14, 15, 16, 58], "creat": [14, 15, 16, 32, 47, 59], "should": [14, 15, 16], "whatev": [14, 15, 16], "you": [14, 15, 16, 33, 34, 45, 46, 47, 58, 59], "readi": [14, 15, 16], "make_x": [14, 15, 16, 58], "make_regression_dataset": [14, 15, 16, 58], "algorithm": [14, 15, 16, 43, 45, 46, 47, 58, 59], "don": [14, 15, 16], "remak": [14, 15, 16], "everi": [14, 15, 16, 33, 34, 59], "never": [14, 15, 16], "chang": [14, 15, 16], "doe": [14, 15, 16, 59], "upon": [14, 15, 16], "step": [14, 15, 16], "iter": [14, 15, 16, 33, 34], "list": [14, 15, 16, 29, 40, 41, 42, 43, 45, 46, 47, 59], "tupl": [14, 15, 16], "r": [14, 15, 16], "whole": [14, 15, 16], "boolean": [14, 15, 16, 32, 59], "flag": [14, 15, 16, 32, 59], "indic": [14, 15, 16, 59], "whether": [14, 15, 16, 30, 35, 40, 43, 45, 46, 47, 59], "make_i": [14, 15, 16, 58], "next_observ": [14, 15, 16], "One": [14, 15, 16], "could": [14, 15, 16], "speed": [14, 15, 16], "up": [14, 15, 16, 45, 46, 47], "can": [14, 15, 16, 59], "That": [14, 15, 16, 59], "one_hot_encod": [14, 16, 58], "turn": [14, 16], "set_q_tabl": [14, 16, 58], "stopping_criteria_met": [14, 15, 16, 58], "If": [14, 15, 16, 45, 46, 47, 58, 59], "greedi": [14, 16], "stop": [14, 15, 16], "solut": [14, 16, 27, 40, 43, 45, 46, 47, 59], "keep": [14, 16], "track": [14, 16], "last": [14, 16], "few": [14, 16], "update_q_weight": [14, 15, 16, 58], "rlexperimentbaselin": [15, 58], "rais": 15, "notimplementederror": 15, "child": 15, "overridden": 15, "labl": 15, "dictionari": [15, 33, 34, 45, 46, 47, 59], "environ": [15, 28], "specif": [15, 45, 46, 47], "kei": [15, 16, 33, 34, 45, 46, 47], "float": [15, 16, 22, 23, 29, 30, 32, 40, 42, 43, 45, 46, 47, 55], "between": 15, "defin": 15, "criteria": [15, 59], "met": 15, "just": [15, 18, 20], "your": [15, 59], "basefittedqbaselin": [16, 58], "work": 16, "parametr": 16, "env": 16, "follow": [16, 59], "num_observ": 16, "int": [16, 32, 33, 34, 35, 40, 42, 43, 45, 46, 47], "num_act": 16, "terminal_ob": 16, "termin": 16, "out": [16, 33, 34, 40, 41, 42, 43, 45, 46, 47], "reshap": 16, "thei": [16, 45, 46, 47, 59], "linearregressionmodel": 18, "ha": [18, 22, 23, 59], "regardless": [18, 22, 23, 59], "input": [18, 22, 23, 32, 47, 59], "nxm": 18, "nx1": 18, "parent": [18, 20, 23, 28, 40, 41, 42, 43], "binarylogisticregressionmodel": 20, "logist": [20, 55, 59], "let": 20, "bia": 20, "provi": 20, "k": 20, "point": [20, 33, 34, 35, 42, 45, 46, 47, 55, 59], "length": [20, 59], "randomclassifiermodel": [22, 23], "overrid": 23, "rf_kwarg": 25, "forest": 25, "util": [26, 28, 32, 35], "rest": 26, "x_test": 27, "hyperparameter_and_setting_dict": [28, 46], "save_dir": 28, "reinforc": [28, 59], "dict": [28, 40, 43, 45, 46, 47], "etc": [28, 59], "str": [28, 32, 40, 41, 42, 43, 45, 46, 47], "directori": [28, 32, 40, 41, 42, 43, 45, 46, 47, 59], "save": [28, 32, 40, 41, 42, 43, 45, 46, 47, 59], "regenerated_episod": 28, "calcul": [29, 51, 55], "discount": 29, "ground": [29, 40, 43, 45, 46, 47, 59], "truth": [29, 40, 43, 45, 46, 47, 59], "condit": 30, "unsaf": 30, "determin": [30, 40, 43, 45, 46, 47, 59], "failur": [30, 45, 46, 47, 59], "rate": [30, 45, 46, 47, 54, 56, 59], "most": 30, "safe": [30, 40, 43, 59], "trial_i": [31, 32, 36, 40, 42, 43, 59], "orig_meta": 31, "replac": [32, 47, 59], "sensit": [32, 35, 42, 47], "attribut": [32, 35, 46, 47], "version": [32, 47], "fraction": [32, 33, 34, 40, 42, 43, 45, 46, 47, 53, 59], "niter": 33, "n_max": [33, 34], "batch_siz": [33, 34], "conveni": [33, 34], "figur": [33, 34, 42, 45, 46, 47, 59], "epoch": [33, 34], "necessari": [33, 34], "ensur": [33, 34, 45, 46, 47], "total": [33, 34], "batch": [33, 34, 45, 46, 47], "size": [33, 34, 40, 42, 43, 45, 46, 47, 59], "maximum": [33, 34], "batch_epoch_dict": [33, 34, 36, 45, 46, 47, 49], "num_epoch": [33, 34], "niter_min": 34, "num_repeat": 34, "frac": [34, 35, 45, 46, 47, 59], "seen": 34, "minimum": 34, "trial_dataset": 35, "n_point": 35, "include_sensitive_attr": 35, "prepar": 35, "bool": [35, 40, 41, 42, 43, 45, 46, 47], "prep": 35, "well": 35, "regim": [36, 45, 59], "perf_eval_kwarg": [36, 45, 46, 47, 49, 58], "m": 37, "baseline_model": [40, 46, 47], "against": [40, 59], "compar": [40, 59], "string": [40, 41, 43], "name": [40, 41, 42, 43, 45, 46, 47, 59], "logistic_regress": [40, 41, 58, 59], "experiment": [40, 41, 42, 43], "aggregate_result": [40, 41, 42, 43, 58], "group": [40, 41, 42, 43], "togeth": [40, 41, 42, 43], "file": [40, 41, 42, 43, 45, 46, 47, 58], "csv": [40, 41, 42, 43, 59], "evaluate_constraint_funct": [40, 42, 43, 58], "constraint_eval_fn": [40, 43, 45, 46, 47, 58], "constraint_eval_kwarg": [40, 43, 45, 46, 47, 49, 58], "helper": [40, 43], "found": [40, 43, 59], "empti": [40, 43, 45, 46, 47, 59], "default": [40, 42, 45, 46, 47, 59], "pars": [40, 43, 45, 46, 47, 59], "run_baseline_tri": [40, 58], "overal": [40, 42, 43, 45, 46, 47], "run_experi": [40, 42, 43, 58], "write_trial_result": [40, 41, 42, 43, 58], "colnam": [40, 41, 42, 43], "trial_dir": [40, 41, 42, 43], "write": [40, 41, 42, 43], "inform": [40, 41, 42, 43], "item": [40, 41, 42, 43], "compris": [40, 41, 42, 43, 59], "header": [40, 41, 42, 43], "print": [40, 41, 42, 43], "filenam": [40, 41, 42, 43, 45, 46, 47], "fairlearn_epsilon_constraint": [42, 47], "fairlearn": [42, 47, 59], "epsilon": 42, "threshold": [42, 59], "y_pred": [42, 51, 52, 53, 54, 55, 56], "test_label": 42, "fairlearn_constraint_nam": [42, 47], "epsilon_ev": 42, "eval_method": 42, "nativ": 42, "sensitive_featur": 42, "option": [42, 43, 45, 46, 47, 59], "column": [42, 45, 46, 47], "consid": [42, 59], "get_fairlearn_predict": [42, 58], "mitig": 42, "x_test_fairlearn": 42, "consist": 42, "potenti": 42, "more": [42, 59], "than": [42, 59], "predictor": 42, "non": 42, "zero": 42, "how": [42, 59], "mani": [42, 59], "normal": 42, "across": 42, "test": [42, 59], "run_fairlearn_tri": [42, 58], "qsa": 43, "quasi": [43, 59], "run_qsa_tri": [43, 58], "candid": [43, 46, 47], "select": [43, 46, 47], "2": 45, "3": [45, 46, 47, 59], "v": 45, "amount": [45, 46, 47, 59], "error": [45, 46, 47, 51, 54, 56], "bar": [45, 46, 47], "proport": [45, 46, 47], "horizont": [45, 46, 47, 59], "axi": [45, 46, 47, 59], "signatur": [45, 46, 47], "vari": 45, "see": [45, 58, 59], "tutori": [45, 59], "http": 45, "c": 45, "umass": 45, "edu": 45, "worker": [45, 46, 47, 59], "multiprocess": [45, 46, 47], "extra": [45, 46, 47], "custom": [45, 46, 47, 59], "provid": [45, 46, 47, 59], "instruct": [45, 46, 47], "n_epoch": [45, 46, 47], "make_plot": [45, 46, 47, 58, 59], "ignore_model": [45, 46, 47], "fontsiz": [45, 46, 47], "title_fonts": [45, 46, 47], "ncols_legend": [45, 46, 47], "accuraci": [45, 46, 47, 59], "sr_label": [45, 46, 47], "fr_label": [45, 46, 47], "violat": [45, 46, 47], "performance_ylim": [45, 46, 47], "hoz_axis_label": [45, 46, 47], "show_confidence_level": [45, 46, 47], "marker_s": [45, 46, 47], "20": [45, 46, 47], "save_format": [45, 46, 47], "show_titl": [45, 46, 47], "custom_titl": [45, 46, 47], "savenam": [45, 46, 47], "look": [45, 46, 47, 59], "them": [45, 46, 47, 59], "shown": [45, 46, 47, 59], "legend": [45, 46, 47], "note": [45, 46, 47], "specifi": [45, 46, 47, 59], "appear": [45, 46, 47], "show": [45, 46, 47, 59], "font": [45, 46, 47], "text": [45, 46, 47], "middl": [45, 46, 47, 59], "scale": [45, 46, 47], "log": [45, 46, 47, 59], "limit": [45, 46, 47], "matplotlib": [45, 46, 47], "automat": [45, 46, 47], "what": [45, 46, 47, 59], "black": [45, 46, 47, 59], "dot": [45, 46, 47, 59], "line": [45, 46, 47, 59], "delta": [45, 46, 47, 59], "titl": [45, 46, 47], "top": [45, 46, 47, 59], "disk": [45, 46, 47], "validate_constraint_eval_kwarg": [45, 46, 47, 58], "addit": [45, 46, 47], "within": [45, 46, 47, 59], "held": [45, 46, 47], "plotgener": [46, 47, 58], "func": [46, 47], "plot_importance_weight": [46, 58], "mean": [46, 51], "qsa_result": [46, 59], "folder": [46, 59], "relev": 46, "run_baseline_experi": [46, 47, 58, 59], "assign": [46, 47], "displai": [46, 47], "stdout": [46, 47], "while": [46, 47, 59], "run_seldonian_experi": [46, 47, 58, 59], "generate_resampled_dataset": [47, 58], "resampled_dataset": [47, 59], "generate_trial_dataset": [47, 58], "run_fairlearn_experi": [47, 58], "fairlearn_sensitive_feature_nam": 47, "fairlearn_epsilon_ev": 47, "fairlearn_eval_kwarg": 47, "run_headless_seldonian_experi": [47, 58], "full_pretraining_model": [47, 49], "initial_state_dict": 47, "headless_pretraining_model": [47, 49], "head_layer_nam": [47, 49], "latent_feature_shap": [47, 49], "loss_func_pretrain": [47, 49], "learning_rate_pretrain": [47, 49], "pretraining_devic": [47, 49], "batch_epoch_dict_pretrain": [47, 49], "safety_batch_size_pretrain": [47, 49], "1000": 47, "headless": [47, 49], "baseexampl": [49, 58], "squar": 51, "correct": 53, "best": 53, "output": [53, 54, 56], "multi": [54, 55], "dimension": [54, 56], "averag": 55, "loss": 55, "welcom": 58, "design": 58, "help": [58, 59], "safeti": [58, 59], "sourc": 58, "code": [58, 59], "host": 58, "github": 58, "heavi": 58, "engin": [58, 59], "core": [58, 59], "complet": 58, "overview": 58, "api": [58, 59], "base_exampl": 58, "decision_tre": 58, "decisiontreeclassifierbaselin": 58, "decision_tree_leaf_tun": 58, "decisiontreeclassifierleaftuningbaselin": 58, "diabetes_us_baselin": 58, "rldiabetesusagentbaselin": 58, "fitted_q": 58, "approximatetabularfittedqbaselin": 58, "linear_regress": 58, "linearregressionbaselin": 58, "binarylogisticregressionbaselin": 58, "random_classifi": 58, "uniformrandomclassifierbaselin": 58, "weightedrandomclassifierbaselin": 58, "random_forest": 58, "randomforestclassifierbaselin": 58, "experiment_util": 58, "batch_predict": 58, "generate_behavior_policy_episod": 58, "generate_episodes_and_calc_j": 58, "has_fail": 58, "load_regenerated_episod": 58, "load_resampled_dataset": 58, "make_batch_epoch_dict_fixednit": 58, "make_batch_epoch_dict_min_sample_repeat": 58, "prep_feat_label": 58, "setup_sa_spec_for_exp": 58, "supervised_initial_solution_fn": 58, "trial_arg_chunk": 58, "baselineexperi": [58, 59], "fairlearnexperi": [58, 59], "seldonianexperi": 58, "generate_plot": 58, "rlplotgener": [58, 59], "supervisedplotgener": [58, 59], "headless_exampl": 58, "headlessexampl": 58, "perf_eval_func": 58, "mse": 58, "binary_logistic_loss": 58, "deterministic_accuraci": 58, "multiclass_accuraci": 58, "multiclass_logistic_loss": 58, "probabilistic_accuraci": 58, "document": 59, "explain": 59, "sa": 59, "detail": 59, "descript": 59, "machin": 59, "toolkit": 59, "homepag": 59, "heavili": 59, "wai": 59, "It": 59, "increas": 59, "some": 59, "satisfi": 59, "come": 59, "cost": 59, "reduc": 59, "understand": 59, "trade": 59, "off": 59, "cannot": 59, "No": 59, "despit": 59, "quantiti": 59, "assum": 59, "access": 59, "world": 59, "typic": 59, "instead": 59, "adopt": 59, "strategi": 59, "bootstrap": 59, "gpa": 59, "discuss": 59, "scienc": 59, "paper": 59, "panel": 59, "thoma": 59, "et": 59, "al": 59, "2019": 59, "origin": 59, "fair": 59, "dispar": 59, "impact": 59, "green": 59, "dash": 59, "sever": 59, "standard": 59, "red": 59, "awar": 59, "blue": 59, "magenta": 59, "repres": 59, "confid": 59, "05": 59, "either": 59, "both": 59, "describ": 59, "interfac": 59, "everyth": 59, "underli": 59, "uncertainti": 59, "multipli": 59, "differ": 59, "dimens": 59, "At": 59, "generate_episod": 59, "parallel": 59, "multipl": 59, "avail": 59, "independ": 59, "embarrassingli": 59, "program": 59, "less": 59, "explicitli": 59, "nsf": 59, "plot_gener": 59, "easi": 59, "develop": 59, "easili": 59, "add": 59, "own": 59, "ad": 59, "alreadi": 59, "p": 59, "abov": 59, "would": 59, "simpli": 59, "block": 59, "like": 59, "anoth": 59, "narrow": 59, "rang": 59, "progress": 59, "structur": 59, "insid": 59, "after": 59, "trial_data": 59, "data_frac_0": 59, "0010_trial_0": 59, "0010_trial_1": 59, "0010_trial_2": 59, "0010_trial_3": 59, "0010_trial_4": 59, "0022_trial_0": 59, "0022_trial_1": 59, "0022_trial_2": 59, "0022_trial_3": 59, "0022_trial_4": 59, "0046_trial_0": 59, "0046_trial_1": 59, "0046_trial_2": 59, "0046_trial_3": 59, "0046_trial_4": 59, "0050_trial_0": 59, "0100_trial_0": 59, "0100_trial_1": 59, "0100_trial_2": 59, "0100_trial_3": 59, "0100_trial_4": 59, "0215_trial_0": 59, "0215_trial_1": 59, "0215_trial_2": 59, "0215_trial_3": 59, "0215_trial_4": 59, "0464_trial_0": 59, "0464_trial_1": 59, "0464_trial_2": 59, "0464_trial_3": 59, "0464_trial_4": 59, "1000_trial_0": 59, "1000_trial_1": 59, "1000_trial_2": 59, "1000_trial_3": 59, "1000_trial_4": 59, "2154_trial_0": 59, "2154_trial_1": 59, "2154_trial_2": 59, "2154_trial_3": 59, "2154_trial_4": 59, "4642_trial_0": 59, "4642_trial_1": 59, "4642_trial_2": 59, "4642_trial_3": 59, "4642_trial_4": 59, "data_frac_1": 59, "0000_trial_0": 59, "0000_trial_1": 59, "0000_trial_2": 59, "0000_trial_3": 59, "0000_trial_4": 59, "resampled_data_trial0": 59, "pkl": 59, "resampled_data_trial1": 59, "resampled_data_trial2": 59, "resampled_data_trial3": 59, "resampled_data_trial4": 59, "logspac": 59, "10": 59, "space": 59, "001": 59, "end": 59, "As": 59, "50": 59, "fail": 59, "content": 59, "6105_trial36": 59, "passed_safeti": 59, "6105402296585326": 59, "36": 59, "6746247014792527": 59, "level": 59, "_result": 59, "logistic_regression_result": 59, "its": 59, "separ": 59, "curv": 59, "autom": 59, "loan": 59, "approv": 59, "system": 59}, "objects": {"": [[0, 0, 0, "-", "experiments"]], "experiments": [[1, 0, 0, "-", "base_example"], [3, 0, 0, "-", "baselines"], [26, 0, 0, "-", "experiment_utils"], [39, 0, 0, "-", "experiments"], [44, 0, 0, "-", "generate_plots"], [48, 0, 0, "-", "headless_example"], [50, 0, 0, "-", "perf_eval_funcs"]], "experiments.base_example": [[2, 1, 1, "", "BaseExample"]], "experiments.base_example.BaseExample": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "__repr__"], [2, 2, 1, "", "run"]], "experiments.baselines": [[4, 0, 0, "-", "baselines"], [7, 0, 0, "-", "decision_tree"], [9, 0, 0, "-", "decision_tree_leaf_tuning"], [11, 0, 0, "-", "diabetes_US_baseline"], [13, 0, 0, "-", "fitted_Q"], [17, 0, 0, "-", "linear_regression"], [19, 0, 0, "-", "logistic_regression"], [21, 0, 0, "-", "random_classifiers"], [24, 0, 0, "-", "random_forest"]], "experiments.baselines.baselines": [[5, 1, 1, "", "RLExperimentBaseline"], [6, 1, 1, "", "SupervisedExperimentBaseline"]], "experiments.baselines.baselines.RLExperimentBaseline": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "__repr__"], [5, 2, 1, "", "set_new_params"], [5, 2, 1, "", "train"]], "experiments.baselines.baselines.SupervisedExperimentBaseline": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "__repr__"], [6, 2, 1, "", "predict"], [6, 2, 1, "", "train"]], "experiments.baselines.decision_tree": [[8, 1, 1, "", "DecisionTreeClassifierBaseline"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "__repr__"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "train"]], "experiments.baselines.decision_tree_leaf_tuning": [[10, 1, 1, "", "DecisionTreeClassifierLeafTuningBaseline"]], "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "__repr__"], [10, 2, 1, "", "adam"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "forward_pass"], [10, 2, 1, "", "get_jacobian"], [10, 2, 1, "", "get_leaf_node_probs"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "set_leaf_node_values"], [10, 2, 1, "", "train"], [10, 2, 1, "", "wrapped_primary_objective"]], "experiments.baselines.diabetes_US_baseline": [[12, 1, 1, "", "RLDiabetesUSAgentBaseline"]], "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "__repr__"], [12, 2, 1, "", "primary_objective_fn"], [12, 2, 1, "", "set_new_params"], [12, 2, 1, "", "train"]], "experiments.baselines.fitted_Q": [[14, 1, 1, "", "ApproximateTabularFittedQBaseline"], [15, 1, 1, "", "BaseFittedQBaseline"], [16, 1, 1, "", "ExactTabularFittedQBaseline"]], "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "__repr__"], [14, 2, 1, "", "get_max_q"], [14, 2, 1, "", "get_next_obs"], [14, 2, 1, "", "get_probs_from_observations_and_actions"], [14, 2, 1, "", "get_regressor_weights"], [14, 2, 1, "", "get_target"], [14, 2, 1, "", "instantiate_regressor"], [14, 2, 1, "", "make_X"], [14, 2, 1, "", "make_regression_dataset"], [14, 2, 1, "", "make_y"], [14, 2, 1, "", "one_hot_encode"], [14, 2, 1, "", "set_new_params"], [14, 2, 1, "", "set_q_table"], [14, 2, 1, "", "stopping_criteria_met"], [14, 2, 1, "", "update_Q_weights"]], "experiments.baselines.fitted_Q.BaseFittedQBaseline": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "__repr__"], [15, 2, 1, "", "get_max_q"], [15, 2, 1, "", "get_next_obs"], [15, 2, 1, "", "get_probs_from_observations_and_actions"], [15, 2, 1, "", "get_target"], [15, 2, 1, "", "instantiate_regressor"], [15, 2, 1, "", "make_X"], [15, 2, 1, "", "make_regression_dataset"], [15, 2, 1, "", "make_y"], [15, 2, 1, "", "set_new_params"], [15, 2, 1, "", "stopping_criteria_met"], [15, 2, 1, "", "update_Q_weights"]], "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "__repr__"], [16, 2, 1, "", "get_max_q"], [16, 2, 1, "", "get_next_obs"], [16, 2, 1, "", "get_probs_from_observations_and_actions"], [16, 2, 1, "", "get_regressor_weights"], [16, 2, 1, "", "get_target"], [16, 2, 1, "", "instantiate_regressor"], [16, 2, 1, "", "make_X"], [16, 2, 1, "", "make_regression_dataset"], [16, 2, 1, "", "make_y"], [16, 2, 1, "", "one_hot_encode"], [16, 2, 1, "", "set_new_params"], [16, 2, 1, "", "set_q_table"], [16, 2, 1, "", "stopping_criteria_met"], [16, 2, 1, "", "update_Q_weights"]], "experiments.baselines.linear_regression": [[18, 1, 1, "", "LinearRegressionBaseline"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "train"]], "experiments.baselines.logistic_regression": [[20, 1, 1, "", "BinaryLogisticRegressionBaseline"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "__repr__"], [20, 2, 1, "", "fit"], [20, 2, 1, "", "predict"], [20, 2, 1, "", "train"]], "experiments.baselines.random_classifiers": [[22, 1, 1, "", "UniformRandomClassifierBaseline"], [23, 1, 1, "", "WeightedRandomClassifierBaseline"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "__repr__"], [22, 2, 1, "", "predict"], [22, 2, 1, "", "train"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "__repr__"], [23, 2, 1, "", "predict"], [23, 2, 1, "", "train"]], "experiments.baselines.random_forest": [[25, 1, 1, "", "RandomForestClassifierBaseline"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "__repr__"], [25, 2, 1, "", "predict"], [25, 2, 1, "", "train"]], "experiments.experiment_utils": [[27, 3, 1, "", "batch_predictions"], [28, 3, 1, "", "generate_behavior_policy_episodes"], [29, 3, 1, "", "generate_episodes_and_calc_J"], [30, 3, 1, "", "has_failed"], [31, 3, 1, "", "load_regenerated_episodes"], [32, 3, 1, "", "load_resampled_datasets"], [33, 3, 1, "", "make_batch_epoch_dict_fixedniter"], [34, 3, 1, "", "make_batch_epoch_dict_min_sample_repeat"], [35, 3, 1, "", "prep_feat_labels"], [36, 3, 1, "", "setup_SA_spec_for_exp"], [37, 3, 1, "", "supervised_initial_solution_fn"], [38, 3, 1, "", "trial_arg_chunker"]], "experiments.experiments": [[40, 1, 1, "", "BaselineExperiment"], [41, 1, 1, "", "Experiment"], [42, 1, 1, "", "FairlearnExperiment"], [43, 1, 1, "", "SeldonianExperiment"]], "experiments.experiments.BaselineExperiment": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "__repr__"], [40, 2, 1, "", "aggregate_results"], [40, 2, 1, "", "evaluate_constraint_functions"], [40, 2, 1, "", "run_baseline_trial"], [40, 2, 1, "", "run_experiment"], [40, 2, 1, "", "write_trial_result"]], "experiments.experiments.Experiment": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "__repr__"], [41, 2, 1, "", "aggregate_results"], [41, 2, 1, "", "write_trial_result"]], "experiments.experiments.FairlearnExperiment": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "__repr__"], [42, 2, 1, "", "aggregate_results"], [42, 2, 1, "", "evaluate_constraint_function"], [42, 2, 1, "", "get_fairlearn_predictions"], [42, 2, 1, "", "run_experiment"], [42, 2, 1, "", "run_fairlearn_trial"], [42, 2, 1, "", "write_trial_result"]], "experiments.experiments.SeldonianExperiment": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "__repr__"], [43, 2, 1, "", "aggregate_results"], [43, 2, 1, "", "evaluate_constraint_functions"], [43, 2, 1, "", "run_QSA_trial"], [43, 2, 1, "", "run_experiment"], [43, 2, 1, "", "write_trial_result"]], "experiments.generate_plots": [[45, 1, 1, "", "PlotGenerator"], [46, 1, 1, "", "RLPlotGenerator"], [47, 1, 1, "", "SupervisedPlotGenerator"]], "experiments.generate_plots.PlotGenerator": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "__repr__"], [45, 2, 1, "", "make_plots"], [45, 2, 1, "", "validate_constraint_eval_kwargs"]], "experiments.generate_plots.RLPlotGenerator": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "__repr__"], [46, 2, 1, "", "make_plots"], [46, 2, 1, "", "plot_importance_weights"], [46, 2, 1, "", "run_baseline_experiment"], [46, 2, 1, "", "run_seldonian_experiment"], [46, 2, 1, "", "validate_constraint_eval_kwargs"]], "experiments.generate_plots.SupervisedPlotGenerator": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "__repr__"], [47, 2, 1, "", "generate_resampled_datasets"], [47, 2, 1, "", "generate_trial_datasets"], [47, 2, 1, "", "make_plots"], [47, 2, 1, "", "run_baseline_experiment"], [47, 2, 1, "", "run_fairlearn_experiment"], [47, 2, 1, "", "run_headless_seldonian_experiment"], [47, 2, 1, "", "run_seldonian_experiment"], [47, 2, 1, "", "validate_constraint_eval_kwargs"]], "experiments.headless_example": [[49, 1, 1, "", "HeadlessExample"]], "experiments.headless_example.HeadlessExample": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "__repr__"], [49, 2, 1, "", "run"]], "experiments.perf_eval_funcs": [[51, 3, 1, "", "MSE"], [52, 3, 1, "", "binary_logistic_loss"], [53, 3, 1, "", "deterministic_accuracy"], [54, 3, 1, "", "multiclass_accuracy"], [55, 3, 1, "", "multiclass_logistic_loss"], [56, 3, 1, "", "probabilistic_accuracy"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"experi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59], "base_exampl": [1, 2], "baseexampl": 2, "baselin": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 59], "rlexperimentbaselin": 5, "supervisedexperimentbaselin": 6, "decision_tre": [7, 8], "decisiontreeclassifierbaselin": 8, "decision_tree_leaf_tun": [9, 10], "decisiontreeclassifierleaftuningbaselin": 10, "diabetes_us_baselin": [11, 12], "rldiabetesusagentbaselin": 12, "fitted_q": [13, 14, 15, 16], "approximatetabularfittedqbaselin": 14, "basefittedqbaselin": 15, "exacttabularfittedqbaselin": 16, "linear_regress": [17, 18], "linearregressionbaselin": 18, "logistic_regress": [19, 20], "binarylogisticregressionbaselin": 20, "random_classifi": [21, 22, 23], "uniformrandomclassifierbaselin": 22, "weightedrandomclassifierbaselin": 23, "random_forest": [24, 25], "randomforestclassifierbaselin": 25, "experiment_util": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "batch_predict": 27, "generate_behavior_policy_episod": 28, "generate_episodes_and_calc_j": 29, "has_fail": 30, "load_regenerated_episod": 31, "load_resampled_dataset": 32, "make_batch_epoch_dict_fixednit": 33, "make_batch_epoch_dict_min_sample_repeat": 34, "prep_feat_label": 35, "setup_sa_spec_for_exp": 36, "supervised_initial_solution_fn": 37, "trial_arg_chunk": 38, "baselineexperi": 40, "fairlearnexperi": 42, "seldonianexperi": 43, "generate_plot": [44, 45, 46, 47], "plotgener": 45, "rlplotgener": 46, "supervisedplotgener": 47, "headless_exampl": [48, 49], "headlessexampl": 49, "perf_eval_func": [50, 51, 52, 53, 54, 55, 56], "mse": 51, "binary_logistic_loss": 52, "deterministic_accuraci": 53, "multiclass_accuraci": 54, "multiclass_logistic_loss": 55, "probabilistic_accuraci": 56, "api": 57, "seldonian": [58, 59], "document": 58, "tabl": 58, "content": 58, "overview": 59, "three": 59, "plot": 59, "gener": 59, "spec": 59, "object": 59, "n_trial": 59, "data_frac": 59, "datagen_method": 59, "n_worker": 59, "perf_eval_fn": 59, "perf_eval_kwarg": 59, "constraint_eval_fn": 59, "constraint_eval_kwarg": 59, "results_dir": 59, "file": 59, "an": 59}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"experiments": [[0, "module-experiments"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "experiments.base_example.BaseExample": [[2, "experiments-base-example-baseexample"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.baselines": [[4, "module-experiments.baselines.baselines"]], "experiments.baselines.baselines.RLExperimentBaseline": [[5, "experiments-baselines-baselines-rlexperimentbaseline"]], "experiments.baselines.baselines.SupervisedExperimentBaseline": [[6, "experiments-baselines-baselines-supervisedexperimentbaseline"]], "experiments.baselines.decision_tree": [[7, "module-experiments.baselines.decision_tree"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[8, "experiments-baselines-decision-tree-decisiontreeclassifierbaseline"]], "experiments.baselines.decision_tree_leaf_tuning": [[9, "module-experiments.baselines.decision_tree_leaf_tuning"]], "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline": [[10, "experiments-baselines-decision-tree-leaf-tuning-decisiontreeclassifierleaftuningbaseline"]], "experiments.baselines.diabetes_US_baseline": [[11, "module-experiments.baselines.diabetes_US_baseline"]], "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline": [[12, "experiments-baselines-diabetes-us-baseline-rldiabetesusagentbaseline"]], "experiments.baselines.fitted_Q": [[13, "module-experiments.baselines.fitted_Q"]], "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline": [[14, "experiments-baselines-fitted-q-approximatetabularfittedqbaseline"]], "experiments.baselines.fitted_Q.BaseFittedQBaseline": [[15, "experiments-baselines-fitted-q-basefittedqbaseline"]], "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline": [[16, "experiments-baselines-fitted-q-exacttabularfittedqbaseline"]], "experiments.baselines.linear_regression": [[17, "module-experiments.baselines.linear_regression"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[18, "experiments-baselines-linear-regression-linearregressionbaseline"]], "experiments.baselines.logistic_regression": [[19, "module-experiments.baselines.logistic_regression"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[20, "experiments-baselines-logistic-regression-binarylogisticregressionbaseline"]], "experiments.baselines.random_classifiers": [[21, "module-experiments.baselines.random_classifiers"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[22, "experiments-baselines-random-classifiers-uniformrandomclassifierbaseline"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[23, "experiments-baselines-random-classifiers-weightedrandomclassifierbaseline"]], "experiments.baselines.random_forest": [[24, "module-experiments.baselines.random_forest"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[25, "experiments-baselines-random-forest-randomforestclassifierbaseline"]], "experiments.experiment_utils": [[26, "module-experiments.experiment_utils"]], "experiments.experiment_utils.batch_predictions": [[27, "experiments-experiment-utils-batch-predictions"]], "experiments.experiment_utils.generate_behavior_policy_episodes": [[28, "experiments-experiment-utils-generate-behavior-policy-episodes"]], "experiments.experiment_utils.generate_episodes_and_calc_J": [[29, "experiments-experiment-utils-generate-episodes-and-calc-j"]], "experiments.experiment_utils.has_failed": [[30, "experiments-experiment-utils-has-failed"]], "experiments.experiment_utils.load_regenerated_episodes": [[31, "experiments-experiment-utils-load-regenerated-episodes"]], "experiments.experiment_utils.load_resampled_datasets": [[32, "experiments-experiment-utils-load-resampled-datasets"]], "experiments.experiment_utils.make_batch_epoch_dict_fixedniter": [[33, "experiments-experiment-utils-make-batch-epoch-dict-fixedniter"]], "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat": [[34, "experiments-experiment-utils-make-batch-epoch-dict-min-sample-repeat"]], "experiments.experiment_utils.prep_feat_labels": [[35, "experiments-experiment-utils-prep-feat-labels"]], "experiments.experiment_utils.setup_SA_spec_for_exp": [[36, "experiments-experiment-utils-setup-sa-spec-for-exp"]], "experiments.experiment_utils.supervised_initial_solution_fn": [[37, "experiments-experiment-utils-supervised-initial-solution-fn"]], "experiments.experiment_utils.trial_arg_chunker": [[38, "experiments-experiment-utils-trial-arg-chunker"]], "experiments.experiments": [[39, "module-experiments.experiments"]], "experiments.experiments.BaselineExperiment": [[40, "experiments-experiments-baselineexperiment"]], "experiments.experiments.Experiment": [[41, "experiments-experiments-experiment"]], "experiments.experiments.FairlearnExperiment": [[42, "experiments-experiments-fairlearnexperiment"]], "experiments.experiments.SeldonianExperiment": [[43, "experiments-experiments-seldonianexperiment"]], "experiments.generate_plots": [[44, "module-experiments.generate_plots"]], "experiments.generate_plots.PlotGenerator": [[45, "experiments-generate-plots-plotgenerator"]], "experiments.generate_plots.RLPlotGenerator": [[46, "experiments-generate-plots-rlplotgenerator"]], "experiments.generate_plots.SupervisedPlotGenerator": [[47, "experiments-generate-plots-supervisedplotgenerator"]], "experiments.headless_example": [[48, "module-experiments.headless_example"]], "experiments.headless_example.HeadlessExample": [[49, "experiments-headless-example-headlessexample"]], "experiments.perf_eval_funcs": [[50, "module-experiments.perf_eval_funcs"]], "experiments.perf_eval_funcs.MSE": [[51, "experiments-perf-eval-funcs-mse"]], "experiments.perf_eval_funcs.binary_logistic_loss": [[52, "experiments-perf-eval-funcs-binary-logistic-loss"]], "experiments.perf_eval_funcs.deterministic_accuracy": [[53, "experiments-perf-eval-funcs-deterministic-accuracy"]], "experiments.perf_eval_funcs.multiclass_accuracy": [[54, "experiments-perf-eval-funcs-multiclass-accuracy"]], "experiments.perf_eval_funcs.multiclass_logistic_loss": [[55, "experiments-perf-eval-funcs-multiclass-logistic-loss"]], "experiments.perf_eval_funcs.probabilistic_accuracy": [[56, "experiments-perf-eval-funcs-probabilistic-accuracy"]], "API": [[57, "api"]], "Seldonian Experiments documentation": [[58, "seldonian-experiments-documentation"]], "Table of contents": [[58, "table-of-contents"]], "Overview": [[59, "overview"]], "Seldonian experiments": [[59, "seldonian-experiments"]], "Three Plots": [[59, "three-plots"]], "Plot generator": [[59, "plot-generator"]], "Spec object": [[59, "spec-object"]], "n_trials": [[59, "n-trials"]], "data_fracs": [[59, "data-fracs"]], "datagen_method": [[59, "datagen-method"]], "n_workers": [[59, "n-workers"]], "perf_eval_fn": [[59, "perf-eval-fn"]], "perf_eval_kwargs": [[59, "perf-eval-kwargs"]], "constraint_eval_fns": [[59, "constraint-eval-fns"]], "constraint_eval_kwargs": [[59, "constraint-eval-kwargs"]], "results_dir": [[59, "results-dir"]], "Baselines": [[59, "baselines"]], "Files generated in an experiment": [[59, "files-generated-in-an-experiment"]]}, "indexentries": {"experiments": [[0, "module-experiments"]], "module": [[0, "module-experiments"], [1, "module-experiments.base_example"], [3, "module-experiments.baselines"], [4, "module-experiments.baselines.baselines"], [7, "module-experiments.baselines.decision_tree"], [9, "module-experiments.baselines.decision_tree_leaf_tuning"], [11, "module-experiments.baselines.diabetes_US_baseline"], [13, "module-experiments.baselines.fitted_Q"], [17, "module-experiments.baselines.linear_regression"], [19, "module-experiments.baselines.logistic_regression"], [21, "module-experiments.baselines.random_classifiers"], [24, "module-experiments.baselines.random_forest"], [26, "module-experiments.experiment_utils"], [39, "module-experiments.experiments"], [44, "module-experiments.generate_plots"], [48, "module-experiments.headless_example"], [50, "module-experiments.perf_eval_funcs"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "baseexample (class in experiments.base_example)": [[2, "experiments.base_example.BaseExample"]], "__init__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__init__"]], "__repr__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__repr__"]], "run() (baseexample method)": [[2, "experiments.base_example.BaseExample.run"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.baselines": [[4, "module-experiments.baselines.baselines"]], "rlexperimentbaseline (class in experiments.baselines.baselines)": [[5, "experiments.baselines.baselines.RLExperimentBaseline"]], "__init__() (rlexperimentbaseline method)": [[5, "experiments.baselines.baselines.RLExperimentBaseline.__init__"]], "__repr__() (rlexperimentbaseline method)": [[5, "experiments.baselines.baselines.RLExperimentBaseline.__repr__"]], "set_new_params() (rlexperimentbaseline method)": [[5, "experiments.baselines.baselines.RLExperimentBaseline.set_new_params"]], "train() (rlexperimentbaseline method)": [[5, "experiments.baselines.baselines.RLExperimentBaseline.train"]], "supervisedexperimentbaseline (class in experiments.baselines.baselines)": [[6, "experiments.baselines.baselines.SupervisedExperimentBaseline"]], "__init__() (supervisedexperimentbaseline method)": [[6, "experiments.baselines.baselines.SupervisedExperimentBaseline.__init__"]], "__repr__() (supervisedexperimentbaseline method)": [[6, "experiments.baselines.baselines.SupervisedExperimentBaseline.__repr__"]], "predict() (supervisedexperimentbaseline method)": [[6, "experiments.baselines.baselines.SupervisedExperimentBaseline.predict"]], "train() (supervisedexperimentbaseline method)": [[6, "experiments.baselines.baselines.SupervisedExperimentBaseline.train"]], "experiments.baselines.decision_tree": [[7, "module-experiments.baselines.decision_tree"]], "decisiontreeclassifierbaseline (class in experiments.baselines.decision_tree)": [[8, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline"]], "__init__() (decisiontreeclassifierbaseline method)": [[8, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__init__"]], "__repr__() (decisiontreeclassifierbaseline method)": [[8, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__repr__"]], "predict() (decisiontreeclassifierbaseline method)": [[8, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.predict"]], "train() (decisiontreeclassifierbaseline method)": [[8, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.train"]], "experiments.baselines.decision_tree_leaf_tuning": [[9, "module-experiments.baselines.decision_tree_leaf_tuning"]], "decisiontreeclassifierleaftuningbaseline (class in experiments.baselines.decision_tree_leaf_tuning)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline"]], "__init__() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.__init__"]], "__repr__() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.__repr__"]], "adam() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.adam"]], "fit() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.fit"]], "forward_pass() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.forward_pass"]], "get_jacobian() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.get_jacobian"]], "get_leaf_node_probs() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.get_leaf_node_probs"]], "predict() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.predict"]], "set_leaf_node_values() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.set_leaf_node_values"]], "train() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.train"]], "wrapped_primary_objective() (decisiontreeclassifierleaftuningbaseline method)": [[10, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.wrapped_primary_objective"]], "experiments.baselines.diabetes_us_baseline": [[11, "module-experiments.baselines.diabetes_US_baseline"]], "rldiabetesusagentbaseline (class in experiments.baselines.diabetes_us_baseline)": [[12, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline"]], "__init__() (rldiabetesusagentbaseline method)": [[12, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.__init__"]], "__repr__() (rldiabetesusagentbaseline method)": [[12, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.__repr__"]], "primary_objective_fn() (rldiabetesusagentbaseline method)": [[12, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.primary_objective_fn"]], "set_new_params() (rldiabetesusagentbaseline method)": [[12, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.set_new_params"]], "train() (rldiabetesusagentbaseline method)": [[12, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.train"]], "experiments.baselines.fitted_q": [[13, "module-experiments.baselines.fitted_Q"]], "approximatetabularfittedqbaseline (class in experiments.baselines.fitted_q)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline"]], "__init__() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.__init__"]], "__repr__() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.__repr__"]], "get_max_q() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.get_max_q"]], "get_next_obs() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.get_next_obs"]], "get_probs_from_observations_and_actions() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.get_probs_from_observations_and_actions"]], "get_regressor_weights() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.get_regressor_weights"]], "get_target() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.get_target"]], "instantiate_regressor() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.instantiate_regressor"]], "make_x() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.make_X"]], "make_regression_dataset() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.make_regression_dataset"]], "make_y() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.make_y"]], "one_hot_encode() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.one_hot_encode"]], "set_new_params() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.set_new_params"]], "set_q_table() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.set_q_table"]], "stopping_criteria_met() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.stopping_criteria_met"]], "update_q_weights() (approximatetabularfittedqbaseline method)": [[14, "experiments.baselines.fitted_Q.ApproximateTabularFittedQBaseline.update_Q_weights"]], "basefittedqbaseline (class in experiments.baselines.fitted_q)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline"]], "__init__() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.__init__"]], "__repr__() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.__repr__"]], "get_max_q() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.get_max_q"]], "get_next_obs() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.get_next_obs"]], "get_probs_from_observations_and_actions() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.get_probs_from_observations_and_actions"]], "get_target() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.get_target"]], "instantiate_regressor() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.instantiate_regressor"]], "make_x() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.make_X"]], "make_regression_dataset() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.make_regression_dataset"]], "make_y() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.make_y"]], "set_new_params() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.set_new_params"]], "stopping_criteria_met() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.stopping_criteria_met"]], "update_q_weights() (basefittedqbaseline method)": [[15, "experiments.baselines.fitted_Q.BaseFittedQBaseline.update_Q_weights"]], "exacttabularfittedqbaseline (class in experiments.baselines.fitted_q)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline"]], "__init__() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.__init__"]], "__repr__() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.__repr__"]], "get_max_q() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.get_max_q"]], "get_next_obs() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.get_next_obs"]], "get_probs_from_observations_and_actions() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.get_probs_from_observations_and_actions"]], "get_regressor_weights() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.get_regressor_weights"]], "get_target() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.get_target"]], "instantiate_regressor() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.instantiate_regressor"]], "make_x() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.make_X"]], "make_regression_dataset() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.make_regression_dataset"]], "make_y() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.make_y"]], "one_hot_encode() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.one_hot_encode"]], "set_new_params() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.set_new_params"]], "set_q_table() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.set_q_table"]], "stopping_criteria_met() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.stopping_criteria_met"]], "update_q_weights() (exacttabularfittedqbaseline method)": [[16, "experiments.baselines.fitted_Q.ExactTabularFittedQBaseline.update_Q_weights"]], "experiments.baselines.linear_regression": [[17, "module-experiments.baselines.linear_regression"]], "linearregressionbaseline (class in experiments.baselines.linear_regression)": [[18, "experiments.baselines.linear_regression.LinearRegressionBaseline"]], "__init__() (linearregressionbaseline method)": [[18, "experiments.baselines.linear_regression.LinearRegressionBaseline.__init__"]], "__repr__() (linearregressionbaseline method)": [[18, "experiments.baselines.linear_regression.LinearRegressionBaseline.__repr__"]], "fit() (linearregressionbaseline method)": [[18, "experiments.baselines.linear_regression.LinearRegressionBaseline.fit"]], "predict() (linearregressionbaseline method)": [[18, "experiments.baselines.linear_regression.LinearRegressionBaseline.predict"]], "train() (linearregressionbaseline method)": [[18, "experiments.baselines.linear_regression.LinearRegressionBaseline.train"]], "experiments.baselines.logistic_regression": [[19, "module-experiments.baselines.logistic_regression"]], "binarylogisticregressionbaseline (class in experiments.baselines.logistic_regression)": [[20, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline"]], "__init__() (binarylogisticregressionbaseline method)": [[20, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__init__"]], "__repr__() (binarylogisticregressionbaseline method)": [[20, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__repr__"]], "fit() (binarylogisticregressionbaseline method)": [[20, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.fit"]], "predict() (binarylogisticregressionbaseline method)": [[20, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.predict"]], "train() (binarylogisticregressionbaseline method)": [[20, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.train"]], "experiments.baselines.random_classifiers": [[21, "module-experiments.baselines.random_classifiers"]], "uniformrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[22, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline"]], "__init__() (uniformrandomclassifierbaseline method)": [[22, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__init__"]], "__repr__() (uniformrandomclassifierbaseline method)": [[22, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__repr__"]], "predict() (uniformrandomclassifierbaseline method)": [[22, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.predict"]], "train() (uniformrandomclassifierbaseline method)": [[22, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.train"]], "weightedrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[23, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline"]], "__init__() (weightedrandomclassifierbaseline method)": [[23, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__init__"]], "__repr__() (weightedrandomclassifierbaseline method)": [[23, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__repr__"]], "predict() (weightedrandomclassifierbaseline method)": [[23, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.predict"]], "train() (weightedrandomclassifierbaseline method)": [[23, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.train"]], "experiments.baselines.random_forest": [[24, "module-experiments.baselines.random_forest"]], "randomforestclassifierbaseline (class in experiments.baselines.random_forest)": [[25, "experiments.baselines.random_forest.RandomForestClassifierBaseline"]], "__init__() (randomforestclassifierbaseline method)": [[25, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__init__"]], "__repr__() (randomforestclassifierbaseline method)": [[25, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__repr__"]], "predict() (randomforestclassifierbaseline method)": [[25, "experiments.baselines.random_forest.RandomForestClassifierBaseline.predict"]], "train() (randomforestclassifierbaseline method)": [[25, "experiments.baselines.random_forest.RandomForestClassifierBaseline.train"]], "experiments.experiment_utils": [[26, "module-experiments.experiment_utils"]], "batch_predictions() (in module experiments.experiment_utils)": [[27, "experiments.experiment_utils.batch_predictions"]], "generate_behavior_policy_episodes() (in module experiments.experiment_utils)": [[28, "experiments.experiment_utils.generate_behavior_policy_episodes"]], "generate_episodes_and_calc_j() (in module experiments.experiment_utils)": [[29, "experiments.experiment_utils.generate_episodes_and_calc_J"]], "has_failed() (in module experiments.experiment_utils)": [[30, "experiments.experiment_utils.has_failed"]], "load_regenerated_episodes() (in module experiments.experiment_utils)": [[31, "experiments.experiment_utils.load_regenerated_episodes"]], "load_resampled_datasets() (in module experiments.experiment_utils)": [[32, "experiments.experiment_utils.load_resampled_datasets"]], "make_batch_epoch_dict_fixedniter() (in module experiments.experiment_utils)": [[33, "experiments.experiment_utils.make_batch_epoch_dict_fixedniter"]], "make_batch_epoch_dict_min_sample_repeat() (in module experiments.experiment_utils)": [[34, "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat"]], "prep_feat_labels() (in module experiments.experiment_utils)": [[35, "experiments.experiment_utils.prep_feat_labels"]], "setup_sa_spec_for_exp() (in module experiments.experiment_utils)": [[36, "experiments.experiment_utils.setup_SA_spec_for_exp"]], "supervised_initial_solution_fn() (in module experiments.experiment_utils)": [[37, "experiments.experiment_utils.supervised_initial_solution_fn"]], "trial_arg_chunker() (in module experiments.experiment_utils)": [[38, "experiments.experiment_utils.trial_arg_chunker"]], "experiments.experiments": [[39, "module-experiments.experiments"]], "baselineexperiment (class in experiments.experiments)": [[40, "experiments.experiments.BaselineExperiment"]], "__init__() (baselineexperiment method)": [[40, "experiments.experiments.BaselineExperiment.__init__"]], "__repr__() (baselineexperiment method)": [[40, "experiments.experiments.BaselineExperiment.__repr__"]], "aggregate_results() (baselineexperiment method)": [[40, "experiments.experiments.BaselineExperiment.aggregate_results"]], "evaluate_constraint_functions() (baselineexperiment method)": [[40, "experiments.experiments.BaselineExperiment.evaluate_constraint_functions"]], "run_baseline_trial() (baselineexperiment method)": [[40, "experiments.experiments.BaselineExperiment.run_baseline_trial"]], "run_experiment() (baselineexperiment method)": [[40, "experiments.experiments.BaselineExperiment.run_experiment"]], "write_trial_result() (baselineexperiment method)": [[40, "experiments.experiments.BaselineExperiment.write_trial_result"]], "experiment (class in experiments.experiments)": [[41, "experiments.experiments.Experiment"]], "__init__() (experiment method)": [[41, "experiments.experiments.Experiment.__init__"]], "__repr__() (experiment method)": [[41, "experiments.experiments.Experiment.__repr__"]], "aggregate_results() (experiment method)": [[41, "experiments.experiments.Experiment.aggregate_results"]], "write_trial_result() (experiment method)": [[41, "experiments.experiments.Experiment.write_trial_result"]], "fairlearnexperiment (class in experiments.experiments)": [[42, "experiments.experiments.FairlearnExperiment"]], "__init__() (fairlearnexperiment method)": [[42, "experiments.experiments.FairlearnExperiment.__init__"]], "__repr__() (fairlearnexperiment method)": [[42, "experiments.experiments.FairlearnExperiment.__repr__"]], "aggregate_results() (fairlearnexperiment method)": [[42, "experiments.experiments.FairlearnExperiment.aggregate_results"]], "evaluate_constraint_function() (fairlearnexperiment method)": [[42, "experiments.experiments.FairlearnExperiment.evaluate_constraint_function"]], "get_fairlearn_predictions() (fairlearnexperiment method)": [[42, "experiments.experiments.FairlearnExperiment.get_fairlearn_predictions"]], "run_experiment() (fairlearnexperiment method)": [[42, "experiments.experiments.FairlearnExperiment.run_experiment"]], "run_fairlearn_trial() (fairlearnexperiment method)": [[42, "experiments.experiments.FairlearnExperiment.run_fairlearn_trial"]], "write_trial_result() (fairlearnexperiment method)": [[42, "experiments.experiments.FairlearnExperiment.write_trial_result"]], "seldonianexperiment (class in experiments.experiments)": [[43, "experiments.experiments.SeldonianExperiment"]], "__init__() (seldonianexperiment method)": [[43, "experiments.experiments.SeldonianExperiment.__init__"]], "__repr__() (seldonianexperiment method)": [[43, "experiments.experiments.SeldonianExperiment.__repr__"]], "aggregate_results() (seldonianexperiment method)": [[43, "experiments.experiments.SeldonianExperiment.aggregate_results"]], "evaluate_constraint_functions() (seldonianexperiment method)": [[43, "experiments.experiments.SeldonianExperiment.evaluate_constraint_functions"]], "run_qsa_trial() (seldonianexperiment method)": [[43, "experiments.experiments.SeldonianExperiment.run_QSA_trial"]], "run_experiment() (seldonianexperiment method)": [[43, "experiments.experiments.SeldonianExperiment.run_experiment"]], "write_trial_result() (seldonianexperiment method)": [[43, "experiments.experiments.SeldonianExperiment.write_trial_result"]], "experiments.generate_plots": [[44, "module-experiments.generate_plots"]], "plotgenerator (class in experiments.generate_plots)": [[45, "experiments.generate_plots.PlotGenerator"]], "__init__() (plotgenerator method)": [[45, "experiments.generate_plots.PlotGenerator.__init__"]], "__repr__() (plotgenerator method)": [[45, "experiments.generate_plots.PlotGenerator.__repr__"]], "make_plots() (plotgenerator method)": [[45, "experiments.generate_plots.PlotGenerator.make_plots"]], "validate_constraint_eval_kwargs() (plotgenerator method)": [[45, "experiments.generate_plots.PlotGenerator.validate_constraint_eval_kwargs"]], "rlplotgenerator (class in experiments.generate_plots)": [[46, "experiments.generate_plots.RLPlotGenerator"]], "__init__() (rlplotgenerator method)": [[46, "experiments.generate_plots.RLPlotGenerator.__init__"]], "__repr__() (rlplotgenerator method)": [[46, "experiments.generate_plots.RLPlotGenerator.__repr__"]], "make_plots() (rlplotgenerator method)": [[46, "experiments.generate_plots.RLPlotGenerator.make_plots"]], "plot_importance_weights() (rlplotgenerator method)": [[46, "experiments.generate_plots.RLPlotGenerator.plot_importance_weights"]], "run_baseline_experiment() (rlplotgenerator method)": [[46, "experiments.generate_plots.RLPlotGenerator.run_baseline_experiment"]], "run_seldonian_experiment() (rlplotgenerator method)": [[46, "experiments.generate_plots.RLPlotGenerator.run_seldonian_experiment"]], "validate_constraint_eval_kwargs() (rlplotgenerator method)": [[46, "experiments.generate_plots.RLPlotGenerator.validate_constraint_eval_kwargs"]], "supervisedplotgenerator (class in experiments.generate_plots)": [[47, "experiments.generate_plots.SupervisedPlotGenerator"]], "__init__() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.__init__"]], "__repr__() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.__repr__"]], "generate_resampled_datasets() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.generate_resampled_datasets"]], "generate_trial_datasets() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.generate_trial_datasets"]], "make_plots() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.make_plots"]], "run_baseline_experiment() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.run_baseline_experiment"]], "run_fairlearn_experiment() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.run_fairlearn_experiment"]], "run_headless_seldonian_experiment() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.run_headless_seldonian_experiment"]], "run_seldonian_experiment() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.run_seldonian_experiment"]], "validate_constraint_eval_kwargs() (supervisedplotgenerator method)": [[47, "experiments.generate_plots.SupervisedPlotGenerator.validate_constraint_eval_kwargs"]], "experiments.headless_example": [[48, "module-experiments.headless_example"]], "headlessexample (class in experiments.headless_example)": [[49, "experiments.headless_example.HeadlessExample"]], "__init__() (headlessexample method)": [[49, "experiments.headless_example.HeadlessExample.__init__"]], "__repr__() (headlessexample method)": [[49, "experiments.headless_example.HeadlessExample.__repr__"]], "run() (headlessexample method)": [[49, "experiments.headless_example.HeadlessExample.run"]], "experiments.perf_eval_funcs": [[50, "module-experiments.perf_eval_funcs"]], "mse() (in module experiments.perf_eval_funcs)": [[51, "experiments.perf_eval_funcs.MSE"]], "binary_logistic_loss() (in module experiments.perf_eval_funcs)": [[52, "experiments.perf_eval_funcs.binary_logistic_loss"]], "deterministic_accuracy() (in module experiments.perf_eval_funcs)": [[53, "experiments.perf_eval_funcs.deterministic_accuracy"]], "multiclass_accuracy() (in module experiments.perf_eval_funcs)": [[54, "experiments.perf_eval_funcs.multiclass_accuracy"]], "multiclass_logistic_loss() (in module experiments.perf_eval_funcs)": [[55, "experiments.perf_eval_funcs.multiclass_logistic_loss"]], "probabilistic_accuracy() (in module experiments.perf_eval_funcs)": [[56, "experiments.perf_eval_funcs.probabilistic_accuracy"]]}})