Search.setIndex({"docnames": ["_autosummary/experiments", "_autosummary/experiments.base_example", "_autosummary/experiments.base_example.BaseExample", "_autosummary/experiments.baselines", "_autosummary/experiments.baselines.decision_tree", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "_autosummary/experiments.baselines.linear_regression", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline", "_autosummary/experiments.baselines.logistic_regression", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "_autosummary/experiments.baselines.random_classifiers", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "_autosummary/experiments.baselines.random_forest", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline", "_autosummary/experiments.experiment_utils", "_autosummary/experiments.experiment_utils.batch_predictions", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J", "_autosummary/experiments.experiment_utils.generate_resampled_datasets", "_autosummary/experiments.experiment_utils.has_failed", "_autosummary/experiments.experiment_utils.load_resampled_dataset", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "_autosummary/experiments.experiment_utils.prep_feat_labels", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp", "_autosummary/experiments.experiments", "_autosummary/experiments.experiments.BaselineExperiment", "_autosummary/experiments.experiments.Experiment", "_autosummary/experiments.experiments.FairlearnExperiment", "_autosummary/experiments.experiments.SeldonianExperiment", "_autosummary/experiments.generate_plots", "_autosummary/experiments.generate_plots.PlotGenerator", "_autosummary/experiments.generate_plots.RLPlotGenerator", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator", "_autosummary/experiments.headless_example", "_autosummary/experiments.headless_example.HeadlessExample", "_autosummary/experiments.perf_eval_funcs", "_autosummary/experiments.perf_eval_funcs.MSE", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy", "api", "index", "overview"], "filenames": ["_autosummary/experiments.rst", "_autosummary/experiments.base_example.rst", "_autosummary/experiments.base_example.BaseExample.rst", "_autosummary/experiments.baselines.rst", "_autosummary/experiments.baselines.decision_tree.rst", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.rst", "_autosummary/experiments.baselines.linear_regression.rst", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline.rst", "_autosummary/experiments.baselines.logistic_regression.rst", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.rst", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_forest.rst", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline.rst", "_autosummary/experiments.experiment_utils.rst", "_autosummary/experiments.experiment_utils.batch_predictions.rst", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J.rst", "_autosummary/experiments.experiment_utils.generate_resampled_datasets.rst", "_autosummary/experiments.experiment_utils.has_failed.rst", "_autosummary/experiments.experiment_utils.load_resampled_dataset.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat.rst", "_autosummary/experiments.experiment_utils.prep_feat_labels.rst", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp.rst", "_autosummary/experiments.experiments.rst", "_autosummary/experiments.experiments.BaselineExperiment.rst", "_autosummary/experiments.experiments.Experiment.rst", "_autosummary/experiments.experiments.FairlearnExperiment.rst", "_autosummary/experiments.experiments.SeldonianExperiment.rst", "_autosummary/experiments.generate_plots.rst", "_autosummary/experiments.generate_plots.PlotGenerator.rst", "_autosummary/experiments.generate_plots.RLPlotGenerator.rst", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator.rst", "_autosummary/experiments.headless_example.rst", "_autosummary/experiments.headless_example.HeadlessExample.rst", "_autosummary/experiments.perf_eval_funcs.rst", "_autosummary/experiments.perf_eval_funcs.MSE.rst", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy.rst", "api.rst", "index.rst", "overview.rst"], "titles": ["experiments", "experiments.base_example", "experiments.base_example.BaseExample", "experiments.baselines", "experiments.baselines.decision_tree", "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "experiments.baselines.linear_regression", "experiments.baselines.linear_regression.LinearRegressionBaseline", "experiments.baselines.logistic_regression", "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "experiments.baselines.random_classifiers", "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "experiments.baselines.random_forest", "experiments.baselines.random_forest.RandomForestClassifierBaseline", "experiments.experiment_utils", "experiments.experiment_utils.batch_predictions", "experiments.experiment_utils.generate_episodes_and_calc_J", "experiments.experiment_utils.generate_resampled_datasets", "experiments.experiment_utils.has_failed", "experiments.experiment_utils.load_resampled_dataset", "experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "experiments.experiment_utils.prep_feat_labels", "experiments.experiment_utils.setup_SA_spec_for_exp", "experiments.experiments", "experiments.experiments.BaselineExperiment", "experiments.experiments.Experiment", "experiments.experiments.FairlearnExperiment", "experiments.experiments.SeldonianExperiment", "experiments.generate_plots", "experiments.generate_plots.PlotGenerator", "experiments.generate_plots.RLPlotGenerator", "experiments.generate_plots.SupervisedPlotGenerator", "experiments.headless_example", "experiments.headless_example.HeadlessExample", "experiments.perf_eval_funcs", "experiments.perf_eval_funcs.MSE", "experiments.perf_eval_funcs.binary_logistic_loss", "experiments.perf_eval_funcs.deterministic_accuracy", "experiments.perf_eval_funcs.multiclass_accuracy", "experiments.perf_eval_funcs.multiclass_logistic_loss", "experiments.perf_eval_funcs.probabilistic_accuracy", "API", "Seldonian Experiments documentation", "Overview"], "terms": {"modul": [0, 1, 3, 25, 30, 34], "run": [0, 1, 2, 21, 22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 44, 45], "seldonian": [0, 23, 25, 26, 29, 31, 32, 33], "gener": [0, 17, 18, 20, 31, 32, 33, 44], "three": [0, 2, 30, 31, 32, 33, 35, 44], "plot": [0, 2, 19, 30, 31, 32, 33, 35, 44], "contain": [1, 23, 34, 45], "base": [1, 2, 5, 7, 9, 11, 12, 14, 26, 27, 28, 29, 31, 32, 33, 34, 35], "class": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 45], "exampl": [1, 2, 34, 35, 45], "spec": [2, 24, 31, 32, 33, 35, 44], "object": [2, 5, 14, 23, 27, 31, 32, 33, 44], "__init__": [2, 5, 7, 9, 11, 12, 14, 26, 27, 28, 29, 31, 32, 33, 35, 44], "__repr__": [2, 5, 7, 9, 11, 12, 14, 26, 27, 28, 29, 31, 32, 33, 35, 44], "return": [2, 5, 7, 9, 11, 12, 14, 17, 19, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 41, 45], "repr": [2, 5, 7, 9, 11, 12, 14, 26, 27, 28, 29, 31, 32, 33, 35], "self": [2, 5, 7, 9, 11, 12, 14, 26, 27, 28, 29, 31, 32, 33, 35], "method": [2, 5, 7, 9, 11, 12, 14, 26, 27, 28, 29, 31, 32, 33, 35, 45], "n_trial": [2, 18, 20, 31, 32, 33, 35, 44], "data_frac": [2, 20, 21, 22, 24, 26, 28, 29, 31, 32, 33, 35, 44], "results_dir": [2, 20, 24, 26, 27, 28, 29, 31, 32, 33, 35, 44], "perf_eval_fn": [2, 31, 32, 33, 35, 44], "n_worker": [2, 31, 32, 33, 35, 44], "1": [2, 9, 21, 22, 28, 31, 35, 39, 40, 42, 45], "datagen_method": [2, 24, 31, 32, 33, 35, 44], "resampl": [2, 18, 20, 31, 32, 33, 35, 45], "verbos": [2, 20, 26, 27, 28, 29, 32, 33, 35], "fals": [2, 19, 20, 23, 26, 27, 28, 29, 32, 33, 35, 45], "baselin": [2, 26, 27, 35, 44], "include_fairlearn_model": 2, "fairlearn_kwarg": 2, "performance_label": [2, 31, 32, 33, 35], "perform": [2, 31, 32, 33, 35, 44, 45], "performance_yscal": [2, 31, 32, 33, 35], "linear": [2, 7, 31, 32, 33, 35], "plot_savenam": [2, 35], "none": [2, 5, 14, 31, 32, 33, 35], "plot_fonts": [2, 35], "12": [2, 31, 32, 33, 35], "legend_fonts": [2, 31, 32, 33, 35], "8": [2, 31, 32, 33, 35], "thi": [2, 5, 14, 19, 20, 23, 35, 44, 45], "ani": [2, 26, 27, 28, 29, 35], "model": [2, 5, 7, 9, 14, 16, 19, 26, 27, 28, 29, 31, 32, 33, 35, 39, 40, 42, 45], "includ": [2, 9, 35, 45], "paramet": [2, 5, 7, 9, 11, 12, 14, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 37, 39, 40, 42, 45], "first": [2, 35, 45], "Then": [2, 35], "produc": [2, 35, 45], "implement": [5, 7, 9, 11, 12, 14, 45], "random": [5, 14, 45], "forest": [5, 14], "classifi": [5, 7, 9, 11, 12, 14, 45], "binari": [5, 9, 14, 42], "classif": [5, 9, 14, 40, 41, 42, 45], "task": [5, 14], "predict": [5, 7, 9, 11, 12, 14, 28, 37, 39, 40, 42, 44, 45], "theta": [5, 7, 9, 11, 12, 14, 31, 32, 33], "x": [5, 7, 9, 11, 12, 14], "us": [5, 7, 9, 14, 15, 18, 19, 20, 26, 28, 29, 31, 32, 33, 39, 40, 42, 44, 45], "train": [5, 7, 9, 14, 26, 44, 45], "posit": [5, 7, 9, 11, 12, 14, 45], "probabl": [5, 9, 11, 12, 14, 40, 42, 45], "isn": [5, 14], "t": [5, 14, 22], "here": [5, 14, 45], "becaus": [5, 14, 45], "ar": [5, 14, 18, 20, 21, 22, 28, 31, 32, 33, 44, 45], "fit": [5, 7, 9, 14, 44], "param": [5, 14], "weight": [5, 7, 9, 11, 12, 14, 26, 28, 29], "case": [5, 14, 45], "featur": [5, 7, 9, 11, 12, 14, 18, 20, 23, 28], "type": [5, 7, 9, 11, 12, 14, 17, 26, 29, 41, 45], "2d": [5, 9, 14], "np": [5, 9, 14, 21, 22, 26, 29, 45], "ndarrai": [5, 7, 9, 11, 12, 14, 21, 22, 26, 29], "y": [5, 7, 9, 14, 31, 32, 33, 37, 38, 39, 40, 41, 42], "instanti": [5, 14], "new": [5, 14, 44, 45], "instanc": [5, 14], "data": [5, 9, 14, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 41, 45], "label": [5, 7, 9, 11, 12, 14, 18, 20, 23, 28, 31, 32, 33, 37, 39, 40, 42], "1d": [5, 9, 14, 28], "linearregressionmodel": 7, "alwai": [7, 11, 12], "ha": [7, 11, 12, 45], "prob": [7, 11, 12], "0": [7, 11, 12, 39, 45], "5": [7, 11, 12, 45], "regardless": [7, 11, 12, 45], "input": [7, 11, 12, 18, 20, 45], "pair": 7, "nxm": 7, "numpi": [7, 11, 12, 26, 29], "nx1": 7, "from": [7, 18, 26, 27, 28, 29, 31, 32, 33, 45], "The": [7, 9, 11, 12, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 39, 44, 45], "binarylogisticregressionmodel": 9, "logist": [9, 41, 45], "regress": [9, 45], "let": 9, "i": [9, 17, 18, 19, 22, 29, 31, 32, 33, 39, 40, 42, 44, 45], "number": [9, 18, 21, 22, 23, 31, 32, 33, 45], "datapoint": 9, "j": [9, 17], "bia": 9, "term": 9, "provi": 9, "k": 9, "arrai": [9, 21, 22, 28, 37, 39, 40, 42, 45], "shape": [9, 18, 20, 28], "have": [9, 11, 12, 45], "each": [9, 11, 12, 18, 20, 21, 22, 26, 27, 28, 29, 31, 32, 33, 40, 42, 45], "point": [9, 21, 22, 23, 28, 41, 45], "length": [9, 45], "observ": [9, 11, 12], "just": 9, "wrapper": 9, "parent": [9, 18, 26, 27, 28, 29], "randomclassifiermodel": [11, 12], "float": [11, 12, 17, 19, 20, 26, 28, 29, 31, 32, 33, 41], "overrid": 12, "child": 12, "n_estim": 14, "100": 14, "util": [15, 18, 20, 23], "rest": 15, "librari": [15, 33, 44, 45], "function": [15, 18, 20, 21, 22, 23, 26, 28, 29, 31, 32, 33, 36, 45], "solut": [16, 26, 29, 31, 32, 33, 45], "x_test": 16, "kwarg": [16, 17, 24, 26, 27, 28, 29, 31, 32, 33, 37, 38, 39, 40, 41, 42], "calcul": [17, 37, 41], "expect": 17, "discount": 17, "episod": [17, 45], "where": [17, 21, 22, 31, 32, 33], "list": [17, 26, 27, 28, 29, 31, 32, 33, 45], "ground": [17, 26, 29, 31, 32, 33, 45], "truth": [17, 26, 29, 31, 32, 33, 45], "dataset": [18, 20, 23, 26, 28, 29, 31, 32, 33, 45], "save_dir": 18, "supervis": [18, 20, 26, 33, 45], "learn": [18, 20, 26, 45], "trial": [18, 20, 23, 26, 27, 28, 29, 31, 32, 33, 45], "replac": [18, 20, 45], "sensit": [18, 20, 23, 28], "attribut": [18, 20, 23, 32, 33], "creat": [18, 20, 45], "version": [18, 20], "same": [18, 20, 28, 45], "panda": 18, "datafram": 18, "origin": [18, 45], "which": [18, 20, 26, 27, 28, 29, 31, 32, 33, 45], "int": [18, 20, 21, 22, 23, 26, 28, 29, 31, 32, 33], "e": [18, 26, 27, 31, 32, 33, 45], "make": [18, 30, 31, 32, 33, 44, 45], "str": [18, 20, 26, 27, 28, 29, 31, 32, 33], "directori": [18, 20, 26, 27, 28, 29, 31, 32, 33, 45], "save": [18, 20, 26, 27, 28, 29, 31, 32, 33, 45], "file_format": 18, "format": 18, "option": [18, 28, 29, 31, 32, 33, 45], "csv": [18, 26, 27, 28, 29, 45], "pkl": [18, 45], "g": [19, 26, 27, 29, 31, 32, 33, 45], "condit": 19, "whether": [19, 23, 26, 29, 32, 33, 45], "valu": [19, 21, 22, 26, 28, 29, 31, 32, 33, 45], "unsaf": 19, "determin": [19, 26, 29, 45], "failur": [19, 31, 45], "rate": [19, 31, 40, 42, 45], "right": [19, 45], "most": 19, "behavior": [19, 45], "constraint": [19, 26, 28, 29, 31, 32, 33, 45], "evalu": [19, 26, 28, 29, 31, 32, 33, 44, 45], "true": [19, 26, 27, 28, 29, 31, 32, 33, 37, 39, 40, 42, 45], "safe": [19, 26, 29, 45], "trial_i": [20, 24, 26, 28, 29, 45], "result": [20, 26, 27, 28, 29, 31, 32, 33, 45], "index": [20, 26, 28, 29], "fraction": [20, 21, 22, 26, 28, 29, 31, 32, 33, 39, 45], "boolean": [20, 45], "flag": [20, 45], "niter": 21, "n_max": [21, 22], "batch_siz": [21, 22], "conveni": [21, 22], "figur": [21, 22, 28, 45], "out": [21, 22, 26, 27, 28, 29], "epoch": [21, 22], "necessari": [21, 22], "ensur": [21, 22], "total": [21, 22], "iter": [21, 22], "batch": [21, 22, 31, 32, 33], "size": [21, 22, 26, 28, 29, 31, 32, 33, 45], "fix": [21, 22], "you": [21, 22, 31, 32, 33, 44, 45], "want": [21, 22, 31, 32, 33, 45], "everi": [21, 22, 45], "d": [21, 22], "maximum": [21, 22], "optim": [21, 22], "process": [21, 22], "batch_epoch_dict": [21, 22, 24, 31, 32, 33, 35], "A": [21, 22, 45], "dictionari": [21, 22, 31, 32, 33, 45], "kei": [21, 22, 31, 32, 33], "num_epoch": [21, 22], "niter_min": 22, "num_repeat": 22, "frac": [22, 31, 32, 33, 45], "max": [22, 45], "": 22, "sampl": [22, 37, 39, 45], "seen": 22, "time": [22, 31, 32, 33, 45], "minimum": 22, "must": [22, 45], "trial_dataset": 23, "n_point": 23, "include_sensitive_attr": 23, "prepar": 23, "given": [23, 26, 29, 45], "bool": [23, 26, 27, 28, 29, 32, 33], "prep": 23, "well": 23, "regim": [24, 45], "perf_eval_kwarg": [24, 31, 32, 33, 35, 44], "baseline_model": [26, 33], "against": [26, 45], "compar": [26, 45], "model_nam": [26, 27, 29, 45], "string": [26, 27, 29], "name": [26, 27, 28, 29, 31, 32, 33, 45], "logistic_regress": [26, 27, 44, 45], "experiment": [26, 27, 28, 29], "aggregate_result": [26, 27, 28, 29, 44], "group": [26, 27, 28, 29], "togeth": [26, 27, 28, 29], "file": [26, 27, 28, 29, 31, 32, 33, 44], "singl": [26, 27, 28, 29, 45], "evaluate_constraint_funct": [26, 28, 29, 44], "constraint_eval_fn": [26, 29, 31, 32, 33, 44], "constraint_eval_kwarg": [26, 29, 31, 32, 33, 35, 44], "helper": [26, 29], "wa": [26, 29, 45], "found": [26, 29, 45], "dure": [26, 29], "an": [26, 29, 31, 32, 33, 44], "empti": [26, 29, 31, 32, 33, 45], "default": [26, 28, 31, 32, 33, 45], "pars": [26, 29, 31, 32, 33, 45], "tree": [26, 29, 31, 32, 33, 45], "dict": [26, 29, 31, 32, 33], "keyword": [26, 29, 31, 32, 33], "argument": [26, 29, 31, 32, 33, 45], "pass": [26, 29, 31, 32, 33, 45], "vector": [26, 29], "run_baseline_tri": [26, 44], "current": [26, 29, 45], "onli": [26, 29, 39, 42, 45], "support": [26, 45], "overal": [26, 28, 29, 31, 32, 33], "run_experi": [26, 28, 29, 44], "write_trial_result": [26, 27, 28, 29, 44], "colnam": [26, 27, 28, 29], "trial_dir": [26, 27, 28, 29], "write": [26, 27, 28, 29], "inform": [26, 27, 28, 29], "item": [26, 27, 28, 29], "These": [26, 27, 28, 29], "compris": [26, 27, 28, 29, 45], "header": [26, 27, 28, 29], "print": [26, 27, 28, 29], "filenam": [26, 27, 28, 29, 31, 32, 33], "fairlearn_epsilon_constraint": [28, 33], "fairlearn": [28, 33, 45], "epsilon": 28, "threshold": [28, 45], "y_pred": [28, 37, 38, 39, 40, 41, 42], "test_label": 28, "fairlearn_constraint_nam": [28, 33], "epsilon_ev": 28, "eval_method": 28, "nativ": 28, "sensitive_featur": 28, "two": [28, 45], "column": 28, "consid": [28, 45], "get_fairlearn_predict": [28, 44], "mitig": 28, "x_test_fairlearn": 28, "get": 28, "consist": 28, "potenti": 28, "more": [28, 45], "than": [28, 45], "one": [28, 45], "predictor": 28, "For": [28, 40, 42, 45], "non": 28, "zero": 28, "we": [28, 45], "how": [28, 45], "mani": [28, 45], "normal": 28, "across": 28, "all": [28, 31, 41, 45], "test": [28, 45], "run_fairlearn_tri": [28, 44], "qsa": 29, "quasi": [29, 45], "algorithm": [29, 31, 32, 33, 44, 45], "candid": [29, 31, 32, 33], "select": [29, 31, 32, 33], "run_qsa_tri": [29, 44], "2": 31, "3": [31, 45], "v": 31, "amount": [31, 45], "specif": [31, 32, 33], "error": [31, 32, 33, 37, 40, 42], "bar": [31, 32, 33], "proport": [31, 32, 33], "horizont": [31, 32, 33, 45], "axi": [31, 32, 33, 45], "obtain": [31, 32, 33, 45], "signatur": [31, 32, 33], "func": [31, 32, 33], "worker": [31, 32, 33, 45], "multiprocess": [31, 32, 33], "If": [31, 32, 33, 44, 45], "provid": [31, 32, 33, 45], "extra": [31, 32, 33], "instruct": [31, 32, 33], "n_epoch": [31, 32, 33], "make_plot": [31, 32, 33, 44, 45], "model_label_dict": [31, 32, 33, 35], "fontsiz": [31, 32, 33], "accuraci": [31, 32, 33, 45], "performance_ylim": [31, 32, 33], "marker_s": [31, 32, 33], "20": [31, 32, 33], "save_format": [31, 32, 33], "pdf": [31, 32, 33], "show_titl": [31, 32, 33], "custom_titl": [31, 32, 33], "include_legend": [31, 32, 33], "savenam": [31, 32, 33], "shown": [31, 32, 33, 45], "legend": [31, 32, 33], "font": [31, 32, 33], "text": [31, 32, 33], "path": [31, 32, 33], "disk": [31, 32, 33], "hyperparameter_and_setting_dict": 32, "plotgener": [32, 33, 44], "rl": [32, 45], "run_seldonian_experi": [32, 33, 44, 45], "assign": [32, 33], "displai": [32, 33], "stdout": [32, 33], "while": [32, 33, 45], "run_baseline_experi": [33, 44, 45], "run_fairlearn_experi": [33, 44], "fairlearn_sensitive_feature_nam": 33, "fairlearn_epsilon_ev": 33, "fairlearn_eval_kwarg": 33, "run_headless_seldonian_experi": [33, 44], "full_pretraining_model": [33, 35], "initial_state_dict": 33, "headless_pretraining_model": [33, 35], "head_layer_nam": [33, 35], "latent_feature_shap": [33, 35], "loss_func_pretrain": [33, 35], "learning_rate_pretrain": [33, 35], "pretraining_devic": [33, 35], "batch_epoch_dict_pretrain": [33, 35], "safety_batch_size_pretrain": [33, 35], "1000": 33, "headless": [33, 35], "baseexampl": [35, 44], "mean": 37, "squar": 37, "correct": 39, "best": 39, "when": [39, 40, 42, 45], "output": [39, 40, 42], "multi": [40, 41], "dimension": [40, 42], "averag": 41, "loss": 41, "over": 41, "welcom": 44, "design": 44, "help": [44, 45], "safeti": [44, 45], "sourc": 44, "code": [44, 45], "host": 44, "github": 44, "heavi": 44, "engin": [44, 45], "core": [44, 45], "complet": 44, "see": [44, 45], "overview": 44, "api": [44, 45], "base_exampl": 44, "decision_tre": 44, "decisiontreeclassifierbaselin": 44, "linear_regress": 44, "linearregressionbaselin": 44, "binarylogisticregressionbaselin": 44, "random_classifi": 44, "uniformrandomclassifierbaselin": 44, "weightedrandomclassifierbaselin": 44, "random_forest": 44, "randomforestclassifierbaselin": 44, "experiment_util": 44, "batch_predict": 44, "generate_episodes_and_calc_j": 44, "generate_resampled_dataset": 44, "has_fail": 44, "load_resampled_dataset": 44, "make_batch_epoch_dict_fixednit": 44, "make_batch_epoch_dict_min_sample_repeat": 44, "prep_feat_label": 44, "setup_sa_spec_for_exp": 44, "baselineexperi": [44, 45], "fairlearnexperi": [44, 45], "seldonianexperi": 44, "generate_plot": 44, "rlplotgener": [44, 45], "supervisedplotgener": [44, 45], "headless_exampl": 44, "headlessexampl": 44, "perf_eval_func": 44, "mse": 44, "binary_logistic_loss": 44, "deterministic_accuraci": 44, "multiclass_accuraci": 44, "multiclass_logistic_loss": 44, "probabilistic_accuraci": 44, "document": 45, "explain": 45, "sa": 45, "detail": 45, "descript": 45, "what": 45, "machin": 45, "toolkit": 45, "homepag": 45, "heavili": 45, "depend": 45, "wai": 45, "It": 45, "involv": 45, "increas": 45, "some": 45, "indic": 45, "satisfi": 45, "sometim": 45, "come": 45, "cost": 45, "reduc": 45, "can": 45, "understand": 45, "trade": 45, "off": 45, "cannot": 45, "No": 45, "despit": 45, "quantiti": 45, "assum": 45, "access": 45, "real": 45, "world": 45, "problem": 45, "set": 45, "typic": 45, "doe": 45, "instead": 45, "adopt": 45, "strategi": 45, "bootstrap": 45, "order": 45, "approxim": 45, "show": 45, "gpa": 45, "discuss": 45, "scienc": 45, "paper": 45, "top": 45, "panel": 45, "left": 45, "middl": 45, "thoma": 45, "et": 45, "al": 45, "2019": 45, "fair": 45, "dispar": 45, "impact": 45, "green": 45, "dot": 45, "dash": 45, "sever": 45, "standard": 45, "ml": 45, "red": 45, "do": 45, "also": 45, "awar": 45, "blue": 45, "magenta": 45, "In": 45, "criteria": 45, "black": 45, "line": 45, "repres": 45, "confid": 45, "delta": 45, "05": 45, "your": 45, "reinforc": 45, "either": 45, "both": 45, "describ": 45, "follow": 45, "requir": 45, "often": 45, "interfac": 45, "everyth": 45, "need": 45, "underli": 45, "etc": 45, "estim": 45, "uncertainti": 45, "multipli": 45, "within": 45, "differ": 45, "dimens": 45, "At": 45, "generate_episod": 45, "polici": 45, "parallel": 45, "multipl": 45, "avail": 45, "independ": 45, "other": 45, "embarrassingli": 45, "program": 45, "less": 45, "primari": 45, "specifi": 45, "explicitli": 45, "nsf": 45, "them": 45, "built": 45, "custom": 45, "call": 45, "plot_gener": 45, "easi": 45, "develop": 45, "easili": 45, "add": 45, "own": 45, "ad": 45, "alreadi": 45, "p": 45, "abov": 45, "would": 45, "simpli": 45, "block": 45, "like": 45, "That": 45, "thei": 45, "anoth": 45, "narrow": 45, "rang": 45, "progress": 45, "structur": 45, "insid": 45, "look": 45, "after": 45, "via": 45, "qsa_result": 45, "trial_data": 45, "data_frac_0": 45, "0010_trial_0": 45, "0010_trial_1": 45, "0010_trial_2": 45, "0010_trial_3": 45, "0010_trial_4": 45, "0022_trial_0": 45, "0022_trial_1": 45, "0022_trial_2": 45, "0022_trial_3": 45, "0022_trial_4": 45, "0046_trial_0": 45, "0046_trial_1": 45, "0046_trial_2": 45, "0046_trial_3": 45, "0046_trial_4": 45, "0050_trial_0": 45, "0100_trial_0": 45, "0100_trial_1": 45, "0100_trial_2": 45, "0100_trial_3": 45, "0100_trial_4": 45, "0215_trial_0": 45, "0215_trial_1": 45, "0215_trial_2": 45, "0215_trial_3": 45, "0215_trial_4": 45, "0464_trial_0": 45, "0464_trial_1": 45, "0464_trial_2": 45, "0464_trial_3": 45, "0464_trial_4": 45, "1000_trial_0": 45, "1000_trial_1": 45, "1000_trial_2": 45, "1000_trial_3": 45, "1000_trial_4": 45, "2154_trial_0": 45, "2154_trial_1": 45, "2154_trial_2": 45, "2154_trial_3": 45, "2154_trial_4": 45, "4642_trial_0": 45, "4642_trial_1": 45, "4642_trial_2": 45, "4642_trial_3": 45, "4642_trial_4": 45, "data_frac_1": 45, "0000_trial_0": 45, "0000_trial_1": 45, "0000_trial_2": 45, "0000_trial_3": 45, "0000_trial_4": 45, "resampled_dataset": 45, "resampled_data_trial0": 45, "resampled_data_trial1": 45, "resampled_data_trial2": 45, "resampled_data_trial3": 45, "resampled_data_trial4": 45, "logspac": 45, "10": 45, "log": 45, "space": 45, "start": 45, "001": 45, "end": 45, "As": 45, "50": 45, "fail": 45, "content": 45, "6105_trial36": 45, "passed_safeti": 45, "6105402296585326": 45, "36": 45, "6746247014792527": 45, "level": 45, "folder": 45, "_result": 45, "logistic_regression_result": 45, "its": 45, "separ": 45, "curv": 45, "autom": 45, "loan": 45, "approv": 45, "system": 45, "tutori": 45}, "objects": {"": [[0, 0, 0, "-", "experiments"]], "experiments": [[1, 0, 0, "-", "base_example"], [3, 0, 0, "-", "baselines"], [15, 0, 0, "-", "experiment_utils"], [25, 0, 0, "-", "experiments"], [30, 0, 0, "-", "generate_plots"], [34, 0, 0, "-", "headless_example"], [36, 0, 0, "-", "perf_eval_funcs"]], "experiments.base_example": [[2, 1, 1, "", "BaseExample"]], "experiments.base_example.BaseExample": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "__repr__"], [2, 2, 1, "", "run"]], "experiments.baselines": [[4, 0, 0, "-", "decision_tree"], [6, 0, 0, "-", "linear_regression"], [8, 0, 0, "-", "logistic_regression"], [10, 0, 0, "-", "random_classifiers"], [13, 0, 0, "-", "random_forest"]], "experiments.baselines.decision_tree": [[5, 1, 1, "", "DecisionTreeClassifierBaseline"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "__repr__"], [5, 2, 1, "", "predict"], [5, 2, 1, "", "train"]], "experiments.baselines.linear_regression": [[7, 1, 1, "", "LinearRegressionBaseline"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "__repr__"], [7, 2, 1, "", "fit"], [7, 2, 1, "", "predict"]], "experiments.baselines.logistic_regression": [[9, 1, 1, "", "BinaryLogisticRegressionBaseline"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "__repr__"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "train"]], "experiments.baselines.random_classifiers": [[11, 1, 1, "", "UniformRandomClassifierBaseline"], [12, 1, 1, "", "WeightedRandomClassifierBaseline"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "__repr__"], [11, 2, 1, "", "predict"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "__repr__"], [12, 2, 1, "", "predict"]], "experiments.baselines.random_forest": [[14, 1, 1, "", "RandomForestClassifierBaseline"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "__repr__"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "train"]], "experiments.experiment_utils": [[16, 3, 1, "", "batch_predictions"], [17, 3, 1, "", "generate_episodes_and_calc_J"], [18, 3, 1, "", "generate_resampled_datasets"], [19, 3, 1, "", "has_failed"], [20, 3, 1, "", "load_resampled_dataset"], [21, 3, 1, "", "make_batch_epoch_dict_fixedniter"], [22, 3, 1, "", "make_batch_epoch_dict_min_sample_repeat"], [23, 3, 1, "", "prep_feat_labels"], [24, 3, 1, "", "setup_SA_spec_for_exp"]], "experiments.experiments": [[26, 1, 1, "", "BaselineExperiment"], [27, 1, 1, "", "Experiment"], [28, 1, 1, "", "FairlearnExperiment"], [29, 1, 1, "", "SeldonianExperiment"]], "experiments.experiments.BaselineExperiment": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "__repr__"], [26, 2, 1, "", "aggregate_results"], [26, 2, 1, "", "evaluate_constraint_functions"], [26, 2, 1, "", "run_baseline_trial"], [26, 2, 1, "", "run_experiment"], [26, 2, 1, "", "write_trial_result"]], "experiments.experiments.Experiment": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "aggregate_results"], [27, 2, 1, "", "write_trial_result"]], "experiments.experiments.FairlearnExperiment": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "__repr__"], [28, 2, 1, "", "aggregate_results"], [28, 2, 1, "", "evaluate_constraint_function"], [28, 2, 1, "", "get_fairlearn_predictions"], [28, 2, 1, "", "run_experiment"], [28, 2, 1, "", "run_fairlearn_trial"], [28, 2, 1, "", "write_trial_result"]], "experiments.experiments.SeldonianExperiment": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "__repr__"], [29, 2, 1, "", "aggregate_results"], [29, 2, 1, "", "evaluate_constraint_functions"], [29, 2, 1, "", "run_QSA_trial"], [29, 2, 1, "", "run_experiment"], [29, 2, 1, "", "write_trial_result"]], "experiments.generate_plots": [[31, 1, 1, "", "PlotGenerator"], [32, 1, 1, "", "RLPlotGenerator"], [33, 1, 1, "", "SupervisedPlotGenerator"]], "experiments.generate_plots.PlotGenerator": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "__repr__"], [31, 2, 1, "", "make_plots"]], "experiments.generate_plots.RLPlotGenerator": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "__repr__"], [32, 2, 1, "", "make_plots"], [32, 2, 1, "", "run_seldonian_experiment"]], "experiments.generate_plots.SupervisedPlotGenerator": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "__repr__"], [33, 2, 1, "", "make_plots"], [33, 2, 1, "", "run_baseline_experiment"], [33, 2, 1, "", "run_fairlearn_experiment"], [33, 2, 1, "", "run_headless_seldonian_experiment"], [33, 2, 1, "", "run_seldonian_experiment"]], "experiments.headless_example": [[35, 1, 1, "", "HeadlessExample"]], "experiments.headless_example.HeadlessExample": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "__repr__"], [35, 2, 1, "", "run"]], "experiments.perf_eval_funcs": [[37, 3, 1, "", "MSE"], [38, 3, 1, "", "binary_logistic_loss"], [39, 3, 1, "", "deterministic_accuracy"], [40, 3, 1, "", "multiclass_accuracy"], [41, 3, 1, "", "multiclass_logistic_loss"], [42, 3, 1, "", "probabilistic_accuracy"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"experi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45], "base_exampl": [1, 2], "baseexampl": 2, "baselin": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 45], "decision_tre": [4, 5], "decisiontreeclassifierbaselin": 5, "linear_regress": [6, 7], "linearregressionbaselin": 7, "logistic_regress": [8, 9], "binarylogisticregressionbaselin": 9, "random_classifi": [10, 11, 12], "uniformrandomclassifierbaselin": 11, "weightedrandomclassifierbaselin": 12, "random_forest": [13, 14], "randomforestclassifierbaselin": 14, "experiment_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "batch_predict": 16, "generate_episodes_and_calc_j": 17, "generate_resampled_dataset": 18, "has_fail": 19, "load_resampled_dataset": 20, "make_batch_epoch_dict_fixednit": 21, "make_batch_epoch_dict_min_sample_repeat": 22, "prep_feat_label": 23, "setup_sa_spec_for_exp": 24, "baselineexperi": 26, "fairlearnexperi": 28, "seldonianexperi": 29, "generate_plot": [30, 31, 32, 33], "plotgener": 31, "rlplotgener": 32, "supervisedplotgener": 33, "headless_exampl": [34, 35], "headlessexampl": 35, "perf_eval_func": [36, 37, 38, 39, 40, 41, 42], "mse": 37, "binary_logistic_loss": 38, "deterministic_accuraci": 39, "multiclass_accuraci": 40, "multiclass_logistic_loss": 41, "probabilistic_accuraci": 42, "api": 43, "seldonian": [44, 45], "document": 44, "tabl": 44, "content": 44, "overview": 45, "three": 45, "plot": 45, "gener": 45, "spec": 45, "object": 45, "n_trial": 45, "data_frac": 45, "datagen_method": 45, "n_worker": 45, "perf_eval_fn": 45, "perf_eval_kwarg": 45, "constraint_eval_fn": 45, "constraint_eval_kwarg": 45, "results_dir": 45, "file": 45, "an": 45}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"experiments": [[0, "module-experiments"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "experiments.base_example.BaseExample": [[2, "experiments-base-example-baseexample"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.decision_tree": [[4, "module-experiments.baselines.decision_tree"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[5, "experiments-baselines-decision-tree-decisiontreeclassifierbaseline"]], "experiments.baselines.linear_regression": [[6, "module-experiments.baselines.linear_regression"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[7, "experiments-baselines-linear-regression-linearregressionbaseline"]], "experiments.baselines.logistic_regression": [[8, "module-experiments.baselines.logistic_regression"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[9, "experiments-baselines-logistic-regression-binarylogisticregressionbaseline"]], "experiments.baselines.random_classifiers": [[10, "module-experiments.baselines.random_classifiers"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[11, "experiments-baselines-random-classifiers-uniformrandomclassifierbaseline"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[12, "experiments-baselines-random-classifiers-weightedrandomclassifierbaseline"]], "experiments.baselines.random_forest": [[13, "module-experiments.baselines.random_forest"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[14, "experiments-baselines-random-forest-randomforestclassifierbaseline"]], "experiments.experiment_utils": [[15, "module-experiments.experiment_utils"]], "experiments.experiment_utils.batch_predictions": [[16, "experiments-experiment-utils-batch-predictions"]], "experiments.experiment_utils.generate_episodes_and_calc_J": [[17, "experiments-experiment-utils-generate-episodes-and-calc-j"]], "experiments.experiment_utils.generate_resampled_datasets": [[18, "experiments-experiment-utils-generate-resampled-datasets"]], "experiments.experiment_utils.has_failed": [[19, "experiments-experiment-utils-has-failed"]], "experiments.experiment_utils.load_resampled_dataset": [[20, "experiments-experiment-utils-load-resampled-dataset"]], "experiments.experiment_utils.make_batch_epoch_dict_fixedniter": [[21, "experiments-experiment-utils-make-batch-epoch-dict-fixedniter"]], "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat": [[22, "experiments-experiment-utils-make-batch-epoch-dict-min-sample-repeat"]], "experiments.experiment_utils.prep_feat_labels": [[23, "experiments-experiment-utils-prep-feat-labels"]], "experiments.experiment_utils.setup_SA_spec_for_exp": [[24, "experiments-experiment-utils-setup-sa-spec-for-exp"]], "experiments.experiments": [[25, "module-experiments.experiments"]], "experiments.experiments.BaselineExperiment": [[26, "experiments-experiments-baselineexperiment"]], "experiments.experiments.Experiment": [[27, "experiments-experiments-experiment"]], "experiments.experiments.FairlearnExperiment": [[28, "experiments-experiments-fairlearnexperiment"]], "experiments.experiments.SeldonianExperiment": [[29, "experiments-experiments-seldonianexperiment"]], "experiments.generate_plots": [[30, "module-experiments.generate_plots"]], "experiments.generate_plots.PlotGenerator": [[31, "experiments-generate-plots-plotgenerator"]], "experiments.generate_plots.RLPlotGenerator": [[32, "experiments-generate-plots-rlplotgenerator"]], "experiments.generate_plots.SupervisedPlotGenerator": [[33, "experiments-generate-plots-supervisedplotgenerator"]], "experiments.headless_example": [[34, "module-experiments.headless_example"]], "experiments.headless_example.HeadlessExample": [[35, "experiments-headless-example-headlessexample"]], "experiments.perf_eval_funcs": [[36, "module-experiments.perf_eval_funcs"]], "experiments.perf_eval_funcs.MSE": [[37, "experiments-perf-eval-funcs-mse"]], "experiments.perf_eval_funcs.binary_logistic_loss": [[38, "experiments-perf-eval-funcs-binary-logistic-loss"]], "experiments.perf_eval_funcs.deterministic_accuracy": [[39, "experiments-perf-eval-funcs-deterministic-accuracy"]], "experiments.perf_eval_funcs.multiclass_accuracy": [[40, "experiments-perf-eval-funcs-multiclass-accuracy"]], "experiments.perf_eval_funcs.multiclass_logistic_loss": [[41, "experiments-perf-eval-funcs-multiclass-logistic-loss"]], "experiments.perf_eval_funcs.probabilistic_accuracy": [[42, "experiments-perf-eval-funcs-probabilistic-accuracy"]], "API": [[43, "api"]], "Seldonian Experiments documentation": [[44, "seldonian-experiments-documentation"]], "Table of contents": [[44, "table-of-contents"]], "Overview": [[45, "overview"]], "Seldonian experiments": [[45, "seldonian-experiments"]], "Three Plots": [[45, "three-plots"]], "Plot generator": [[45, "plot-generator"]], "Spec object": [[45, "spec-object"]], "n_trials": [[45, "n-trials"]], "data_fracs": [[45, "data-fracs"]], "datagen_method": [[45, "datagen-method"]], "n_workers": [[45, "n-workers"]], "perf_eval_fn": [[45, "perf-eval-fn"]], "perf_eval_kwargs": [[45, "perf-eval-kwargs"]], "constraint_eval_fns": [[45, "constraint-eval-fns"]], "constraint_eval_kwargs": [[45, "constraint-eval-kwargs"]], "results_dir": [[45, "results-dir"]], "Baselines": [[45, "baselines"]], "Files generated in an experiment": [[45, "files-generated-in-an-experiment"]]}, "indexentries": {"experiments": [[0, "module-experiments"]], "module": [[0, "module-experiments"], [1, "module-experiments.base_example"], [3, "module-experiments.baselines"], [4, "module-experiments.baselines.decision_tree"], [6, "module-experiments.baselines.linear_regression"], [8, "module-experiments.baselines.logistic_regression"], [10, "module-experiments.baselines.random_classifiers"], [13, "module-experiments.baselines.random_forest"], [15, "module-experiments.experiment_utils"], [25, "module-experiments.experiments"], [30, "module-experiments.generate_plots"], [34, "module-experiments.headless_example"], [36, "module-experiments.perf_eval_funcs"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "baseexample (class in experiments.base_example)": [[2, "experiments.base_example.BaseExample"]], "__init__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__init__"]], "__repr__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__repr__"]], "run() (baseexample method)": [[2, "experiments.base_example.BaseExample.run"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.decision_tree": [[4, "module-experiments.baselines.decision_tree"]], "decisiontreeclassifierbaseline (class in experiments.baselines.decision_tree)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline"]], "__init__() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__init__"]], "__repr__() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__repr__"]], "predict() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.predict"]], "train() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.train"]], "experiments.baselines.linear_regression": [[6, "module-experiments.baselines.linear_regression"]], "linearregressionbaseline (class in experiments.baselines.linear_regression)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline"]], "__init__() (linearregressionbaseline method)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline.__init__"]], "__repr__() (linearregressionbaseline method)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline.__repr__"]], "fit() (linearregressionbaseline method)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline.fit"]], "predict() (linearregressionbaseline method)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline.predict"]], "experiments.baselines.logistic_regression": [[8, "module-experiments.baselines.logistic_regression"]], "binarylogisticregressionbaseline (class in experiments.baselines.logistic_regression)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline"]], "__init__() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__init__"]], "__repr__() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__repr__"]], "fit() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.fit"]], "predict() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.predict"]], "train() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.train"]], "experiments.baselines.random_classifiers": [[10, "module-experiments.baselines.random_classifiers"]], "uniformrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[11, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline"]], "__init__() (uniformrandomclassifierbaseline method)": [[11, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__init__"]], "__repr__() (uniformrandomclassifierbaseline method)": [[11, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__repr__"]], "predict() (uniformrandomclassifierbaseline method)": [[11, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.predict"]], "weightedrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[12, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline"]], "__init__() (weightedrandomclassifierbaseline method)": [[12, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__init__"]], "__repr__() (weightedrandomclassifierbaseline method)": [[12, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__repr__"]], "predict() (weightedrandomclassifierbaseline method)": [[12, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.predict"]], "experiments.baselines.random_forest": [[13, "module-experiments.baselines.random_forest"]], "randomforestclassifierbaseline (class in experiments.baselines.random_forest)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline"]], "__init__() (randomforestclassifierbaseline method)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__init__"]], "__repr__() (randomforestclassifierbaseline method)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__repr__"]], "predict() (randomforestclassifierbaseline method)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline.predict"]], "train() (randomforestclassifierbaseline method)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline.train"]], "experiments.experiment_utils": [[15, "module-experiments.experiment_utils"]], "batch_predictions() (in module experiments.experiment_utils)": [[16, "experiments.experiment_utils.batch_predictions"]], "generate_episodes_and_calc_j() (in module experiments.experiment_utils)": [[17, "experiments.experiment_utils.generate_episodes_and_calc_J"]], "generate_resampled_datasets() (in module experiments.experiment_utils)": [[18, "experiments.experiment_utils.generate_resampled_datasets"]], "has_failed() (in module experiments.experiment_utils)": [[19, "experiments.experiment_utils.has_failed"]], "load_resampled_dataset() (in module experiments.experiment_utils)": [[20, "experiments.experiment_utils.load_resampled_dataset"]], "make_batch_epoch_dict_fixedniter() (in module experiments.experiment_utils)": [[21, "experiments.experiment_utils.make_batch_epoch_dict_fixedniter"]], "make_batch_epoch_dict_min_sample_repeat() (in module experiments.experiment_utils)": [[22, "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat"]], "prep_feat_labels() (in module experiments.experiment_utils)": [[23, "experiments.experiment_utils.prep_feat_labels"]], "setup_sa_spec_for_exp() (in module experiments.experiment_utils)": [[24, "experiments.experiment_utils.setup_SA_spec_for_exp"]], "experiments.experiments": [[25, "module-experiments.experiments"]], "baselineexperiment (class in experiments.experiments)": [[26, "experiments.experiments.BaselineExperiment"]], "__init__() (baselineexperiment method)": [[26, "experiments.experiments.BaselineExperiment.__init__"]], "__repr__() (baselineexperiment method)": [[26, "experiments.experiments.BaselineExperiment.__repr__"]], "aggregate_results() (baselineexperiment method)": [[26, "experiments.experiments.BaselineExperiment.aggregate_results"]], "evaluate_constraint_functions() (baselineexperiment method)": [[26, "experiments.experiments.BaselineExperiment.evaluate_constraint_functions"]], "run_baseline_trial() (baselineexperiment method)": [[26, "experiments.experiments.BaselineExperiment.run_baseline_trial"]], "run_experiment() (baselineexperiment method)": [[26, "experiments.experiments.BaselineExperiment.run_experiment"]], "write_trial_result() (baselineexperiment method)": [[26, "experiments.experiments.BaselineExperiment.write_trial_result"]], "experiment (class in experiments.experiments)": [[27, "experiments.experiments.Experiment"]], "__init__() (experiment method)": [[27, "experiments.experiments.Experiment.__init__"]], "__repr__() (experiment method)": [[27, "experiments.experiments.Experiment.__repr__"]], "aggregate_results() (experiment method)": [[27, "experiments.experiments.Experiment.aggregate_results"]], "write_trial_result() (experiment method)": [[27, "experiments.experiments.Experiment.write_trial_result"]], "fairlearnexperiment (class in experiments.experiments)": [[28, "experiments.experiments.FairlearnExperiment"]], "__init__() (fairlearnexperiment method)": [[28, "experiments.experiments.FairlearnExperiment.__init__"]], "__repr__() (fairlearnexperiment method)": [[28, "experiments.experiments.FairlearnExperiment.__repr__"]], "aggregate_results() (fairlearnexperiment method)": [[28, "experiments.experiments.FairlearnExperiment.aggregate_results"]], "evaluate_constraint_function() (fairlearnexperiment method)": [[28, "experiments.experiments.FairlearnExperiment.evaluate_constraint_function"]], "get_fairlearn_predictions() (fairlearnexperiment method)": [[28, "experiments.experiments.FairlearnExperiment.get_fairlearn_predictions"]], "run_experiment() (fairlearnexperiment method)": [[28, "experiments.experiments.FairlearnExperiment.run_experiment"]], "run_fairlearn_trial() (fairlearnexperiment method)": [[28, "experiments.experiments.FairlearnExperiment.run_fairlearn_trial"]], "write_trial_result() (fairlearnexperiment method)": [[28, "experiments.experiments.FairlearnExperiment.write_trial_result"]], "seldonianexperiment (class in experiments.experiments)": [[29, "experiments.experiments.SeldonianExperiment"]], "__init__() (seldonianexperiment method)": [[29, "experiments.experiments.SeldonianExperiment.__init__"]], "__repr__() (seldonianexperiment method)": [[29, "experiments.experiments.SeldonianExperiment.__repr__"]], "aggregate_results() (seldonianexperiment method)": [[29, "experiments.experiments.SeldonianExperiment.aggregate_results"]], "evaluate_constraint_functions() (seldonianexperiment method)": [[29, "experiments.experiments.SeldonianExperiment.evaluate_constraint_functions"]], "run_qsa_trial() (seldonianexperiment method)": [[29, "experiments.experiments.SeldonianExperiment.run_QSA_trial"]], "run_experiment() (seldonianexperiment method)": [[29, "experiments.experiments.SeldonianExperiment.run_experiment"]], "write_trial_result() (seldonianexperiment method)": [[29, "experiments.experiments.SeldonianExperiment.write_trial_result"]], "experiments.generate_plots": [[30, "module-experiments.generate_plots"]], "plotgenerator (class in experiments.generate_plots)": [[31, "experiments.generate_plots.PlotGenerator"]], "__init__() (plotgenerator method)": [[31, "experiments.generate_plots.PlotGenerator.__init__"]], "__repr__() (plotgenerator method)": [[31, "experiments.generate_plots.PlotGenerator.__repr__"]], "make_plots() (plotgenerator method)": [[31, "experiments.generate_plots.PlotGenerator.make_plots"]], "rlplotgenerator (class in experiments.generate_plots)": [[32, "experiments.generate_plots.RLPlotGenerator"]], "__init__() (rlplotgenerator method)": [[32, "experiments.generate_plots.RLPlotGenerator.__init__"]], "__repr__() (rlplotgenerator method)": [[32, "experiments.generate_plots.RLPlotGenerator.__repr__"]], "make_plots() (rlplotgenerator method)": [[32, "experiments.generate_plots.RLPlotGenerator.make_plots"]], "run_seldonian_experiment() (rlplotgenerator method)": [[32, "experiments.generate_plots.RLPlotGenerator.run_seldonian_experiment"]], "supervisedplotgenerator (class in experiments.generate_plots)": [[33, "experiments.generate_plots.SupervisedPlotGenerator"]], "__init__() (supervisedplotgenerator method)": [[33, "experiments.generate_plots.SupervisedPlotGenerator.__init__"]], "__repr__() (supervisedplotgenerator method)": [[33, "experiments.generate_plots.SupervisedPlotGenerator.__repr__"]], "make_plots() (supervisedplotgenerator method)": [[33, "experiments.generate_plots.SupervisedPlotGenerator.make_plots"]], "run_baseline_experiment() (supervisedplotgenerator method)": [[33, "experiments.generate_plots.SupervisedPlotGenerator.run_baseline_experiment"]], "run_fairlearn_experiment() (supervisedplotgenerator method)": [[33, "experiments.generate_plots.SupervisedPlotGenerator.run_fairlearn_experiment"]], "run_headless_seldonian_experiment() (supervisedplotgenerator method)": [[33, "experiments.generate_plots.SupervisedPlotGenerator.run_headless_seldonian_experiment"]], "run_seldonian_experiment() (supervisedplotgenerator method)": [[33, "experiments.generate_plots.SupervisedPlotGenerator.run_seldonian_experiment"]], "experiments.headless_example": [[34, "module-experiments.headless_example"]], "headlessexample (class in experiments.headless_example)": [[35, "experiments.headless_example.HeadlessExample"]], "__init__() (headlessexample method)": [[35, "experiments.headless_example.HeadlessExample.__init__"]], "__repr__() (headlessexample method)": [[35, "experiments.headless_example.HeadlessExample.__repr__"]], "run() (headlessexample method)": [[35, "experiments.headless_example.HeadlessExample.run"]], "experiments.perf_eval_funcs": [[36, "module-experiments.perf_eval_funcs"]], "mse() (in module experiments.perf_eval_funcs)": [[37, "experiments.perf_eval_funcs.MSE"]], "binary_logistic_loss() (in module experiments.perf_eval_funcs)": [[38, "experiments.perf_eval_funcs.binary_logistic_loss"]], "deterministic_accuracy() (in module experiments.perf_eval_funcs)": [[39, "experiments.perf_eval_funcs.deterministic_accuracy"]], "multiclass_accuracy() (in module experiments.perf_eval_funcs)": [[40, "experiments.perf_eval_funcs.multiclass_accuracy"]], "multiclass_logistic_loss() (in module experiments.perf_eval_funcs)": [[41, "experiments.perf_eval_funcs.multiclass_logistic_loss"]], "probabilistic_accuracy() (in module experiments.perf_eval_funcs)": [[42, "experiments.perf_eval_funcs.probabilistic_accuracy"]]}})