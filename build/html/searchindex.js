Search.setIndex({"docnames": ["_autosummary/experiments", "_autosummary/experiments.base_example", "_autosummary/experiments.base_example.BaseExample", "_autosummary/experiments.baselines", "_autosummary/experiments.baselines.decision_tree", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "_autosummary/experiments.baselines.linear_regression", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline", "_autosummary/experiments.baselines.logistic_regression", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "_autosummary/experiments.baselines.random_classifiers", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "_autosummary/experiments.baselines.random_forest", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline", "_autosummary/experiments.experiment_utils", "_autosummary/experiments.experiment_utils.batch_predictions", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J", "_autosummary/experiments.experiment_utils.generate_resampled_datasets", "_autosummary/experiments.experiment_utils.has_failed", "_autosummary/experiments.experiment_utils.load_resampled_dataset", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "_autosummary/experiments.experiment_utils.prep_feat_labels", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp", "_autosummary/experiments.experiment_utils.trial_arg_chunker", "_autosummary/experiments.experiments", "_autosummary/experiments.experiments.BaselineExperiment", "_autosummary/experiments.experiments.Experiment", "_autosummary/experiments.experiments.FairlearnExperiment", "_autosummary/experiments.experiments.SeldonianExperiment", "_autosummary/experiments.generate_plots", "_autosummary/experiments.generate_plots.PlotGenerator", "_autosummary/experiments.generate_plots.RLPlotGenerator", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator", "_autosummary/experiments.headless_example", "_autosummary/experiments.headless_example.HeadlessExample", "_autosummary/experiments.perf_eval_funcs", "_autosummary/experiments.perf_eval_funcs.MSE", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy", "api", "index", "overview"], "filenames": ["_autosummary/experiments.rst", "_autosummary/experiments.base_example.rst", "_autosummary/experiments.base_example.BaseExample.rst", "_autosummary/experiments.baselines.rst", "_autosummary/experiments.baselines.decision_tree.rst", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.rst", "_autosummary/experiments.baselines.linear_regression.rst", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline.rst", "_autosummary/experiments.baselines.logistic_regression.rst", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.rst", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_forest.rst", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline.rst", "_autosummary/experiments.experiment_utils.rst", "_autosummary/experiments.experiment_utils.batch_predictions.rst", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J.rst", "_autosummary/experiments.experiment_utils.generate_resampled_datasets.rst", "_autosummary/experiments.experiment_utils.has_failed.rst", "_autosummary/experiments.experiment_utils.load_resampled_dataset.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat.rst", "_autosummary/experiments.experiment_utils.prep_feat_labels.rst", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp.rst", "_autosummary/experiments.experiment_utils.trial_arg_chunker.rst", "_autosummary/experiments.experiments.rst", "_autosummary/experiments.experiments.BaselineExperiment.rst", "_autosummary/experiments.experiments.Experiment.rst", "_autosummary/experiments.experiments.FairlearnExperiment.rst", "_autosummary/experiments.experiments.SeldonianExperiment.rst", "_autosummary/experiments.generate_plots.rst", "_autosummary/experiments.generate_plots.PlotGenerator.rst", "_autosummary/experiments.generate_plots.RLPlotGenerator.rst", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator.rst", "_autosummary/experiments.headless_example.rst", "_autosummary/experiments.headless_example.HeadlessExample.rst", "_autosummary/experiments.perf_eval_funcs.rst", "_autosummary/experiments.perf_eval_funcs.MSE.rst", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy.rst", "api.rst", "index.rst", "overview.rst"], "titles": ["experiments", "experiments.base_example", "experiments.base_example.BaseExample", "experiments.baselines", "experiments.baselines.decision_tree", "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "experiments.baselines.linear_regression", "experiments.baselines.linear_regression.LinearRegressionBaseline", "experiments.baselines.logistic_regression", "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "experiments.baselines.random_classifiers", "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "experiments.baselines.random_forest", "experiments.baselines.random_forest.RandomForestClassifierBaseline", "experiments.experiment_utils", "experiments.experiment_utils.batch_predictions", "experiments.experiment_utils.generate_episodes_and_calc_J", "experiments.experiment_utils.generate_resampled_datasets", "experiments.experiment_utils.has_failed", "experiments.experiment_utils.load_resampled_dataset", "experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "experiments.experiment_utils.prep_feat_labels", "experiments.experiment_utils.setup_SA_spec_for_exp", "experiments.experiment_utils.trial_arg_chunker", "experiments.experiments", "experiments.experiments.BaselineExperiment", "experiments.experiments.Experiment", "experiments.experiments.FairlearnExperiment", "experiments.experiments.SeldonianExperiment", "experiments.generate_plots", "experiments.generate_plots.PlotGenerator", "experiments.generate_plots.RLPlotGenerator", "experiments.generate_plots.SupervisedPlotGenerator", "experiments.headless_example", "experiments.headless_example.HeadlessExample", "experiments.perf_eval_funcs", "experiments.perf_eval_funcs.MSE", "experiments.perf_eval_funcs.binary_logistic_loss", "experiments.perf_eval_funcs.deterministic_accuracy", "experiments.perf_eval_funcs.multiclass_accuracy", "experiments.perf_eval_funcs.multiclass_logistic_loss", "experiments.perf_eval_funcs.probabilistic_accuracy", "API", "Seldonian Experiments documentation", "Overview"], "terms": {"modul": [0, 1, 3, 26, 31, 35], "run": [0, 1, 2, 21, 22, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 45, 46], "seldonian": [0, 23, 26, 27, 30, 32, 33, 34], "gener": [0, 17, 18, 20, 32, 33, 34, 45], "three": [0, 2, 31, 32, 33, 34, 36, 45], "plot": [0, 2, 19, 31, 32, 33, 34, 36, 45], "contain": [1, 23, 35, 46], "base": [1, 2, 5, 7, 9, 11, 12, 14, 27, 28, 29, 30, 32, 33, 34, 35, 36], "class": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 46], "exampl": [1, 2, 35, 36, 46], "spec": [2, 24, 32, 33, 34, 36, 45], "object": [2, 5, 14, 23, 28, 32, 33, 34, 45], "__init__": [2, 5, 7, 9, 11, 12, 14, 27, 28, 29, 30, 32, 33, 34, 36, 45], "__repr__": [2, 5, 7, 9, 11, 12, 14, 27, 28, 29, 30, 32, 33, 34, 36, 45], "return": [2, 5, 7, 9, 11, 12, 14, 17, 19, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 36, 42, 46], "repr": [2, 5, 7, 9, 11, 12, 14, 27, 28, 29, 30, 32, 33, 34, 36], "self": [2, 5, 7, 9, 11, 12, 14, 27, 28, 29, 30, 32, 33, 34, 36], "method": [2, 5, 7, 9, 11, 12, 14, 27, 28, 29, 30, 32, 33, 34, 36, 46], "n_trial": [2, 18, 20, 25, 32, 33, 34, 36, 45], "data_frac": [2, 20, 21, 22, 24, 25, 27, 29, 30, 32, 33, 34, 36, 45], "results_dir": [2, 20, 24, 27, 28, 29, 30, 32, 33, 34, 36, 45], "perf_eval_fn": [2, 32, 33, 34, 36, 45], "n_worker": [2, 25, 32, 33, 34, 36, 45], "1": [2, 9, 21, 22, 29, 32, 36, 40, 41, 43, 46], "datagen_method": [2, 24, 32, 33, 34, 36, 45], "resampl": [2, 18, 20, 32, 33, 34, 36, 46], "verbos": [2, 20, 27, 28, 29, 30, 33, 34, 36], "fals": [2, 19, 20, 23, 27, 28, 29, 30, 33, 34, 36, 46], "baselin": [2, 27, 28, 36, 45], "include_fairlearn_model": 2, "fairlearn_kwarg": 2, "performance_label": [2, 32, 33, 34, 36], "perform": [2, 32, 33, 34, 36, 45, 46], "performance_yscal": [2, 32, 33, 34, 36], "linear": [2, 7, 32, 33, 34, 36], "plot_savenam": [2, 36], "none": [2, 5, 14, 32, 33, 34, 36], "plot_fonts": [2, 36], "12": [2, 32, 33, 34, 36], "legend_fonts": [2, 32, 33, 34, 36], "8": [2, 32, 33, 34, 36], "thi": [2, 5, 14, 19, 20, 23, 32, 33, 34, 36, 45, 46], "ani": [2, 5, 27, 28, 29, 30, 32, 33, 34, 36], "model": [2, 5, 7, 9, 14, 16, 19, 27, 28, 29, 30, 32, 33, 34, 36, 40, 41, 43, 46], "includ": [2, 9, 32, 33, 34, 36, 46], "paramet": [2, 5, 7, 9, 11, 12, 14, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 36, 38, 40, 41, 43, 46], "first": [2, 36, 46], "Then": [2, 36], "produc": [2, 36, 46], "dt_kwarg": 5, "implement": [5, 7, 9, 11, 12, 14, 46], "decis": 5, "tree": [5, 27, 30, 32, 33, 34, 46], "classifi": [5, 7, 9, 11, 12, 14, 46], "binari": [5, 9, 14, 43], "classif": [5, 9, 14, 41, 42, 43, 46], "task": [5, 14], "keyword": [5, 27, 30, 32, 33, 34], "argument": [5, 27, 30, 32, 33, 34, 46], "scikit": 5, "learn": [5, 18, 20, 27, 46], "": [5, 22, 32, 33, 34], "decisiontreeclassifi": 5, "take": 5, "predict": [5, 7, 9, 11, 12, 14, 29, 38, 40, 41, 43, 45, 46], "theta": [5, 7, 9, 11, 12, 14, 32, 33, 34], "x": [5, 7, 9, 11, 12, 14], "us": [5, 7, 9, 14, 15, 18, 19, 20, 27, 29, 30, 32, 33, 34, 40, 41, 43, 45, 46], "train": [5, 7, 9, 14, 27, 45, 46], "posit": [5, 7, 9, 11, 12, 14, 46], "probabl": [5, 9, 11, 12, 14, 41, 43, 46], "isn": [5, 14], "t": [5, 14, 22], "here": [5, 14, 46], "becaus": [5, 14, 46], "ar": [5, 14, 18, 20, 21, 22, 29, 32, 33, 34, 45, 46], "fit": [5, 7, 9, 14, 45], "param": [5, 14], "weight": [5, 7, 9, 11, 12, 14, 27, 29, 30], "case": [5, 14, 46], "featur": [5, 7, 9, 11, 12, 14, 18, 20, 23, 29], "type": [5, 7, 9, 11, 12, 14, 17, 27, 30, 32, 33, 34, 42, 46], "2d": [5, 9, 14], "np": [5, 9, 14, 21, 22, 27, 30, 46], "ndarrai": [5, 7, 9, 11, 12, 14, 21, 22, 27, 30], "y": [5, 7, 9, 14, 32, 33, 34, 38, 39, 40, 41, 42, 43], "instanti": [5, 14], "new": [5, 14, 45, 46], "instanc": [5, 14], "data": [5, 9, 14, 19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 42, 46], "label": [5, 7, 9, 11, 12, 14, 18, 20, 23, 29, 32, 33, 34, 38, 40, 41, 43], "1d": [5, 9, 14, 29], "linearregressionmodel": 7, "alwai": [7, 11, 12], "ha": [7, 11, 12, 46], "prob": [7, 11, 12, 32, 33, 34], "0": [7, 11, 12, 40, 46], "5": [7, 11, 12, 46], "regardless": [7, 11, 12, 46], "input": [7, 11, 12, 18, 20, 46], "pair": 7, "nxm": 7, "numpi": [7, 11, 12, 27, 30], "nx1": 7, "from": [7, 18, 27, 28, 29, 30, 32, 33, 34, 46], "The": [7, 9, 11, 12, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 40, 45, 46], "binarylogisticregressionmodel": 9, "logist": [9, 42, 46], "regress": [9, 46], "let": 9, "i": [9, 17, 18, 19, 22, 30, 32, 33, 34, 40, 41, 43, 45, 46], "number": [9, 18, 21, 22, 23, 32, 33, 34, 46], "datapoint": 9, "j": [9, 17], "bia": 9, "term": 9, "provi": 9, "k": 9, "arrai": [9, 21, 22, 29, 38, 40, 41, 43, 46], "shape": [9, 18, 20, 29], "have": [9, 11, 12, 46], "each": [9, 11, 12, 18, 20, 21, 22, 27, 28, 29, 30, 32, 33, 34, 41, 43, 46], "point": [9, 21, 22, 23, 29, 32, 33, 34, 42, 46], "length": [9, 46], "observ": [9, 11, 12], "just": 9, "wrapper": 9, "parent": [9, 18, 27, 28, 29, 30], "randomclassifiermodel": [11, 12], "float": [11, 12, 17, 19, 20, 27, 29, 30, 32, 33, 34, 42], "overrid": 12, "child": 12, "rf_kwarg": 14, "random": [14, 46], "forest": 14, "util": [15, 18, 20, 23], "rest": 15, "librari": [15, 34, 45, 46], "function": [15, 18, 20, 21, 22, 23, 27, 29, 30, 32, 33, 34, 37, 46], "solut": [16, 27, 30, 32, 33, 34, 46], "x_test": 16, "kwarg": [16, 17, 24, 27, 28, 29, 30, 32, 33, 34, 38, 39, 40, 41, 42, 43], "calcul": [17, 38, 42], "expect": 17, "discount": 17, "episod": [17, 46], "where": [17, 21, 22, 32, 33, 34], "list": [17, 27, 28, 29, 30, 32, 33, 34, 46], "ground": [17, 27, 30, 32, 33, 34, 46], "truth": [17, 27, 30, 32, 33, 34, 46], "dataset": [18, 20, 23, 27, 29, 30, 32, 33, 34, 46], "save_dir": 18, "supervis": [18, 20, 27, 34, 46], "trial": [18, 20, 23, 27, 28, 29, 30, 32, 33, 34, 46], "replac": [18, 20, 46], "sensit": [18, 20, 23, 29], "attribut": [18, 20, 23, 33, 34], "creat": [18, 20, 46], "version": [18, 20], "same": [18, 20, 29, 32, 33, 34, 46], "panda": 18, "datafram": 18, "origin": [18, 46], "which": [18, 20, 27, 28, 29, 30, 32, 33, 34, 46], "int": [18, 20, 21, 22, 23, 27, 29, 30, 32, 33, 34], "e": [18, 27, 28, 32, 33, 34, 46], "make": [18, 31, 32, 33, 34, 45, 46], "str": [18, 20, 27, 28, 29, 30, 32, 33, 34], "directori": [18, 20, 27, 28, 29, 30, 32, 33, 34, 46], "save": [18, 20, 27, 28, 29, 30, 32, 33, 34, 46], "file_format": 18, "format": 18, "option": [18, 29, 30, 32, 33, 34, 46], "csv": [18, 27, 28, 29, 30, 46], "pkl": [18, 46], "g": [19, 27, 28, 30, 32, 33, 34, 46], "condit": 19, "whether": [19, 23, 27, 30, 32, 33, 34, 46], "valu": [19, 21, 22, 27, 29, 30, 32, 33, 34, 46], "unsaf": 19, "determin": [19, 27, 30, 32, 33, 34, 46], "failur": [19, 32, 33, 34, 46], "rate": [19, 32, 33, 34, 41, 43, 46], "right": [19, 32, 33, 34, 46], "most": 19, "behavior": [19, 46], "constraint": [19, 27, 29, 30, 32, 33, 34, 46], "evalu": [19, 27, 29, 30, 32, 33, 34, 45, 46], "true": [19, 27, 28, 29, 30, 32, 33, 34, 38, 40, 41, 43, 46], "safe": [19, 27, 30, 46], "trial_i": [20, 24, 27, 29, 30, 46], "result": [20, 27, 28, 29, 30, 32, 33, 34, 46], "index": [20, 27, 29, 30], "fraction": [20, 21, 22, 27, 29, 30, 32, 33, 34, 40, 46], "boolean": [20, 46], "flag": [20, 46], "niter": 21, "n_max": [21, 22], "batch_siz": [21, 22], "conveni": [21, 22], "figur": [21, 22, 29, 32, 33, 34, 46], "out": [21, 22, 27, 28, 29, 30], "epoch": [21, 22], "necessari": [21, 22], "ensur": [21, 22], "total": [21, 22], "iter": [21, 22], "batch": [21, 22, 32, 33, 34], "size": [21, 22, 27, 29, 30, 32, 33, 34, 46], "fix": [21, 22], "you": [21, 22, 32, 33, 34, 45, 46], "want": [21, 22, 32, 33, 34, 46], "everi": [21, 22, 46], "d": [21, 22], "maximum": [21, 22], "optim": [21, 22], "process": [21, 22], "batch_epoch_dict": [21, 22, 24, 32, 33, 34, 36], "A": [21, 22, 32, 33, 34, 46], "dictionari": [21, 22, 32, 33, 34, 46], "kei": [21, 22, 32, 33, 34], "num_epoch": [21, 22], "niter_min": 22, "num_repeat": 22, "frac": [22, 32, 33, 34, 46], "max": [22, 46], "sampl": [22, 38, 40, 46], "seen": 22, "time": [22, 32, 33, 34, 46], "minimum": 22, "must": [22, 46], "trial_dataset": 23, "n_point": 23, "include_sensitive_attr": 23, "prepar": 23, "given": [23, 27, 30, 46], "bool": [23, 27, 28, 29, 30, 32, 33, 34], "prep": 23, "well": 23, "regim": [24, 46], "perf_eval_kwarg": [24, 32, 33, 34, 36, 45], "baseline_model": [27, 34], "against": [27, 46], "compar": [27, 46], "model_nam": [27, 28, 30, 46], "string": [27, 28, 30], "name": [27, 28, 29, 30, 32, 33, 34, 46], "logistic_regress": [27, 28, 45, 46], "experiment": [27, 28, 29, 30], "aggregate_result": [27, 28, 29, 30, 45], "group": [27, 28, 29, 30], "togeth": [27, 28, 29, 30], "file": [27, 28, 29, 30, 32, 33, 34, 45], "singl": [27, 28, 29, 30, 46], "evaluate_constraint_funct": [27, 29, 30, 45], "constraint_eval_fn": [27, 30, 32, 33, 34, 45], "constraint_eval_kwarg": [27, 30, 32, 33, 34, 36, 45], "helper": [27, 30], "wa": [27, 30, 46], "found": [27, 30, 46], "dure": [27, 30], "an": [27, 30, 32, 33, 34, 45], "empti": [27, 30, 32, 33, 34, 46], "default": [27, 29, 32, 33, 34, 46], "pars": [27, 30, 32, 33, 34, 46], "dict": [27, 30, 32, 33, 34], "pass": [27, 30, 32, 33, 34, 46], "vector": [27, 30], "run_baseline_tri": [27, 45], "current": [27, 30, 46], "onli": [27, 30, 32, 33, 34, 40, 43, 46], "support": [27, 46], "overal": [27, 29, 30, 32, 33, 34], "run_experi": [27, 29, 30, 45], "write_trial_result": [27, 28, 29, 30, 45], "colnam": [27, 28, 29, 30], "trial_dir": [27, 28, 29, 30], "write": [27, 28, 29, 30], "inform": [27, 28, 29, 30], "item": [27, 28, 29, 30], "These": [27, 28, 29, 30], "compris": [27, 28, 29, 30, 46], "header": [27, 28, 29, 30], "print": [27, 28, 29, 30], "filenam": [27, 28, 29, 30, 32, 33, 34], "fairlearn_epsilon_constraint": [29, 34], "fairlearn": [29, 34, 46], "epsilon": 29, "threshold": [29, 46], "y_pred": [29, 38, 39, 40, 41, 42, 43], "test_label": 29, "fairlearn_constraint_nam": [29, 34], "epsilon_ev": 29, "eval_method": 29, "nativ": 29, "sensitive_featur": 29, "two": [29, 46], "column": [29, 32, 33, 34], "consid": [29, 46], "get_fairlearn_predict": [29, 45], "mitig": 29, "x_test_fairlearn": 29, "get": 29, "consist": 29, "potenti": 29, "more": [29, 46], "than": [29, 46], "one": [29, 46], "predictor": 29, "For": [29, 41, 43, 46], "non": 29, "zero": 29, "we": [29, 46], "how": [29, 46], "mani": [29, 46], "normal": 29, "across": 29, "all": [29, 32, 33, 34, 42, 46], "test": [29, 46], "run_fairlearn_tri": [29, 45], "qsa": 30, "quasi": [30, 46], "algorithm": [30, 32, 33, 34, 45, 46], "candid": [30, 32, 33, 34], "select": [30, 32, 33, 34], "run_qsa_tri": [30, 45], "2": 32, "3": [32, 33, 34, 46], "v": 32, "amount": [32, 33, 34, 46], "specif": [32, 33, 34], "error": [32, 33, 34, 38, 41, 43], "bar": [32, 33, 34], "proport": [32, 33, 34], "horizont": [32, 33, 34, 46], "axi": [32, 33, 34, 46], "obtain": [32, 33, 34, 46], "signatur": [32, 33, 34], "func": [32, 33, 34], "worker": [32, 33, 34, 46], "multiprocess": [32, 33, 34], "If": [32, 33, 34, 45, 46], "provid": [32, 33, 34, 46], "extra": [32, 33, 34], "instruct": [32, 33, 34], "n_epoch": [32, 33, 34], "make_plot": [32, 33, 34, 45, 46], "model_label_dict": [32, 33, 34, 36], "ignore_model": [32, 33, 34], "fontsiz": [32, 33, 34], "title_fonts": [32, 33, 34], "ncols_legend": [32, 33, 34], "accuraci": [32, 33, 34, 46], "sr_label": [32, 33, 34], "fr_label": [32, 33, 34], "violat": [32, 33, 34], "performance_ylim": [32, 33, 34], "hoz_axis_label": [32, 33, 34], "show_confidence_level": [32, 33, 34], "marker_s": [32, 33, 34], "20": [32, 33, 34], "save_format": [32, 33, 34], "pdf": [32, 33, 34], "show_titl": [32, 33, 34], "custom_titl": [32, 33, 34], "include_legend": [32, 33, 34], "savenam": [32, 33, 34], "look": [32, 33, 34, 46], "up": [32, 33, 34], "them": [32, 33, 34, 46], "shown": [32, 33, 34, 46], "legend": [32, 33, 34], "note": [32, 33, 34], "specifi": [32, 33, 34, 46], "appear": [32, 33, 34], "thei": [32, 33, 34, 46], "show": [32, 33, 34, 46], "order": [32, 33, 34, 46], "do": [32, 33, 34, 46], "font": [32, 33, 34], "text": [32, 33, 34], "left": [32, 33, 34, 46], "middl": [32, 33, 34, 46], "scale": [32, 33, 34], "log": [32, 33, 34, 46], "limit": [32, 33, 34], "matplotlib": [32, 33, 34], "automat": [32, 33, 34], "what": [32, 33, 34, 46], "black": [32, 33, 34, 46], "dot": [32, 33, 34, 46], "line": [32, 33, 34, 46], "delta": [32, 33, 34, 46], "titl": [32, 33, 34], "top": [32, 33, 34, 46], "custom": [32, 33, 34, 46], "disk": [32, 33, 34], "hyperparameter_and_setting_dict": 33, "plotgener": [33, 34, 45], "rl": [33, 46], "run_seldonian_experi": [33, 34, 45, 46], "assign": [33, 34], "displai": [33, 34], "stdout": [33, 34], "while": [33, 34, 46], "run_baseline_experi": [34, 45, 46], "run_fairlearn_experi": [34, 45], "fairlearn_sensitive_feature_nam": 34, "fairlearn_epsilon_ev": 34, "fairlearn_eval_kwarg": 34, "run_headless_seldonian_experi": [34, 45], "full_pretraining_model": [34, 36], "initial_state_dict": 34, "headless_pretraining_model": [34, 36], "head_layer_nam": [34, 36], "latent_feature_shap": [34, 36], "loss_func_pretrain": [34, 36], "learning_rate_pretrain": [34, 36], "pretraining_devic": [34, 36], "batch_epoch_dict_pretrain": [34, 36], "safety_batch_size_pretrain": [34, 36], "1000": 34, "headless": [34, 36], "baseexampl": [36, 45], "mean": 38, "squar": 38, "correct": 40, "best": 40, "when": [40, 41, 43, 46], "output": [40, 41, 43], "multi": [41, 42], "dimension": [41, 43], "averag": 42, "loss": 42, "over": 42, "welcom": 45, "design": 45, "help": [45, 46], "safeti": [45, 46], "sourc": 45, "code": [45, 46], "host": 45, "github": 45, "heavi": 45, "engin": [45, 46], "core": [45, 46], "complet": 45, "see": [45, 46], "overview": 45, "api": [45, 46], "base_exampl": 45, "decision_tre": 45, "decisiontreeclassifierbaselin": 45, "linear_regress": 45, "linearregressionbaselin": 45, "binarylogisticregressionbaselin": 45, "random_classifi": 45, "uniformrandomclassifierbaselin": 45, "weightedrandomclassifierbaselin": 45, "random_forest": 45, "randomforestclassifierbaselin": 45, "experiment_util": 45, "batch_predict": 45, "generate_episodes_and_calc_j": 45, "generate_resampled_dataset": 45, "has_fail": 45, "load_resampled_dataset": 45, "make_batch_epoch_dict_fixednit": 45, "make_batch_epoch_dict_min_sample_repeat": 45, "prep_feat_label": 45, "setup_sa_spec_for_exp": 45, "trial_arg_chunk": 45, "baselineexperi": [45, 46], "fairlearnexperi": [45, 46], "seldonianexperi": 45, "generate_plot": 45, "rlplotgener": [45, 46], "supervisedplotgener": [45, 46], "headless_exampl": 45, "headlessexampl": 45, "perf_eval_func": 45, "mse": 45, "binary_logistic_loss": 45, "deterministic_accuraci": 45, "multiclass_accuraci": 45, "multiclass_logistic_loss": 45, "probabilistic_accuraci": 45, "document": 46, "explain": 46, "sa": 46, "detail": 46, "descript": 46, "machin": 46, "toolkit": 46, "homepag": 46, "heavili": 46, "depend": 46, "wai": 46, "It": 46, "involv": 46, "increas": 46, "some": 46, "indic": 46, "satisfi": 46, "sometim": 46, "come": 46, "cost": 46, "reduc": 46, "can": 46, "understand": 46, "trade": 46, "off": 46, "cannot": 46, "No": 46, "despit": 46, "quantiti": 46, "assum": 46, "access": 46, "real": 46, "world": 46, "problem": 46, "set": 46, "typic": 46, "doe": 46, "instead": 46, "adopt": 46, "strategi": 46, "bootstrap": 46, "approxim": 46, "gpa": 46, "discuss": 46, "scienc": 46, "paper": 46, "panel": 46, "thoma": 46, "et": 46, "al": 46, "2019": 46, "fair": 46, "dispar": 46, "impact": 46, "green": 46, "dash": 46, "sever": 46, "standard": 46, "ml": 46, "red": 46, "also": 46, "awar": 46, "blue": 46, "magenta": 46, "In": 46, "criteria": 46, "repres": 46, "confid": 46, "05": 46, "your": 46, "reinforc": 46, "either": 46, "both": 46, "describ": 46, "follow": 46, "requir": 46, "often": 46, "interfac": 46, "everyth": 46, "need": 46, "underli": 46, "etc": 46, "estim": 46, "uncertainti": 46, "multipli": 46, "within": 46, "differ": 46, "dimens": 46, "At": 46, "generate_episod": 46, "polici": 46, "parallel": 46, "multipl": 46, "avail": 46, "independ": 46, "other": 46, "embarrassingli": 46, "program": 46, "less": 46, "primari": 46, "explicitli": 46, "nsf": 46, "built": 46, "call": 46, "plot_gener": 46, "easi": 46, "develop": 46, "easili": 46, "add": 46, "own": 46, "ad": 46, "alreadi": 46, "p": 46, "abov": 46, "would": 46, "simpli": 46, "block": 46, "like": 46, "That": 46, "anoth": 46, "narrow": 46, "rang": 46, "progress": 46, "structur": 46, "insid": 46, "after": 46, "via": 46, "qsa_result": 46, "trial_data": 46, "data_frac_0": 46, "0010_trial_0": 46, "0010_trial_1": 46, "0010_trial_2": 46, "0010_trial_3": 46, "0010_trial_4": 46, "0022_trial_0": 46, "0022_trial_1": 46, "0022_trial_2": 46, "0022_trial_3": 46, "0022_trial_4": 46, "0046_trial_0": 46, "0046_trial_1": 46, "0046_trial_2": 46, "0046_trial_3": 46, "0046_trial_4": 46, "0050_trial_0": 46, "0100_trial_0": 46, "0100_trial_1": 46, "0100_trial_2": 46, "0100_trial_3": 46, "0100_trial_4": 46, "0215_trial_0": 46, "0215_trial_1": 46, "0215_trial_2": 46, "0215_trial_3": 46, "0215_trial_4": 46, "0464_trial_0": 46, "0464_trial_1": 46, "0464_trial_2": 46, "0464_trial_3": 46, "0464_trial_4": 46, "1000_trial_0": 46, "1000_trial_1": 46, "1000_trial_2": 46, "1000_trial_3": 46, "1000_trial_4": 46, "2154_trial_0": 46, "2154_trial_1": 46, "2154_trial_2": 46, "2154_trial_3": 46, "2154_trial_4": 46, "4642_trial_0": 46, "4642_trial_1": 46, "4642_trial_2": 46, "4642_trial_3": 46, "4642_trial_4": 46, "data_frac_1": 46, "0000_trial_0": 46, "0000_trial_1": 46, "0000_trial_2": 46, "0000_trial_3": 46, "0000_trial_4": 46, "resampled_dataset": 46, "resampled_data_trial0": 46, "resampled_data_trial1": 46, "resampled_data_trial2": 46, "resampled_data_trial3": 46, "resampled_data_trial4": 46, "logspac": 46, "10": 46, "space": 46, "start": 46, "001": 46, "end": 46, "As": 46, "50": 46, "fail": 46, "content": 46, "6105_trial36": 46, "passed_safeti": 46, "6105402296585326": 46, "36": 46, "6746247014792527": 46, "level": 46, "folder": 46, "_result": 46, "logistic_regression_result": 46, "its": 46, "separ": 46, "curv": 46, "autom": 46, "loan": 46, "approv": 46, "system": 46, "tutori": 46}, "objects": {"": [[0, 0, 0, "-", "experiments"]], "experiments": [[1, 0, 0, "-", "base_example"], [3, 0, 0, "-", "baselines"], [15, 0, 0, "-", "experiment_utils"], [26, 0, 0, "-", "experiments"], [31, 0, 0, "-", "generate_plots"], [35, 0, 0, "-", "headless_example"], [37, 0, 0, "-", "perf_eval_funcs"]], "experiments.base_example": [[2, 1, 1, "", "BaseExample"]], "experiments.base_example.BaseExample": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "__repr__"], [2, 2, 1, "", "run"]], "experiments.baselines": [[4, 0, 0, "-", "decision_tree"], [6, 0, 0, "-", "linear_regression"], [8, 0, 0, "-", "logistic_regression"], [10, 0, 0, "-", "random_classifiers"], [13, 0, 0, "-", "random_forest"]], "experiments.baselines.decision_tree": [[5, 1, 1, "", "DecisionTreeClassifierBaseline"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "__repr__"], [5, 2, 1, "", "predict"], [5, 2, 1, "", "train"]], "experiments.baselines.linear_regression": [[7, 1, 1, "", "LinearRegressionBaseline"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "__repr__"], [7, 2, 1, "", "fit"], [7, 2, 1, "", "predict"]], "experiments.baselines.logistic_regression": [[9, 1, 1, "", "BinaryLogisticRegressionBaseline"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "__repr__"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "train"]], "experiments.baselines.random_classifiers": [[11, 1, 1, "", "UniformRandomClassifierBaseline"], [12, 1, 1, "", "WeightedRandomClassifierBaseline"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "__repr__"], [11, 2, 1, "", "predict"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "__repr__"], [12, 2, 1, "", "predict"]], "experiments.baselines.random_forest": [[14, 1, 1, "", "RandomForestClassifierBaseline"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "__repr__"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "train"]], "experiments.experiment_utils": [[16, 3, 1, "", "batch_predictions"], [17, 3, 1, "", "generate_episodes_and_calc_J"], [18, 3, 1, "", "generate_resampled_datasets"], [19, 3, 1, "", "has_failed"], [20, 3, 1, "", "load_resampled_dataset"], [21, 3, 1, "", "make_batch_epoch_dict_fixedniter"], [22, 3, 1, "", "make_batch_epoch_dict_min_sample_repeat"], [23, 3, 1, "", "prep_feat_labels"], [24, 3, 1, "", "setup_SA_spec_for_exp"], [25, 3, 1, "", "trial_arg_chunker"]], "experiments.experiments": [[27, 1, 1, "", "BaselineExperiment"], [28, 1, 1, "", "Experiment"], [29, 1, 1, "", "FairlearnExperiment"], [30, 1, 1, "", "SeldonianExperiment"]], "experiments.experiments.BaselineExperiment": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "aggregate_results"], [27, 2, 1, "", "evaluate_constraint_functions"], [27, 2, 1, "", "run_baseline_trial"], [27, 2, 1, "", "run_experiment"], [27, 2, 1, "", "write_trial_result"]], "experiments.experiments.Experiment": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "__repr__"], [28, 2, 1, "", "aggregate_results"], [28, 2, 1, "", "write_trial_result"]], "experiments.experiments.FairlearnExperiment": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "__repr__"], [29, 2, 1, "", "aggregate_results"], [29, 2, 1, "", "evaluate_constraint_function"], [29, 2, 1, "", "get_fairlearn_predictions"], [29, 2, 1, "", "run_experiment"], [29, 2, 1, "", "run_fairlearn_trial"], [29, 2, 1, "", "write_trial_result"]], "experiments.experiments.SeldonianExperiment": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "__repr__"], [30, 2, 1, "", "aggregate_results"], [30, 2, 1, "", "evaluate_constraint_functions"], [30, 2, 1, "", "run_QSA_trial"], [30, 2, 1, "", "run_experiment"], [30, 2, 1, "", "write_trial_result"]], "experiments.generate_plots": [[32, 1, 1, "", "PlotGenerator"], [33, 1, 1, "", "RLPlotGenerator"], [34, 1, 1, "", "SupervisedPlotGenerator"]], "experiments.generate_plots.PlotGenerator": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "__repr__"], [32, 2, 1, "", "make_plots"]], "experiments.generate_plots.RLPlotGenerator": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "__repr__"], [33, 2, 1, "", "make_plots"], [33, 2, 1, "", "run_seldonian_experiment"]], "experiments.generate_plots.SupervisedPlotGenerator": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "__repr__"], [34, 2, 1, "", "make_plots"], [34, 2, 1, "", "run_baseline_experiment"], [34, 2, 1, "", "run_fairlearn_experiment"], [34, 2, 1, "", "run_headless_seldonian_experiment"], [34, 2, 1, "", "run_seldonian_experiment"]], "experiments.headless_example": [[36, 1, 1, "", "HeadlessExample"]], "experiments.headless_example.HeadlessExample": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "__repr__"], [36, 2, 1, "", "run"]], "experiments.perf_eval_funcs": [[38, 3, 1, "", "MSE"], [39, 3, 1, "", "binary_logistic_loss"], [40, 3, 1, "", "deterministic_accuracy"], [41, 3, 1, "", "multiclass_accuracy"], [42, 3, 1, "", "multiclass_logistic_loss"], [43, 3, 1, "", "probabilistic_accuracy"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"experi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46], "base_exampl": [1, 2], "baseexampl": 2, "baselin": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 46], "decision_tre": [4, 5], "decisiontreeclassifierbaselin": 5, "linear_regress": [6, 7], "linearregressionbaselin": 7, "logistic_regress": [8, 9], "binarylogisticregressionbaselin": 9, "random_classifi": [10, 11, 12], "uniformrandomclassifierbaselin": 11, "weightedrandomclassifierbaselin": 12, "random_forest": [13, 14], "randomforestclassifierbaselin": 14, "experiment_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "batch_predict": 16, "generate_episodes_and_calc_j": 17, "generate_resampled_dataset": 18, "has_fail": 19, "load_resampled_dataset": 20, "make_batch_epoch_dict_fixednit": 21, "make_batch_epoch_dict_min_sample_repeat": 22, "prep_feat_label": 23, "setup_sa_spec_for_exp": 24, "trial_arg_chunk": 25, "baselineexperi": 27, "fairlearnexperi": 29, "seldonianexperi": 30, "generate_plot": [31, 32, 33, 34], "plotgener": 32, "rlplotgener": 33, "supervisedplotgener": 34, "headless_exampl": [35, 36], "headlessexampl": 36, "perf_eval_func": [37, 38, 39, 40, 41, 42, 43], "mse": 38, "binary_logistic_loss": 39, "deterministic_accuraci": 40, "multiclass_accuraci": 41, "multiclass_logistic_loss": 42, "probabilistic_accuraci": 43, "api": 44, "seldonian": [45, 46], "document": 45, "tabl": 45, "content": 45, "overview": 46, "three": 46, "plot": 46, "gener": 46, "spec": 46, "object": 46, "n_trial": 46, "data_frac": 46, "datagen_method": 46, "n_worker": 46, "perf_eval_fn": 46, "perf_eval_kwarg": 46, "constraint_eval_fn": 46, "constraint_eval_kwarg": 46, "results_dir": 46, "file": 46, "an": 46}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"experiments": [[0, "module-experiments"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "experiments.base_example.BaseExample": [[2, "experiments-base-example-baseexample"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.decision_tree": [[4, "module-experiments.baselines.decision_tree"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[5, "experiments-baselines-decision-tree-decisiontreeclassifierbaseline"]], "experiments.baselines.linear_regression": [[6, "module-experiments.baselines.linear_regression"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[7, "experiments-baselines-linear-regression-linearregressionbaseline"]], "experiments.baselines.logistic_regression": [[8, "module-experiments.baselines.logistic_regression"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[9, "experiments-baselines-logistic-regression-binarylogisticregressionbaseline"]], "experiments.baselines.random_classifiers": [[10, "module-experiments.baselines.random_classifiers"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[11, "experiments-baselines-random-classifiers-uniformrandomclassifierbaseline"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[12, "experiments-baselines-random-classifiers-weightedrandomclassifierbaseline"]], "experiments.baselines.random_forest": [[13, "module-experiments.baselines.random_forest"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[14, "experiments-baselines-random-forest-randomforestclassifierbaseline"]], "experiments.experiment_utils": [[15, "module-experiments.experiment_utils"]], "experiments.experiment_utils.batch_predictions": [[16, "experiments-experiment-utils-batch-predictions"]], "experiments.experiment_utils.generate_episodes_and_calc_J": [[17, "experiments-experiment-utils-generate-episodes-and-calc-j"]], "experiments.experiment_utils.generate_resampled_datasets": [[18, "experiments-experiment-utils-generate-resampled-datasets"]], "experiments.experiment_utils.has_failed": [[19, "experiments-experiment-utils-has-failed"]], "experiments.experiment_utils.load_resampled_dataset": [[20, "experiments-experiment-utils-load-resampled-dataset"]], "experiments.experiment_utils.make_batch_epoch_dict_fixedniter": [[21, "experiments-experiment-utils-make-batch-epoch-dict-fixedniter"]], "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat": [[22, "experiments-experiment-utils-make-batch-epoch-dict-min-sample-repeat"]], "experiments.experiment_utils.prep_feat_labels": [[23, "experiments-experiment-utils-prep-feat-labels"]], "experiments.experiment_utils.setup_SA_spec_for_exp": [[24, "experiments-experiment-utils-setup-sa-spec-for-exp"]], "experiments.experiment_utils.trial_arg_chunker": [[25, "experiments-experiment-utils-trial-arg-chunker"]], "experiments.experiments": [[26, "module-experiments.experiments"]], "experiments.experiments.BaselineExperiment": [[27, "experiments-experiments-baselineexperiment"]], "experiments.experiments.Experiment": [[28, "experiments-experiments-experiment"]], "experiments.experiments.FairlearnExperiment": [[29, "experiments-experiments-fairlearnexperiment"]], "experiments.experiments.SeldonianExperiment": [[30, "experiments-experiments-seldonianexperiment"]], "experiments.generate_plots": [[31, "module-experiments.generate_plots"]], "experiments.generate_plots.PlotGenerator": [[32, "experiments-generate-plots-plotgenerator"]], "experiments.generate_plots.RLPlotGenerator": [[33, "experiments-generate-plots-rlplotgenerator"]], "experiments.generate_plots.SupervisedPlotGenerator": [[34, "experiments-generate-plots-supervisedplotgenerator"]], "experiments.headless_example": [[35, "module-experiments.headless_example"]], "experiments.headless_example.HeadlessExample": [[36, "experiments-headless-example-headlessexample"]], "experiments.perf_eval_funcs": [[37, "module-experiments.perf_eval_funcs"]], "experiments.perf_eval_funcs.MSE": [[38, "experiments-perf-eval-funcs-mse"]], "experiments.perf_eval_funcs.binary_logistic_loss": [[39, "experiments-perf-eval-funcs-binary-logistic-loss"]], "experiments.perf_eval_funcs.deterministic_accuracy": [[40, "experiments-perf-eval-funcs-deterministic-accuracy"]], "experiments.perf_eval_funcs.multiclass_accuracy": [[41, "experiments-perf-eval-funcs-multiclass-accuracy"]], "experiments.perf_eval_funcs.multiclass_logistic_loss": [[42, "experiments-perf-eval-funcs-multiclass-logistic-loss"]], "experiments.perf_eval_funcs.probabilistic_accuracy": [[43, "experiments-perf-eval-funcs-probabilistic-accuracy"]], "API": [[44, "api"]], "Seldonian Experiments documentation": [[45, "seldonian-experiments-documentation"]], "Table of contents": [[45, "table-of-contents"]], "Overview": [[46, "overview"]], "Seldonian experiments": [[46, "seldonian-experiments"]], "Three Plots": [[46, "three-plots"]], "Plot generator": [[46, "plot-generator"]], "Spec object": [[46, "spec-object"]], "n_trials": [[46, "n-trials"]], "data_fracs": [[46, "data-fracs"]], "datagen_method": [[46, "datagen-method"]], "n_workers": [[46, "n-workers"]], "perf_eval_fn": [[46, "perf-eval-fn"]], "perf_eval_kwargs": [[46, "perf-eval-kwargs"]], "constraint_eval_fns": [[46, "constraint-eval-fns"]], "constraint_eval_kwargs": [[46, "constraint-eval-kwargs"]], "results_dir": [[46, "results-dir"]], "Baselines": [[46, "baselines"]], "Files generated in an experiment": [[46, "files-generated-in-an-experiment"]]}, "indexentries": {"experiments": [[0, "module-experiments"]], "module": [[0, "module-experiments"], [1, "module-experiments.base_example"], [3, "module-experiments.baselines"], [4, "module-experiments.baselines.decision_tree"], [6, "module-experiments.baselines.linear_regression"], [8, "module-experiments.baselines.logistic_regression"], [10, "module-experiments.baselines.random_classifiers"], [13, "module-experiments.baselines.random_forest"], [15, "module-experiments.experiment_utils"], [26, "module-experiments.experiments"], [31, "module-experiments.generate_plots"], [35, "module-experiments.headless_example"], [37, "module-experiments.perf_eval_funcs"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "baseexample (class in experiments.base_example)": [[2, "experiments.base_example.BaseExample"]], "__init__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__init__"]], "__repr__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__repr__"]], "run() (baseexample method)": [[2, "experiments.base_example.BaseExample.run"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.decision_tree": [[4, "module-experiments.baselines.decision_tree"]], "decisiontreeclassifierbaseline (class in experiments.baselines.decision_tree)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline"]], "__init__() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__init__"]], "__repr__() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__repr__"]], "predict() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.predict"]], "train() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.train"]], "experiments.baselines.linear_regression": [[6, "module-experiments.baselines.linear_regression"]], "linearregressionbaseline (class in experiments.baselines.linear_regression)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline"]], "__init__() (linearregressionbaseline method)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline.__init__"]], "__repr__() (linearregressionbaseline method)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline.__repr__"]], "fit() (linearregressionbaseline method)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline.fit"]], "predict() (linearregressionbaseline method)": [[7, "experiments.baselines.linear_regression.LinearRegressionBaseline.predict"]], "experiments.baselines.logistic_regression": [[8, "module-experiments.baselines.logistic_regression"]], "binarylogisticregressionbaseline (class in experiments.baselines.logistic_regression)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline"]], "__init__() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__init__"]], "__repr__() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__repr__"]], "fit() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.fit"]], "predict() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.predict"]], "train() (binarylogisticregressionbaseline method)": [[9, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.train"]], "experiments.baselines.random_classifiers": [[10, "module-experiments.baselines.random_classifiers"]], "uniformrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[11, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline"]], "__init__() (uniformrandomclassifierbaseline method)": [[11, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__init__"]], "__repr__() (uniformrandomclassifierbaseline method)": [[11, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__repr__"]], "predict() (uniformrandomclassifierbaseline method)": [[11, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.predict"]], "weightedrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[12, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline"]], "__init__() (weightedrandomclassifierbaseline method)": [[12, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__init__"]], "__repr__() (weightedrandomclassifierbaseline method)": [[12, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__repr__"]], "predict() (weightedrandomclassifierbaseline method)": [[12, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.predict"]], "experiments.baselines.random_forest": [[13, "module-experiments.baselines.random_forest"]], "randomforestclassifierbaseline (class in experiments.baselines.random_forest)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline"]], "__init__() (randomforestclassifierbaseline method)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__init__"]], "__repr__() (randomforestclassifierbaseline method)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__repr__"]], "predict() (randomforestclassifierbaseline method)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline.predict"]], "train() (randomforestclassifierbaseline method)": [[14, "experiments.baselines.random_forest.RandomForestClassifierBaseline.train"]], "experiments.experiment_utils": [[15, "module-experiments.experiment_utils"]], "batch_predictions() (in module experiments.experiment_utils)": [[16, "experiments.experiment_utils.batch_predictions"]], "generate_episodes_and_calc_j() (in module experiments.experiment_utils)": [[17, "experiments.experiment_utils.generate_episodes_and_calc_J"]], "generate_resampled_datasets() (in module experiments.experiment_utils)": [[18, "experiments.experiment_utils.generate_resampled_datasets"]], "has_failed() (in module experiments.experiment_utils)": [[19, "experiments.experiment_utils.has_failed"]], "load_resampled_dataset() (in module experiments.experiment_utils)": [[20, "experiments.experiment_utils.load_resampled_dataset"]], "make_batch_epoch_dict_fixedniter() (in module experiments.experiment_utils)": [[21, "experiments.experiment_utils.make_batch_epoch_dict_fixedniter"]], "make_batch_epoch_dict_min_sample_repeat() (in module experiments.experiment_utils)": [[22, "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat"]], "prep_feat_labels() (in module experiments.experiment_utils)": [[23, "experiments.experiment_utils.prep_feat_labels"]], "setup_sa_spec_for_exp() (in module experiments.experiment_utils)": [[24, "experiments.experiment_utils.setup_SA_spec_for_exp"]], "trial_arg_chunker() (in module experiments.experiment_utils)": [[25, "experiments.experiment_utils.trial_arg_chunker"]], "experiments.experiments": [[26, "module-experiments.experiments"]], "baselineexperiment (class in experiments.experiments)": [[27, "experiments.experiments.BaselineExperiment"]], "__init__() (baselineexperiment method)": [[27, "experiments.experiments.BaselineExperiment.__init__"]], "__repr__() (baselineexperiment method)": [[27, "experiments.experiments.BaselineExperiment.__repr__"]], "aggregate_results() (baselineexperiment method)": [[27, "experiments.experiments.BaselineExperiment.aggregate_results"]], "evaluate_constraint_functions() (baselineexperiment method)": [[27, "experiments.experiments.BaselineExperiment.evaluate_constraint_functions"]], "run_baseline_trial() (baselineexperiment method)": [[27, "experiments.experiments.BaselineExperiment.run_baseline_trial"]], "run_experiment() (baselineexperiment method)": [[27, "experiments.experiments.BaselineExperiment.run_experiment"]], "write_trial_result() (baselineexperiment method)": [[27, "experiments.experiments.BaselineExperiment.write_trial_result"]], "experiment (class in experiments.experiments)": [[28, "experiments.experiments.Experiment"]], "__init__() (experiment method)": [[28, "experiments.experiments.Experiment.__init__"]], "__repr__() (experiment method)": [[28, "experiments.experiments.Experiment.__repr__"]], "aggregate_results() (experiment method)": [[28, "experiments.experiments.Experiment.aggregate_results"]], "write_trial_result() (experiment method)": [[28, "experiments.experiments.Experiment.write_trial_result"]], "fairlearnexperiment (class in experiments.experiments)": [[29, "experiments.experiments.FairlearnExperiment"]], "__init__() (fairlearnexperiment method)": [[29, "experiments.experiments.FairlearnExperiment.__init__"]], "__repr__() (fairlearnexperiment method)": [[29, "experiments.experiments.FairlearnExperiment.__repr__"]], "aggregate_results() (fairlearnexperiment method)": [[29, "experiments.experiments.FairlearnExperiment.aggregate_results"]], "evaluate_constraint_function() (fairlearnexperiment method)": [[29, "experiments.experiments.FairlearnExperiment.evaluate_constraint_function"]], "get_fairlearn_predictions() (fairlearnexperiment method)": [[29, "experiments.experiments.FairlearnExperiment.get_fairlearn_predictions"]], "run_experiment() (fairlearnexperiment method)": [[29, "experiments.experiments.FairlearnExperiment.run_experiment"]], "run_fairlearn_trial() (fairlearnexperiment method)": [[29, "experiments.experiments.FairlearnExperiment.run_fairlearn_trial"]], "write_trial_result() (fairlearnexperiment method)": [[29, "experiments.experiments.FairlearnExperiment.write_trial_result"]], "seldonianexperiment (class in experiments.experiments)": [[30, "experiments.experiments.SeldonianExperiment"]], "__init__() (seldonianexperiment method)": [[30, "experiments.experiments.SeldonianExperiment.__init__"]], "__repr__() (seldonianexperiment method)": [[30, "experiments.experiments.SeldonianExperiment.__repr__"]], "aggregate_results() (seldonianexperiment method)": [[30, "experiments.experiments.SeldonianExperiment.aggregate_results"]], "evaluate_constraint_functions() (seldonianexperiment method)": [[30, "experiments.experiments.SeldonianExperiment.evaluate_constraint_functions"]], "run_qsa_trial() (seldonianexperiment method)": [[30, "experiments.experiments.SeldonianExperiment.run_QSA_trial"]], "run_experiment() (seldonianexperiment method)": [[30, "experiments.experiments.SeldonianExperiment.run_experiment"]], "write_trial_result() (seldonianexperiment method)": [[30, "experiments.experiments.SeldonianExperiment.write_trial_result"]], "experiments.generate_plots": [[31, "module-experiments.generate_plots"]], "plotgenerator (class in experiments.generate_plots)": [[32, "experiments.generate_plots.PlotGenerator"]], "__init__() (plotgenerator method)": [[32, "experiments.generate_plots.PlotGenerator.__init__"]], "__repr__() (plotgenerator method)": [[32, "experiments.generate_plots.PlotGenerator.__repr__"]], "make_plots() (plotgenerator method)": [[32, "experiments.generate_plots.PlotGenerator.make_plots"]], "rlplotgenerator (class in experiments.generate_plots)": [[33, "experiments.generate_plots.RLPlotGenerator"]], "__init__() (rlplotgenerator method)": [[33, "experiments.generate_plots.RLPlotGenerator.__init__"]], "__repr__() (rlplotgenerator method)": [[33, "experiments.generate_plots.RLPlotGenerator.__repr__"]], "make_plots() (rlplotgenerator method)": [[33, "experiments.generate_plots.RLPlotGenerator.make_plots"]], "run_seldonian_experiment() (rlplotgenerator method)": [[33, "experiments.generate_plots.RLPlotGenerator.run_seldonian_experiment"]], "supervisedplotgenerator (class in experiments.generate_plots)": [[34, "experiments.generate_plots.SupervisedPlotGenerator"]], "__init__() (supervisedplotgenerator method)": [[34, "experiments.generate_plots.SupervisedPlotGenerator.__init__"]], "__repr__() (supervisedplotgenerator method)": [[34, "experiments.generate_plots.SupervisedPlotGenerator.__repr__"]], "make_plots() (supervisedplotgenerator method)": [[34, "experiments.generate_plots.SupervisedPlotGenerator.make_plots"]], "run_baseline_experiment() (supervisedplotgenerator method)": [[34, "experiments.generate_plots.SupervisedPlotGenerator.run_baseline_experiment"]], "run_fairlearn_experiment() (supervisedplotgenerator method)": [[34, "experiments.generate_plots.SupervisedPlotGenerator.run_fairlearn_experiment"]], "run_headless_seldonian_experiment() (supervisedplotgenerator method)": [[34, "experiments.generate_plots.SupervisedPlotGenerator.run_headless_seldonian_experiment"]], "run_seldonian_experiment() (supervisedplotgenerator method)": [[34, "experiments.generate_plots.SupervisedPlotGenerator.run_seldonian_experiment"]], "experiments.headless_example": [[35, "module-experiments.headless_example"]], "headlessexample (class in experiments.headless_example)": [[36, "experiments.headless_example.HeadlessExample"]], "__init__() (headlessexample method)": [[36, "experiments.headless_example.HeadlessExample.__init__"]], "__repr__() (headlessexample method)": [[36, "experiments.headless_example.HeadlessExample.__repr__"]], "run() (headlessexample method)": [[36, "experiments.headless_example.HeadlessExample.run"]], "experiments.perf_eval_funcs": [[37, "module-experiments.perf_eval_funcs"]], "mse() (in module experiments.perf_eval_funcs)": [[38, "experiments.perf_eval_funcs.MSE"]], "binary_logistic_loss() (in module experiments.perf_eval_funcs)": [[39, "experiments.perf_eval_funcs.binary_logistic_loss"]], "deterministic_accuracy() (in module experiments.perf_eval_funcs)": [[40, "experiments.perf_eval_funcs.deterministic_accuracy"]], "multiclass_accuracy() (in module experiments.perf_eval_funcs)": [[41, "experiments.perf_eval_funcs.multiclass_accuracy"]], "multiclass_logistic_loss() (in module experiments.perf_eval_funcs)": [[42, "experiments.perf_eval_funcs.multiclass_logistic_loss"]], "probabilistic_accuracy() (in module experiments.perf_eval_funcs)": [[43, "experiments.perf_eval_funcs.probabilistic_accuracy"]]}})