Search.setIndex({"docnames": ["_autosummary/experiments", "_autosummary/experiments.base_example", "_autosummary/experiments.base_example.BaseExample", "_autosummary/experiments.baselines", "_autosummary/experiments.baselines.decision_tree", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "_autosummary/experiments.baselines.decision_tree_leaf_tuning", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline", "_autosummary/experiments.baselines.diabetes_US_baseline", "_autosummary/experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline", "_autosummary/experiments.baselines.fitted_Q", "_autosummary/experiments.baselines.fitted_Q.BaseFittedQBaseline", "_autosummary/experiments.baselines.fitted_Q.TabularFittedQBaseline", "_autosummary/experiments.baselines.linear_regression", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline", "_autosummary/experiments.baselines.logistic_regression", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "_autosummary/experiments.baselines.random_classifiers", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "_autosummary/experiments.baselines.random_forest", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline", "_autosummary/experiments.experiment_utils", "_autosummary/experiments.experiment_utils.batch_predictions", "_autosummary/experiments.experiment_utils.generate_behavior_policy_episodes", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J", "_autosummary/experiments.experiment_utils.generate_resampled_datasets", "_autosummary/experiments.experiment_utils.has_failed", "_autosummary/experiments.experiment_utils.load_regenerated_episodes", "_autosummary/experiments.experiment_utils.load_resampled_dataset", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "_autosummary/experiments.experiment_utils.prep_feat_labels", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp", "_autosummary/experiments.experiment_utils.trial_arg_chunker", "_autosummary/experiments.experiments", "_autosummary/experiments.experiments.BaselineExperiment", "_autosummary/experiments.experiments.Experiment", "_autosummary/experiments.experiments.FairlearnExperiment", "_autosummary/experiments.experiments.SeldonianExperiment", "_autosummary/experiments.generate_plots", "_autosummary/experiments.generate_plots.PlotGenerator", "_autosummary/experiments.generate_plots.RLPlotGenerator", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator", "_autosummary/experiments.headless_example", "_autosummary/experiments.headless_example.HeadlessExample", "_autosummary/experiments.perf_eval_funcs", "_autosummary/experiments.perf_eval_funcs.MSE", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy", "api", "index", "overview"], "filenames": ["_autosummary/experiments.rst", "_autosummary/experiments.base_example.rst", "_autosummary/experiments.base_example.BaseExample.rst", "_autosummary/experiments.baselines.rst", "_autosummary/experiments.baselines.decision_tree.rst", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.rst", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.rst", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.rst", "_autosummary/experiments.baselines.diabetes_US_baseline.rst", "_autosummary/experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.rst", "_autosummary/experiments.baselines.fitted_Q.rst", "_autosummary/experiments.baselines.fitted_Q.BaseFittedQBaseline.rst", "_autosummary/experiments.baselines.fitted_Q.TabularFittedQBaseline.rst", "_autosummary/experiments.baselines.linear_regression.rst", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline.rst", "_autosummary/experiments.baselines.logistic_regression.rst", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.rst", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_forest.rst", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline.rst", "_autosummary/experiments.experiment_utils.rst", "_autosummary/experiments.experiment_utils.batch_predictions.rst", "_autosummary/experiments.experiment_utils.generate_behavior_policy_episodes.rst", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J.rst", "_autosummary/experiments.experiment_utils.generate_resampled_datasets.rst", "_autosummary/experiments.experiment_utils.has_failed.rst", "_autosummary/experiments.experiment_utils.load_regenerated_episodes.rst", "_autosummary/experiments.experiment_utils.load_resampled_dataset.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat.rst", "_autosummary/experiments.experiment_utils.prep_feat_labels.rst", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp.rst", "_autosummary/experiments.experiment_utils.trial_arg_chunker.rst", "_autosummary/experiments.experiments.rst", "_autosummary/experiments.experiments.BaselineExperiment.rst", "_autosummary/experiments.experiments.Experiment.rst", "_autosummary/experiments.experiments.FairlearnExperiment.rst", "_autosummary/experiments.experiments.SeldonianExperiment.rst", "_autosummary/experiments.generate_plots.rst", "_autosummary/experiments.generate_plots.PlotGenerator.rst", "_autosummary/experiments.generate_plots.RLPlotGenerator.rst", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator.rst", "_autosummary/experiments.headless_example.rst", "_autosummary/experiments.headless_example.HeadlessExample.rst", "_autosummary/experiments.perf_eval_funcs.rst", "_autosummary/experiments.perf_eval_funcs.MSE.rst", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy.rst", "api.rst", "index.rst", "overview.rst"], "titles": ["experiments", "experiments.base_example", "experiments.base_example.BaseExample", "experiments.baselines", "experiments.baselines.decision_tree", "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "experiments.baselines.decision_tree_leaf_tuning", "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline", "experiments.baselines.diabetes_US_baseline", "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline", "experiments.baselines.fitted_Q", "experiments.baselines.fitted_Q.BaseFittedQBaseline", "experiments.baselines.fitted_Q.TabularFittedQBaseline", "experiments.baselines.linear_regression", "experiments.baselines.linear_regression.LinearRegressionBaseline", "experiments.baselines.logistic_regression", "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "experiments.baselines.random_classifiers", "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "experiments.baselines.random_forest", "experiments.baselines.random_forest.RandomForestClassifierBaseline", "experiments.experiment_utils", "experiments.experiment_utils.batch_predictions", "experiments.experiment_utils.generate_behavior_policy_episodes", "experiments.experiment_utils.generate_episodes_and_calc_J", "experiments.experiment_utils.generate_resampled_datasets", "experiments.experiment_utils.has_failed", "experiments.experiment_utils.load_regenerated_episodes", "experiments.experiment_utils.load_resampled_dataset", "experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "experiments.experiment_utils.prep_feat_labels", "experiments.experiment_utils.setup_SA_spec_for_exp", "experiments.experiment_utils.trial_arg_chunker", "experiments.experiments", "experiments.experiments.BaselineExperiment", "experiments.experiments.Experiment", "experiments.experiments.FairlearnExperiment", "experiments.experiments.SeldonianExperiment", "experiments.generate_plots", "experiments.generate_plots.PlotGenerator", "experiments.generate_plots.RLPlotGenerator", "experiments.generate_plots.SupervisedPlotGenerator", "experiments.headless_example", "experiments.headless_example.HeadlessExample", "experiments.perf_eval_funcs", "experiments.perf_eval_funcs.MSE", "experiments.perf_eval_funcs.binary_logistic_loss", "experiments.perf_eval_funcs.deterministic_accuracy", "experiments.perf_eval_funcs.multiclass_accuracy", "experiments.perf_eval_funcs.multiclass_logistic_loss", "experiments.perf_eval_funcs.probabilistic_accuracy", "API", "Seldonian Experiments documentation", "Overview"], "terms": {"modul": [0, 1, 3, 35, 40, 44], "run": [0, 1, 2, 7, 9, 11, 30, 31, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 54, 55], "seldonian": [0, 11, 32, 35, 36, 39, 41, 42, 43], "gener": [0, 24, 25, 26, 29, 41, 42, 43, 54], "three": [0, 2, 40, 41, 42, 43, 45, 54], "plot": [0, 2, 27, 40, 41, 42, 43, 45, 54], "contain": [1, 11, 24, 32, 44, 55], "base": [1, 2, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 36, 37, 38, 39, 41, 42, 43, 44, 45], "class": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 55], "exampl": [1, 2, 11, 12, 44, 45, 55], "spec": [2, 33, 41, 42, 43, 45, 54], "object": [2, 5, 7, 9, 11, 12, 21, 32, 37, 41, 42, 43, 54], "__init__": [2, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 36, 37, 38, 39, 41, 42, 43, 45, 54], "__repr__": [2, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 36, 37, 38, 39, 41, 42, 43, 45, 54], "return": [2, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 25, 27, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 51, 55], "repr": [2, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 36, 37, 38, 39, 41, 42, 43, 45], "self": [2, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 36, 37, 38, 39, 41, 42, 43, 45], "method": [2, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 36, 37, 38, 39, 41, 42, 43, 45, 55], "n_trial": [2, 24, 26, 29, 34, 41, 42, 43, 45, 54], "data_frac": [2, 28, 29, 30, 31, 33, 34, 36, 38, 39, 41, 42, 43, 45, 54], "results_dir": [2, 28, 29, 33, 36, 37, 38, 39, 41, 42, 43, 45, 54], "perf_eval_fn": [2, 41, 42, 43, 45, 54], "n_worker": [2, 34, 41, 42, 43, 45, 54], "1": [2, 9, 11, 12, 16, 30, 31, 38, 41, 45, 49, 50, 52, 55], "datagen_method": [2, 33, 41, 42, 43, 45, 54], "resampl": [2, 26, 29, 41, 42, 43, 45, 55], "verbos": [2, 24, 28, 29, 36, 37, 38, 39, 42, 43, 45], "fals": [2, 11, 12, 24, 27, 28, 29, 32, 36, 37, 38, 39, 42, 43, 45, 55], "baselin": [2, 36, 37, 45, 54], "model_label_dict": [2, 41, 42, 43, 45], "include_fairlearn_model": 2, "fairlearn_kwarg": 2, "performance_label": [2, 41, 42, 43, 45], "perform": [2, 7, 41, 42, 43, 45, 54, 55], "performance_yscal": [2, 41, 42, 43, 45], "linear": [2, 14, 41, 42, 43, 45], "plot_savenam": [2, 45], "none": [2, 5, 21, 41, 42, 43, 45], "plot_save_format": 2, "pdf": [2, 41, 42, 43], "include_legend": [2, 41, 42, 43], "true": [2, 27, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 52, 55], "plot_fonts": [2, 45], "12": [2, 41, 42, 43, 45], "legend_fonts": [2, 41, 42, 43, 45], "8": [2, 41, 42, 43, 45], "thi": [2, 5, 7, 9, 11, 12, 21, 27, 29, 32, 41, 42, 43, 45, 54, 55], "ani": [2, 5, 7, 36, 37, 38, 39, 41, 42, 43, 45], "model": [2, 5, 7, 14, 16, 21, 23, 27, 36, 37, 38, 39, 41, 42, 43, 45, 49, 50, 52, 55], "includ": [2, 12, 16, 41, 42, 43, 45, 55], "paramet": [2, 5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 24, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 45, 47, 49, 50, 52, 55], "first": [2, 7, 11, 45, 55], "Then": [2, 7, 45], "produc": [2, 45, 55], "dt_kwarg": [5, 7], "implement": [5, 7, 9, 12, 14, 16, 18, 19, 21, 55], "decis": [5, 7], "tree": [5, 7, 36, 39, 41, 42, 43, 55], "classifi": [5, 7, 14, 16, 18, 19, 21, 55], "binari": [5, 7, 16, 21, 52], "classif": [5, 7, 16, 21, 50, 51, 52, 55], "task": [5, 7, 21], "keyword": [5, 7, 36, 39, 41, 42, 43], "argument": [5, 7, 36, 39, 41, 42, 43, 55], "scikit": [5, 7], "learn": [5, 7, 24, 26, 29, 36, 55], "": [5, 7, 11, 12, 31, 41, 42, 43], "decisiontreeclassifi": [5, 7], "take": [5, 7, 11], "predict": [5, 7, 14, 16, 18, 19, 21, 38, 47, 49, 50, 52, 54, 55], "theta": [5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 41, 42, 43], "x": [5, 7, 11, 12, 14, 16, 18, 19, 21], "us": [5, 7, 9, 11, 12, 14, 16, 21, 22, 24, 26, 27, 29, 36, 38, 39, 41, 42, 43, 49, 50, 52, 54, 55], "train": [5, 7, 9, 11, 12, 14, 16, 21, 36, 54, 55], "posit": [5, 7, 14, 16, 18, 19, 21, 55], "probabl": [5, 7, 11, 12, 16, 18, 19, 21, 50, 52, 55], "isn": [5, 7, 21], "t": [5, 7, 11, 12, 21, 31], "here": [5, 21, 55], "becaus": [5, 11, 12, 21, 55], "ar": [5, 7, 11, 12, 21, 26, 29, 30, 31, 38, 41, 42, 43, 54, 55], "fit": [5, 7, 11, 12, 14, 16, 21, 54], "param": [5, 7, 21], "weight": [5, 7, 9, 11, 12, 14, 16, 18, 19, 21, 36, 38, 39, 42], "case": [5, 21, 55], "featur": [5, 7, 11, 12, 14, 16, 18, 19, 21, 26, 29, 32, 38], "type": [5, 7, 14, 16, 18, 19, 21, 25, 36, 39, 41, 42, 43, 51, 55], "2d": [5, 7, 11, 12, 16, 21], "np": [5, 7, 16, 21, 30, 31, 36, 39, 55], "ndarrai": [5, 7, 11, 12, 14, 16, 18, 19, 21, 30, 31, 36, 39], "y": [5, 7, 11, 12, 14, 16, 21, 41, 42, 43, 47, 48, 49, 50, 51, 52], "instanti": [5, 7, 11, 12, 21], "new": [5, 7, 11, 12, 21, 24, 54, 55], "instanc": [5, 7, 11, 12, 21], "data": [5, 7, 16, 21, 27, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 51, 55], "label": [5, 7, 11, 12, 14, 16, 18, 19, 21, 26, 29, 32, 38, 41, 42, 43, 47, 49, 50, 52], "1d": [5, 7, 11, 12, 16, 21, 38], "primary_objective_fn": [7, 9, 54], "sub_regim": 7, "adam_kwarg": 7, "seldoniandecisiontre": 7, "leaf": 7, "node": 7, "tune": 7, "primary_object": 7, "The": [7, 11, 12, 14, 16, 18, 19, 24, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 49, 54, 55], "primari": [7, 55], "function": [7, 9, 11, 12, 22, 24, 26, 29, 30, 31, 32, 36, 38, 39, 41, 42, 43, 46, 55], "minim": [7, 9], "dure": [7, 36, 39], "process": [7, 30, 31], "sub": 7, "categori": 7, "ml": [7, 55], "problem": [7, 55], "e": [7, 9, 26, 36, 37, 41, 42, 43, 55], "g": [7, 27, 36, 37, 39, 41, 42, 43, 55], "pass": [7, 36, 39, 41, 42, 43, 55], "adam": [7, 54], "optim": [7, 30, 31], "theta_init": 7, "kwarg": [7, 9, 11, 12, 23, 25, 33, 36, 37, 38, 39, 41, 42, 43, 47, 48, 49, 50, 51, 52], "gradient": 7, "descent": 7, "initi": [7, 9], "begin": 7, "best_theta": 7, "A": [7, 11, 12, 30, 31, 41, 42, 43, 55], "wrapper": [7, 11, 12, 16], "around": 7, "sklearn": 7, "built": [7, 55], "numpi": [7, 11, 12, 14, 18, 19, 36, 39], "arrai": [7, 9, 11, 12, 16, 30, 31, 38, 47, 49, 50, 52, 55], "onli": [7, 36, 39, 41, 42, 43, 49, 52, 55], "order": [7, 41, 42, 43, 55], "from": [7, 11, 12, 14, 26, 36, 37, 38, 39, 41, 42, 43, 55], "left": [7, 41, 42, 43, 55], "right": [7, 27, 41, 42, 43, 55], "forward_pass": [7, 54], "do": [7, 41, 42, 43, 55], "forward": 7, "through": 7, "probs_pos_class": 7, "vector": [7, 11, 12, 36, 39], "leaf_nodes_hit": 7, "id": 7, "were": 7, "hit": 7, "each": [7, 11, 12, 16, 18, 19, 24, 26, 29, 30, 31, 36, 37, 38, 39, 41, 42, 43, 50, 52, 55], "sampl": [7, 9, 31, 47, 49, 55], "These": [7, 11, 12, 36, 37, 38, 39], "need": [7, 9, 11, 12, 24, 55], "comput": [7, 11], "jacobian": 7, "get_jacobian": [7, 54], "an": [7, 9, 11, 12, 36, 39, 41, 42, 43, 54], "d": [7, 30, 31], "_i": 7, "dtheta_j": 7, "where": [7, 12, 25, 30, 31, 41, 42, 43], "i": [7, 9, 11, 12, 16, 25, 26, 27, 31, 39, 41, 42, 43, 49, 50, 52, 54, 55], "over": [7, 11, 12, 42, 51], "datapoint": [7, 16], "j": [7, 16, 25], "result": [7, 11, 12, 29, 36, 37, 38, 39, 41, 42, 43, 55], "evalu": [7, 11, 12, 27, 36, 38, 39, 41, 42, 43, 54, 55], "which": [7, 11, 12, 24, 26, 29, 36, 37, 38, 39, 41, 42, 43, 55], "get_leaf_node_prob": [7, 54], "retriev": 7, "current": [7, 11, 12, 36, 39, 55], "call": [7, 55], "autograd": 7, "primit": 7, "workaround": 7, "sinc": [7, 42], "our": 7, "involv": [7, 55], "extern": 7, "librari": [7, 22, 43, 54, 55], "pred": 7, "rtype": 7, "same": [7, 12, 26, 29, 38, 41, 42, 43, 55], "shape": [7, 12, 16, 26, 29, 38], "set_leaf_node_valu": [7, 54], "prob": [7, 14, 18, 19, 41, 42, 43], "updat": [7, 11, 12], "actual": 7, "number": [7, 11, 12, 16, 24, 26, 30, 31, 32, 41, 42, 43, 55], "set": [7, 9, 12, 55], "wrapped_primary_object": [7, 54], "get": [7, 11, 12, 38], "via": [7, 55], "we": [7, 9, 11, 12, 38, 55], "want": [7, 9, 30, 31, 41, 42, 43, 55], "inherit": 7, "so": [7, 9, 11, 12], "arg": [7, 11], "initial_solut": 9, "env_kwarg": [9, 11, 12], "bb_crmin": 9, "5": [9, 14, 18, 19, 55], "0": [9, 11, 14, 18, 19, 49, 55], "bb_crmax": 9, "15": 9, "bb_cfmin": 9, "bb_cfmax": 9, "25": 9, "cr_shrink_factor": 9, "7320508075688772": 9, "cf_shrink_factor": 9, "rl": [9, 11, 12, 42, 55], "import": [9, 42], "unequ": 9, "support": [9, 36, 55], "u": 9, "fix": [9, 30, 31], "area": 9, "polici": [9, 11, 12, 24, 55], "In": [9, 55], "maxim": 9, "expect": [9, 25], "neg": 9, "set_new_param": [9, 54], "new_param": 9, "agent": [9, 11, 24], "dataset": [9, 11, 12, 26, 29, 32, 36, 38, 39, 41, 42, 43, 55], "cma": 9, "start": [9, 55], "random": [9, 21, 55], "parameter": [9, 11, 12], "model_nam": [11, 12, 36, 37, 39, 55], "regressor_class": [11, 12], "num_it": [11, 12], "100": [11, 12], "gamma": [11, 12], "q": [11, 12], "regressor": [11, 12], "must": [11, 31, 55], "have": [11, 12, 16, 18, 19, 55], "labl": 11, "two": [11, 38, 55], "child": [11, 19], "iter": [11, 12, 30, 31], "dictionari": [11, 30, 31, 41, 42, 43, 55], "environ": [11, 24], "specif": [11, 41, 42, 43], "kei": [11, 12, 30, 31, 41, 42, 43], "valu": [11, 12, 27, 30, 31, 36, 38, 39, 41, 42, 43, 55], "pair": [11, 12, 14], "float": [11, 12, 18, 19, 25, 27, 29, 36, 38, 39, 41, 42, 43, 51], "between": 11, "target": [11, 12], "get_max_q": [11, 12, 54], "ob": [11, 12], "max": [11, 12, 31, 55], "all": [11, 12, 38, 41, 42, 43, 51, 55], "possibl": 11, "action": [11, 12], "given": [11, 12, 32, 36, 39, 55], "observ": [11, 12, 16, 18, 19], "For": [11, 12, 38, 50, 52, 55], "max_a": [11, 12], "s_t": [11, 12], "term": [11, 12, 16], "get_next_ob": [11, 12, 54], "index": [11, 12, 29, 36, 38, 39], "next": [11, 12], "o": [11, 12], "transit": [11, 12], "sometim": [11, 12, 55], "trivial": [11, 12], "often": [11, 12, 55], "finit": [11, 12], "time": [11, 12, 31, 41, 42, 43, 55], "horizon": [11, 12], "episod": [11, 12, 24, 25, 42, 55], "get_probs_from_observations_and_act": [11, 12, 54], "behavior_action_prob": [11, 12], "obtain": [11, 12, 41, 42, 43, 55], "timestep": [11, 12], "singl": [11, 12, 36, 37, 38, 39, 55], "estim": [11, 12, 55], "propos": [11, 12], "trial": [11, 12, 24, 26, 29, 32, 36, 37, 38, 39, 41, 42, 43, 55], "behavior": [11, 12, 24, 27, 55], "under": [11, 12], "get_target": [11, 12, 54], "reward": [11, 12], "next_ob": [11, 12], "scalar": [11, 12], "state": [11, 12], "wa": [11, 12, 36, 39, 55], "real": [11, 12, 55], "instantiate_regressor": [11, 12, 54], "creat": [11, 12, 26, 29, 55], "should": [11, 12], "whatev": [11, 12], "you": [11, 12, 30, 31, 41, 42, 43, 54, 55], "readi": [11, 12], "make_x": [11, 12, 54], "make": [11, 12, 26, 40, 41, 42, 43, 54, 55], "make_regression_dataset": [11, 12, 54], "regress": [11, 12, 16, 55], "algorithm": [11, 12, 39, 41, 42, 43, 54, 55], "don": [11, 12], "remak": [11, 12], "everi": [11, 12, 30, 31, 55], "never": [11, 12], "chang": [11, 12], "doe": [11, 12, 55], "upon": [11, 12], "step": [11, 12], "list": [11, 12, 25, 36, 37, 38, 39, 41, 42, 43, 55], "tupl": [11, 12], "r": [11, 12], "whole": [11, 12], "boolean": [11, 12, 29, 55], "flag": [11, 12, 29, 55], "indic": [11, 12, 55], "whether": [11, 12, 27, 32, 36, 39, 41, 42, 43, 55], "make_i": [11, 12, 54], "next_observ": [11, 12], "One": [11, 12], "could": [11, 12], "speed": [11, 12], "up": [11, 12, 41, 42, 43], "can": [11, 12, 55], "That": [11, 12, 55], "depend": [11, 12, 55], "update_q_weight": [11, 12, 54], "basefittedqbaselin": [12, 54], "tabl": 12, "env": 12, "follow": [12, 55], "num_observ": 12, "int": [12, 26, 29, 30, 31, 32, 36, 38, 39, 41, 42, 43], "num_act": 12, "terminal_ob": 12, "termin": 12, "get_regressor_weight": [12, 54], "out": [12, 30, 31, 36, 37, 38, 39], "reshap": 12, "thei": [12, 41, 42, 43, 55], "one_hot_encod": [12, 54], "turn": 12, "one": [12, 38, 55], "hot": 12, "set_q_tabl": [12, 54], "linearregressionmodel": 14, "alwai": [14, 18, 19], "ha": [14, 18, 19, 55], "regardless": [14, 18, 19, 55], "input": [14, 18, 19, 26, 29, 55], "nxm": 14, "nx1": 14, "binarylogisticregressionmodel": 16, "logist": [16, 51, 55], "let": 16, "bia": 16, "provi": 16, "k": 16, "point": [16, 30, 31, 32, 38, 41, 42, 43, 51, 55], "length": [16, 55], "just": 16, "parent": [16, 24, 26, 36, 37, 38, 39], "randomclassifiermodel": [18, 19], "overrid": 19, "rf_kwarg": 21, "forest": 21, "util": [22, 24, 26, 29, 32], "rest": 22, "solut": [23, 36, 39, 41, 42, 43, 55], "x_test": 23, "hyperparameter_and_setting_dict": [24, 42], "save_dir": [24, 26], "reinforc": [24, 55], "dict": [24, 36, 39, 41, 42, 43], "etc": [24, 55], "str": [24, 26, 29, 36, 37, 38, 39, 41, 42, 43], "directori": [24, 26, 29, 36, 37, 38, 39, 41, 42, 43, 55], "save": [24, 26, 29, 36, 37, 38, 39, 41, 42, 43, 55], "regenerated_episod": 24, "calcul": [25, 47, 51], "discount": 25, "ground": [25, 36, 39, 41, 42, 43, 55], "truth": [25, 36, 39, 41, 42, 43, 55], "supervis": [26, 29, 36, 42, 43, 55], "replac": [26, 29, 55], "sensit": [26, 29, 32, 38], "attribut": [26, 29, 32, 42, 43], "version": [26, 29], "panda": 26, "datafram": 26, "origin": [26, 55], "file_format": 26, "format": 26, "option": [26, 38, 39, 41, 42, 43, 55], "csv": [26, 36, 37, 38, 39, 55], "pkl": [26, 55], "condit": 27, "unsaf": 27, "determin": [27, 36, 39, 41, 42, 43, 55], "failur": [27, 41, 42, 43, 55], "rate": [27, 41, 42, 43, 50, 52, 55], "most": 27, "constraint": [27, 36, 38, 39, 41, 42, 43, 55], "safe": [27, 36, 39, 55], "trial_i": [28, 29, 33, 36, 38, 39, 55], "orig_meta": 28, "fraction": [29, 30, 31, 36, 38, 39, 41, 42, 43, 49, 55], "niter": 30, "n_max": [30, 31], "batch_siz": [30, 31], "conveni": [30, 31], "figur": [30, 31, 38, 41, 42, 43, 55], "epoch": [30, 31], "necessari": [30, 31], "ensur": [30, 31], "total": [30, 31], "batch": [30, 31, 41, 42, 43], "size": [30, 31, 36, 38, 39, 41, 42, 43, 55], "maximum": [30, 31], "batch_epoch_dict": [30, 31, 33, 41, 42, 43, 45], "num_epoch": [30, 31], "niter_min": 31, "num_repeat": 31, "frac": [31, 41, 42, 43, 55], "seen": 31, "minimum": 31, "trial_dataset": 32, "n_point": 32, "include_sensitive_attr": 32, "prepar": 32, "bool": [32, 36, 37, 38, 39, 41, 42, 43], "prep": 32, "well": 32, "regim": [33, 55], "perf_eval_kwarg": [33, 41, 42, 43, 45, 54], "baseline_model": [36, 42, 43], "against": [36, 55], "compar": [36, 55], "string": [36, 37, 39], "name": [36, 37, 38, 39, 41, 42, 43, 55], "logistic_regress": [36, 37, 54, 55], "experiment": [36, 37, 38, 39], "aggregate_result": [36, 37, 38, 39, 54], "group": [36, 37, 38, 39], "togeth": [36, 37, 38, 39], "file": [36, 37, 38, 39, 41, 42, 43, 54], "evaluate_constraint_funct": [36, 38, 39, 54], "constraint_eval_fn": [36, 39, 41, 42, 43, 54], "constraint_eval_kwarg": [36, 39, 41, 42, 43, 45, 54], "helper": [36, 39], "found": [36, 39, 55], "empti": [36, 39, 41, 42, 43, 55], "default": [36, 38, 41, 42, 43, 55], "pars": [36, 39, 41, 42, 43, 55], "run_baseline_tri": [36, 54], "overal": [36, 38, 39, 41, 42, 43], "run_experi": [36, 38, 39, 54], "write_trial_result": [36, 37, 38, 39, 54], "colnam": [36, 37, 38, 39], "trial_dir": [36, 37, 38, 39], "write": [36, 37, 38, 39], "inform": [36, 37, 38, 39], "item": [36, 37, 38, 39], "compris": [36, 37, 38, 39, 55], "header": [36, 37, 38, 39], "print": [36, 37, 38, 39], "filenam": [36, 37, 38, 39, 41, 42, 43], "fairlearn_epsilon_constraint": [38, 43], "fairlearn": [38, 43, 55], "epsilon": 38, "threshold": [38, 55], "y_pred": [38, 47, 48, 49, 50, 51, 52], "test_label": 38, "fairlearn_constraint_nam": [38, 43], "epsilon_ev": 38, "eval_method": 38, "nativ": 38, "sensitive_featur": 38, "column": [38, 41, 42, 43], "consid": [38, 55], "get_fairlearn_predict": [38, 54], "mitig": 38, "x_test_fairlearn": 38, "consist": 38, "potenti": 38, "more": [38, 55], "than": [38, 55], "predictor": 38, "non": 38, "zero": 38, "how": [38, 55], "mani": [38, 55], "normal": 38, "across": 38, "test": [38, 55], "run_fairlearn_tri": [38, 54], "qsa": 39, "quasi": [39, 55], "candid": [39, 41, 42, 43], "select": [39, 41, 42, 43], "run_qsa_tri": [39, 54], "2": 41, "3": [41, 42, 43, 55], "v": 41, "amount": [41, 42, 43, 55], "error": [41, 42, 43, 47, 50, 52], "bar": [41, 42, 43], "proport": [41, 42, 43], "horizont": [41, 42, 43, 55], "axi": [41, 42, 43, 55], "signatur": [41, 42, 43], "func": [41, 42, 43], "worker": [41, 42, 43, 55], "multiprocess": [41, 42, 43], "If": [41, 42, 43, 54, 55], "provid": [41, 42, 43, 55], "extra": [41, 42, 43], "instruct": [41, 42, 43], "n_epoch": [41, 42, 43], "make_plot": [41, 42, 43, 54, 55], "ignore_model": [41, 42, 43], "fontsiz": [41, 42, 43], "title_fonts": [41, 42, 43], "ncols_legend": [41, 42, 43], "accuraci": [41, 42, 43, 55], "sr_label": [41, 42, 43], "fr_label": [41, 42, 43], "violat": [41, 42, 43], "performance_ylim": [41, 42, 43], "hoz_axis_label": [41, 42, 43], "show_confidence_level": [41, 42, 43], "marker_s": [41, 42, 43], "20": [41, 42, 43], "save_format": [41, 42, 43], "show_titl": [41, 42, 43], "custom_titl": [41, 42, 43], "savenam": [41, 42, 43], "look": [41, 42, 43, 55], "them": [41, 42, 43, 55], "shown": [41, 42, 43, 55], "legend": [41, 42, 43], "note": [41, 42, 43], "specifi": [41, 42, 43, 55], "appear": [41, 42, 43], "show": [41, 42, 43, 55], "font": [41, 42, 43], "text": [41, 42, 43], "middl": [41, 42, 43, 55], "scale": [41, 42, 43], "log": [41, 42, 43, 55], "limit": [41, 42, 43], "matplotlib": [41, 42, 43], "automat": [41, 42, 43], "what": [41, 42, 43, 55], "black": [41, 42, 43, 55], "dot": [41, 42, 43, 55], "line": [41, 42, 43, 55], "delta": [41, 42, 43, 55], "titl": [41, 42, 43], "top": [41, 42, 43, 55], "custom": [41, 42, 43, 55], "disk": [41, 42, 43], "plotgener": [42, 43, 54], "plot_importance_weight": [42, 54], "mean": [42, 47], "qsa_result": [42, 55], "folder": [42, 55], "relev": 42, "run_baseline_experi": [42, 43, 54, 55], "assign": [42, 43], "displai": [42, 43], "stdout": [42, 43], "while": [42, 43, 55], "run_seldonian_experi": [42, 43, 54, 55], "run_fairlearn_experi": [43, 54], "fairlearn_sensitive_feature_nam": 43, "fairlearn_epsilon_ev": 43, "fairlearn_eval_kwarg": 43, "run_headless_seldonian_experi": [43, 54], "full_pretraining_model": [43, 45], "initial_state_dict": 43, "headless_pretraining_model": [43, 45], "head_layer_nam": [43, 45], "latent_feature_shap": [43, 45], "loss_func_pretrain": [43, 45], "learning_rate_pretrain": [43, 45], "pretraining_devic": [43, 45], "batch_epoch_dict_pretrain": [43, 45], "safety_batch_size_pretrain": [43, 45], "1000": 43, "headless": [43, 45], "baseexampl": [45, 54], "squar": 47, "correct": 49, "best": 49, "when": [49, 50, 52, 55], "output": [49, 50, 52], "multi": [50, 51], "dimension": [50, 52], "averag": 51, "loss": 51, "welcom": 54, "design": 54, "help": [54, 55], "safeti": [54, 55], "sourc": 54, "code": [54, 55], "host": 54, "github": 54, "heavi": 54, "engin": [54, 55], "core": [54, 55], "complet": 54, "see": [54, 55], "overview": 54, "api": [54, 55], "base_exampl": 54, "decision_tre": 54, "decisiontreeclassifierbaselin": 54, "decision_tree_leaf_tun": 54, "decisiontreeclassifierleaftuningbaselin": 54, "diabetes_us_baselin": 54, "rldiabetesusagentbaselin": 54, "fitted_q": 54, "tabularfittedqbaselin": 54, "linear_regress": 54, "linearregressionbaselin": 54, "binarylogisticregressionbaselin": 54, "random_classifi": 54, "uniformrandomclassifierbaselin": 54, "weightedrandomclassifierbaselin": 54, "random_forest": 54, "randomforestclassifierbaselin": 54, "experiment_util": 54, "batch_predict": 54, "generate_behavior_policy_episod": 54, "generate_episodes_and_calc_j": 54, "generate_resampled_dataset": 54, "has_fail": 54, "load_regenerated_episod": 54, "load_resampled_dataset": 54, "make_batch_epoch_dict_fixednit": 54, "make_batch_epoch_dict_min_sample_repeat": 54, "prep_feat_label": 54, "setup_sa_spec_for_exp": 54, "trial_arg_chunk": 54, "baselineexperi": [54, 55], "fairlearnexperi": [54, 55], "seldonianexperi": 54, "generate_plot": 54, "rlplotgener": [54, 55], "supervisedplotgener": [54, 55], "headless_exampl": 54, "headlessexampl": 54, "perf_eval_func": 54, "mse": 54, "binary_logistic_loss": 54, "deterministic_accuraci": 54, "multiclass_accuraci": 54, "multiclass_logistic_loss": 54, "probabilistic_accuraci": 54, "document": 55, "explain": 55, "sa": 55, "detail": 55, "descript": 55, "machin": 55, "toolkit": 55, "homepag": 55, "heavili": 55, "wai": 55, "It": 55, "increas": 55, "some": 55, "satisfi": 55, "come": 55, "cost": 55, "reduc": 55, "understand": 55, "trade": 55, "off": 55, "cannot": 55, "No": 55, "despit": 55, "quantiti": 55, "assum": 55, "access": 55, "world": 55, "typic": 55, "instead": 55, "adopt": 55, "strategi": 55, "bootstrap": 55, "approxim": 55, "gpa": 55, "discuss": 55, "scienc": 55, "paper": 55, "panel": 55, "thoma": 55, "et": 55, "al": 55, "2019": 55, "fair": 55, "dispar": 55, "impact": 55, "green": 55, "dash": 55, "sever": 55, "standard": 55, "red": 55, "also": 55, "awar": 55, "blue": 55, "magenta": 55, "criteria": 55, "repres": 55, "confid": 55, "05": 55, "your": 55, "either": 55, "both": 55, "describ": 55, "requir": 55, "interfac": 55, "everyth": 55, "underli": 55, "uncertainti": 55, "multipli": 55, "within": 55, "differ": 55, "dimens": 55, "At": 55, "generate_episod": 55, "parallel": 55, "multipl": 55, "avail": 55, "independ": 55, "other": 55, "embarrassingli": 55, "program": 55, "less": 55, "explicitli": 55, "nsf": 55, "plot_gener": 55, "easi": 55, "develop": 55, "easili": 55, "add": 55, "own": 55, "ad": 55, "alreadi": 55, "p": 55, "abov": 55, "would": 55, "simpli": 55, "block": 55, "like": 55, "anoth": 55, "narrow": 55, "rang": 55, "progress": 55, "structur": 55, "insid": 55, "after": 55, "trial_data": 55, "data_frac_0": 55, "0010_trial_0": 55, "0010_trial_1": 55, "0010_trial_2": 55, "0010_trial_3": 55, "0010_trial_4": 55, "0022_trial_0": 55, "0022_trial_1": 55, "0022_trial_2": 55, "0022_trial_3": 55, "0022_trial_4": 55, "0046_trial_0": 55, "0046_trial_1": 55, "0046_trial_2": 55, "0046_trial_3": 55, "0046_trial_4": 55, "0050_trial_0": 55, "0100_trial_0": 55, "0100_trial_1": 55, "0100_trial_2": 55, "0100_trial_3": 55, "0100_trial_4": 55, "0215_trial_0": 55, "0215_trial_1": 55, "0215_trial_2": 55, "0215_trial_3": 55, "0215_trial_4": 55, "0464_trial_0": 55, "0464_trial_1": 55, "0464_trial_2": 55, "0464_trial_3": 55, "0464_trial_4": 55, "1000_trial_0": 55, "1000_trial_1": 55, "1000_trial_2": 55, "1000_trial_3": 55, "1000_trial_4": 55, "2154_trial_0": 55, "2154_trial_1": 55, "2154_trial_2": 55, "2154_trial_3": 55, "2154_trial_4": 55, "4642_trial_0": 55, "4642_trial_1": 55, "4642_trial_2": 55, "4642_trial_3": 55, "4642_trial_4": 55, "data_frac_1": 55, "0000_trial_0": 55, "0000_trial_1": 55, "0000_trial_2": 55, "0000_trial_3": 55, "0000_trial_4": 55, "resampled_dataset": 55, "resampled_data_trial0": 55, "resampled_data_trial1": 55, "resampled_data_trial2": 55, "resampled_data_trial3": 55, "resampled_data_trial4": 55, "logspac": 55, "10": 55, "space": 55, "001": 55, "end": 55, "As": 55, "50": 55, "fail": 55, "content": 55, "6105_trial36": 55, "passed_safeti": 55, "6105402296585326": 55, "36": 55, "6746247014792527": 55, "level": 55, "_result": 55, "logistic_regression_result": 55, "its": 55, "separ": 55, "curv": 55, "autom": 55, "loan": 55, "approv": 55, "system": 55, "tutori": 55}, "objects": {"": [[0, 0, 0, "-", "experiments"]], "experiments": [[1, 0, 0, "-", "base_example"], [3, 0, 0, "-", "baselines"], [22, 0, 0, "-", "experiment_utils"], [35, 0, 0, "-", "experiments"], [40, 0, 0, "-", "generate_plots"], [44, 0, 0, "-", "headless_example"], [46, 0, 0, "-", "perf_eval_funcs"]], "experiments.base_example": [[2, 1, 1, "", "BaseExample"]], "experiments.base_example.BaseExample": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "__repr__"], [2, 2, 1, "", "run"]], "experiments.baselines": [[4, 0, 0, "-", "decision_tree"], [6, 0, 0, "-", "decision_tree_leaf_tuning"], [8, 0, 0, "-", "diabetes_US_baseline"], [10, 0, 0, "-", "fitted_Q"], [13, 0, 0, "-", "linear_regression"], [15, 0, 0, "-", "logistic_regression"], [17, 0, 0, "-", "random_classifiers"], [20, 0, 0, "-", "random_forest"]], "experiments.baselines.decision_tree": [[5, 1, 1, "", "DecisionTreeClassifierBaseline"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "__repr__"], [5, 2, 1, "", "predict"], [5, 2, 1, "", "train"]], "experiments.baselines.decision_tree_leaf_tuning": [[7, 1, 1, "", "DecisionTreeClassifierLeafTuningBaseline"]], "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "__repr__"], [7, 2, 1, "", "adam"], [7, 2, 1, "", "fit"], [7, 2, 1, "", "forward_pass"], [7, 2, 1, "", "get_jacobian"], [7, 2, 1, "", "get_leaf_node_probs"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "set_leaf_node_values"], [7, 2, 1, "", "train"], [7, 2, 1, "", "wrapped_primary_objective"]], "experiments.baselines.diabetes_US_baseline": [[9, 1, 1, "", "RLDiabetesUSAgentBaseline"]], "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "__repr__"], [9, 2, 1, "", "primary_objective_fn"], [9, 2, 1, "", "set_new_params"], [9, 2, 1, "", "train"]], "experiments.baselines.fitted_Q": [[11, 1, 1, "", "BaseFittedQBaseline"], [12, 1, 1, "", "TabularFittedQBaseline"]], "experiments.baselines.fitted_Q.BaseFittedQBaseline": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "__repr__"], [11, 2, 1, "", "get_max_q"], [11, 2, 1, "", "get_next_obs"], [11, 2, 1, "", "get_probs_from_observations_and_actions"], [11, 2, 1, "", "get_target"], [11, 2, 1, "", "instantiate_regressor"], [11, 2, 1, "", "make_X"], [11, 2, 1, "", "make_regression_dataset"], [11, 2, 1, "", "make_y"], [11, 2, 1, "", "train"], [11, 2, 1, "", "update_Q_weights"]], "experiments.baselines.fitted_Q.TabularFittedQBaseline": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "__repr__"], [12, 2, 1, "", "get_max_q"], [12, 2, 1, "", "get_next_obs"], [12, 2, 1, "", "get_probs_from_observations_and_actions"], [12, 2, 1, "", "get_regressor_weights"], [12, 2, 1, "", "get_target"], [12, 2, 1, "", "instantiate_regressor"], [12, 2, 1, "", "make_X"], [12, 2, 1, "", "make_regression_dataset"], [12, 2, 1, "", "make_y"], [12, 2, 1, "", "one_hot_encode"], [12, 2, 1, "", "set_q_table"], [12, 2, 1, "", "train"], [12, 2, 1, "", "update_Q_weights"]], "experiments.baselines.linear_regression": [[14, 1, 1, "", "LinearRegressionBaseline"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "__repr__"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "predict"]], "experiments.baselines.logistic_regression": [[16, 1, 1, "", "BinaryLogisticRegressionBaseline"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "__repr__"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "train"]], "experiments.baselines.random_classifiers": [[18, 1, 1, "", "UniformRandomClassifierBaseline"], [19, 1, 1, "", "WeightedRandomClassifierBaseline"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "predict"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "__repr__"], [19, 2, 1, "", "predict"]], "experiments.baselines.random_forest": [[21, 1, 1, "", "RandomForestClassifierBaseline"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "__repr__"], [21, 2, 1, "", "predict"], [21, 2, 1, "", "train"]], "experiments.experiment_utils": [[23, 3, 1, "", "batch_predictions"], [24, 3, 1, "", "generate_behavior_policy_episodes"], [25, 3, 1, "", "generate_episodes_and_calc_J"], [26, 3, 1, "", "generate_resampled_datasets"], [27, 3, 1, "", "has_failed"], [28, 3, 1, "", "load_regenerated_episodes"], [29, 3, 1, "", "load_resampled_dataset"], [30, 3, 1, "", "make_batch_epoch_dict_fixedniter"], [31, 3, 1, "", "make_batch_epoch_dict_min_sample_repeat"], [32, 3, 1, "", "prep_feat_labels"], [33, 3, 1, "", "setup_SA_spec_for_exp"], [34, 3, 1, "", "trial_arg_chunker"]], "experiments.experiments": [[36, 1, 1, "", "BaselineExperiment"], [37, 1, 1, "", "Experiment"], [38, 1, 1, "", "FairlearnExperiment"], [39, 1, 1, "", "SeldonianExperiment"]], "experiments.experiments.BaselineExperiment": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "__repr__"], [36, 2, 1, "", "aggregate_results"], [36, 2, 1, "", "evaluate_constraint_functions"], [36, 2, 1, "", "run_baseline_trial"], [36, 2, 1, "", "run_experiment"], [36, 2, 1, "", "write_trial_result"]], "experiments.experiments.Experiment": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "__repr__"], [37, 2, 1, "", "aggregate_results"], [37, 2, 1, "", "write_trial_result"]], "experiments.experiments.FairlearnExperiment": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "__repr__"], [38, 2, 1, "", "aggregate_results"], [38, 2, 1, "", "evaluate_constraint_function"], [38, 2, 1, "", "get_fairlearn_predictions"], [38, 2, 1, "", "run_experiment"], [38, 2, 1, "", "run_fairlearn_trial"], [38, 2, 1, "", "write_trial_result"]], "experiments.experiments.SeldonianExperiment": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "__repr__"], [39, 2, 1, "", "aggregate_results"], [39, 2, 1, "", "evaluate_constraint_functions"], [39, 2, 1, "", "run_QSA_trial"], [39, 2, 1, "", "run_experiment"], [39, 2, 1, "", "write_trial_result"]], "experiments.generate_plots": [[41, 1, 1, "", "PlotGenerator"], [42, 1, 1, "", "RLPlotGenerator"], [43, 1, 1, "", "SupervisedPlotGenerator"]], "experiments.generate_plots.PlotGenerator": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "__repr__"], [41, 2, 1, "", "make_plots"]], "experiments.generate_plots.RLPlotGenerator": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "__repr__"], [42, 2, 1, "", "make_plots"], [42, 2, 1, "", "plot_importance_weights"], [42, 2, 1, "", "run_baseline_experiment"], [42, 2, 1, "", "run_seldonian_experiment"]], "experiments.generate_plots.SupervisedPlotGenerator": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "__repr__"], [43, 2, 1, "", "make_plots"], [43, 2, 1, "", "run_baseline_experiment"], [43, 2, 1, "", "run_fairlearn_experiment"], [43, 2, 1, "", "run_headless_seldonian_experiment"], [43, 2, 1, "", "run_seldonian_experiment"]], "experiments.headless_example": [[45, 1, 1, "", "HeadlessExample"]], "experiments.headless_example.HeadlessExample": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "__repr__"], [45, 2, 1, "", "run"]], "experiments.perf_eval_funcs": [[47, 3, 1, "", "MSE"], [48, 3, 1, "", "binary_logistic_loss"], [49, 3, 1, "", "deterministic_accuracy"], [50, 3, 1, "", "multiclass_accuracy"], [51, 3, 1, "", "multiclass_logistic_loss"], [52, 3, 1, "", "probabilistic_accuracy"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"experi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55], "base_exampl": [1, 2], "baseexampl": 2, "baselin": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 55], "decision_tre": [4, 5], "decisiontreeclassifierbaselin": 5, "decision_tree_leaf_tun": [6, 7], "decisiontreeclassifierleaftuningbaselin": 7, "diabetes_us_baselin": [8, 9], "rldiabetesusagentbaselin": 9, "fitted_q": [10, 11, 12], "basefittedqbaselin": 11, "tabularfittedqbaselin": 12, "linear_regress": [13, 14], "linearregressionbaselin": 14, "logistic_regress": [15, 16], "binarylogisticregressionbaselin": 16, "random_classifi": [17, 18, 19], "uniformrandomclassifierbaselin": 18, "weightedrandomclassifierbaselin": 19, "random_forest": [20, 21], "randomforestclassifierbaselin": 21, "experiment_util": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "batch_predict": 23, "generate_behavior_policy_episod": 24, "generate_episodes_and_calc_j": 25, "generate_resampled_dataset": 26, "has_fail": 27, "load_regenerated_episod": 28, "load_resampled_dataset": 29, "make_batch_epoch_dict_fixednit": 30, "make_batch_epoch_dict_min_sample_repeat": 31, "prep_feat_label": 32, "setup_sa_spec_for_exp": 33, "trial_arg_chunk": 34, "baselineexperi": 36, "fairlearnexperi": 38, "seldonianexperi": 39, "generate_plot": [40, 41, 42, 43], "plotgener": 41, "rlplotgener": 42, "supervisedplotgener": 43, "headless_exampl": [44, 45], "headlessexampl": 45, "perf_eval_func": [46, 47, 48, 49, 50, 51, 52], "mse": 47, "binary_logistic_loss": 48, "deterministic_accuraci": 49, "multiclass_accuraci": 50, "multiclass_logistic_loss": 51, "probabilistic_accuraci": 52, "api": 53, "seldonian": [54, 55], "document": 54, "tabl": 54, "content": 54, "overview": 55, "three": 55, "plot": 55, "gener": 55, "spec": 55, "object": 55, "n_trial": 55, "data_frac": 55, "datagen_method": 55, "n_worker": 55, "perf_eval_fn": 55, "perf_eval_kwarg": 55, "constraint_eval_fn": 55, "constraint_eval_kwarg": 55, "results_dir": 55, "file": 55, "an": 55}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"experiments": [[0, "module-experiments"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "experiments.base_example.BaseExample": [[2, "experiments-base-example-baseexample"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.decision_tree": [[4, "module-experiments.baselines.decision_tree"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[5, "experiments-baselines-decision-tree-decisiontreeclassifierbaseline"]], "experiments.baselines.decision_tree_leaf_tuning": [[6, "module-experiments.baselines.decision_tree_leaf_tuning"]], "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline": [[7, "experiments-baselines-decision-tree-leaf-tuning-decisiontreeclassifierleaftuningbaseline"]], "experiments.baselines.diabetes_US_baseline": [[8, "module-experiments.baselines.diabetes_US_baseline"]], "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline": [[9, "experiments-baselines-diabetes-us-baseline-rldiabetesusagentbaseline"]], "experiments.baselines.fitted_Q": [[10, "module-experiments.baselines.fitted_Q"]], "experiments.baselines.fitted_Q.BaseFittedQBaseline": [[11, "experiments-baselines-fitted-q-basefittedqbaseline"]], "experiments.baselines.fitted_Q.TabularFittedQBaseline": [[12, "experiments-baselines-fitted-q-tabularfittedqbaseline"]], "experiments.baselines.linear_regression": [[13, "module-experiments.baselines.linear_regression"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[14, "experiments-baselines-linear-regression-linearregressionbaseline"]], "experiments.baselines.logistic_regression": [[15, "module-experiments.baselines.logistic_regression"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[16, "experiments-baselines-logistic-regression-binarylogisticregressionbaseline"]], "experiments.baselines.random_classifiers": [[17, "module-experiments.baselines.random_classifiers"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[18, "experiments-baselines-random-classifiers-uniformrandomclassifierbaseline"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[19, "experiments-baselines-random-classifiers-weightedrandomclassifierbaseline"]], "experiments.baselines.random_forest": [[20, "module-experiments.baselines.random_forest"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[21, "experiments-baselines-random-forest-randomforestclassifierbaseline"]], "experiments.experiment_utils": [[22, "module-experiments.experiment_utils"]], "experiments.experiment_utils.batch_predictions": [[23, "experiments-experiment-utils-batch-predictions"]], "experiments.experiment_utils.generate_behavior_policy_episodes": [[24, "experiments-experiment-utils-generate-behavior-policy-episodes"]], "experiments.experiment_utils.generate_episodes_and_calc_J": [[25, "experiments-experiment-utils-generate-episodes-and-calc-j"]], "experiments.experiment_utils.generate_resampled_datasets": [[26, "experiments-experiment-utils-generate-resampled-datasets"]], "experiments.experiment_utils.has_failed": [[27, "experiments-experiment-utils-has-failed"]], "experiments.experiment_utils.load_regenerated_episodes": [[28, "experiments-experiment-utils-load-regenerated-episodes"]], "experiments.experiment_utils.load_resampled_dataset": [[29, "experiments-experiment-utils-load-resampled-dataset"]], "experiments.experiment_utils.make_batch_epoch_dict_fixedniter": [[30, "experiments-experiment-utils-make-batch-epoch-dict-fixedniter"]], "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat": [[31, "experiments-experiment-utils-make-batch-epoch-dict-min-sample-repeat"]], "experiments.experiment_utils.prep_feat_labels": [[32, "experiments-experiment-utils-prep-feat-labels"]], "experiments.experiment_utils.setup_SA_spec_for_exp": [[33, "experiments-experiment-utils-setup-sa-spec-for-exp"]], "experiments.experiment_utils.trial_arg_chunker": [[34, "experiments-experiment-utils-trial-arg-chunker"]], "experiments.experiments": [[35, "module-experiments.experiments"]], "experiments.experiments.BaselineExperiment": [[36, "experiments-experiments-baselineexperiment"]], "experiments.experiments.Experiment": [[37, "experiments-experiments-experiment"]], "experiments.experiments.FairlearnExperiment": [[38, "experiments-experiments-fairlearnexperiment"]], "experiments.experiments.SeldonianExperiment": [[39, "experiments-experiments-seldonianexperiment"]], "experiments.generate_plots": [[40, "module-experiments.generate_plots"]], "experiments.generate_plots.PlotGenerator": [[41, "experiments-generate-plots-plotgenerator"]], "experiments.generate_plots.RLPlotGenerator": [[42, "experiments-generate-plots-rlplotgenerator"]], "experiments.generate_plots.SupervisedPlotGenerator": [[43, "experiments-generate-plots-supervisedplotgenerator"]], "experiments.headless_example": [[44, "module-experiments.headless_example"]], "experiments.headless_example.HeadlessExample": [[45, "experiments-headless-example-headlessexample"]], "experiments.perf_eval_funcs": [[46, "module-experiments.perf_eval_funcs"]], "experiments.perf_eval_funcs.MSE": [[47, "experiments-perf-eval-funcs-mse"]], "experiments.perf_eval_funcs.binary_logistic_loss": [[48, "experiments-perf-eval-funcs-binary-logistic-loss"]], "experiments.perf_eval_funcs.deterministic_accuracy": [[49, "experiments-perf-eval-funcs-deterministic-accuracy"]], "experiments.perf_eval_funcs.multiclass_accuracy": [[50, "experiments-perf-eval-funcs-multiclass-accuracy"]], "experiments.perf_eval_funcs.multiclass_logistic_loss": [[51, "experiments-perf-eval-funcs-multiclass-logistic-loss"]], "experiments.perf_eval_funcs.probabilistic_accuracy": [[52, "experiments-perf-eval-funcs-probabilistic-accuracy"]], "API": [[53, "api"]], "Seldonian Experiments documentation": [[54, "seldonian-experiments-documentation"]], "Table of contents": [[54, "table-of-contents"]], "Overview": [[55, "overview"]], "Seldonian experiments": [[55, "seldonian-experiments"]], "Three Plots": [[55, "three-plots"]], "Plot generator": [[55, "plot-generator"]], "Spec object": [[55, "spec-object"]], "n_trials": [[55, "n-trials"]], "data_fracs": [[55, "data-fracs"]], "datagen_method": [[55, "datagen-method"]], "n_workers": [[55, "n-workers"]], "perf_eval_fn": [[55, "perf-eval-fn"]], "perf_eval_kwargs": [[55, "perf-eval-kwargs"]], "constraint_eval_fns": [[55, "constraint-eval-fns"]], "constraint_eval_kwargs": [[55, "constraint-eval-kwargs"]], "results_dir": [[55, "results-dir"]], "Baselines": [[55, "baselines"]], "Files generated in an experiment": [[55, "files-generated-in-an-experiment"]]}, "indexentries": {"experiments": [[0, "module-experiments"]], "module": [[0, "module-experiments"], [1, "module-experiments.base_example"], [3, "module-experiments.baselines"], [4, "module-experiments.baselines.decision_tree"], [6, "module-experiments.baselines.decision_tree_leaf_tuning"], [8, "module-experiments.baselines.diabetes_US_baseline"], [10, "module-experiments.baselines.fitted_Q"], [13, "module-experiments.baselines.linear_regression"], [15, "module-experiments.baselines.logistic_regression"], [17, "module-experiments.baselines.random_classifiers"], [20, "module-experiments.baselines.random_forest"], [22, "module-experiments.experiment_utils"], [35, "module-experiments.experiments"], [40, "module-experiments.generate_plots"], [44, "module-experiments.headless_example"], [46, "module-experiments.perf_eval_funcs"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "baseexample (class in experiments.base_example)": [[2, "experiments.base_example.BaseExample"]], "__init__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__init__"]], "__repr__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__repr__"]], "run() (baseexample method)": [[2, "experiments.base_example.BaseExample.run"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.decision_tree": [[4, "module-experiments.baselines.decision_tree"]], "decisiontreeclassifierbaseline (class in experiments.baselines.decision_tree)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline"]], "__init__() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__init__"]], "__repr__() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__repr__"]], "predict() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.predict"]], "train() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.train"]], "experiments.baselines.decision_tree_leaf_tuning": [[6, "module-experiments.baselines.decision_tree_leaf_tuning"]], "decisiontreeclassifierleaftuningbaseline (class in experiments.baselines.decision_tree_leaf_tuning)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline"]], "__init__() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.__init__"]], "__repr__() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.__repr__"]], "adam() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.adam"]], "fit() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.fit"]], "forward_pass() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.forward_pass"]], "get_jacobian() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.get_jacobian"]], "get_leaf_node_probs() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.get_leaf_node_probs"]], "predict() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.predict"]], "set_leaf_node_values() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.set_leaf_node_values"]], "train() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.train"]], "wrapped_primary_objective() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.wrapped_primary_objective"]], "experiments.baselines.diabetes_us_baseline": [[8, "module-experiments.baselines.diabetes_US_baseline"]], "rldiabetesusagentbaseline (class in experiments.baselines.diabetes_us_baseline)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline"]], "__init__() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.__init__"]], "__repr__() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.__repr__"]], "primary_objective_fn() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.primary_objective_fn"]], "set_new_params() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.set_new_params"]], "train() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.train"]], "experiments.baselines.fitted_q": [[10, "module-experiments.baselines.fitted_Q"]], "basefittedqbaseline (class in experiments.baselines.fitted_q)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline"]], "__init__() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.__init__"]], "__repr__() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.__repr__"]], "get_max_q() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.get_max_q"]], "get_next_obs() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.get_next_obs"]], "get_probs_from_observations_and_actions() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.get_probs_from_observations_and_actions"]], "get_target() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.get_target"]], "instantiate_regressor() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.instantiate_regressor"]], "make_x() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.make_X"]], "make_regression_dataset() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.make_regression_dataset"]], "make_y() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.make_y"]], "train() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.train"]], "update_q_weights() (basefittedqbaseline method)": [[11, "experiments.baselines.fitted_Q.BaseFittedQBaseline.update_Q_weights"]], "tabularfittedqbaseline (class in experiments.baselines.fitted_q)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline"]], "__init__() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.__init__"]], "__repr__() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.__repr__"]], "get_max_q() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.get_max_q"]], "get_next_obs() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.get_next_obs"]], "get_probs_from_observations_and_actions() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.get_probs_from_observations_and_actions"]], "get_regressor_weights() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.get_regressor_weights"]], "get_target() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.get_target"]], "instantiate_regressor() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.instantiate_regressor"]], "make_x() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.make_X"]], "make_regression_dataset() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.make_regression_dataset"]], "make_y() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.make_y"]], "one_hot_encode() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.one_hot_encode"]], "set_q_table() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.set_q_table"]], "train() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.train"]], "update_q_weights() (tabularfittedqbaseline method)": [[12, "experiments.baselines.fitted_Q.TabularFittedQBaseline.update_Q_weights"]], "experiments.baselines.linear_regression": [[13, "module-experiments.baselines.linear_regression"]], "linearregressionbaseline (class in experiments.baselines.linear_regression)": [[14, "experiments.baselines.linear_regression.LinearRegressionBaseline"]], "__init__() (linearregressionbaseline method)": [[14, "experiments.baselines.linear_regression.LinearRegressionBaseline.__init__"]], "__repr__() (linearregressionbaseline method)": [[14, "experiments.baselines.linear_regression.LinearRegressionBaseline.__repr__"]], "fit() (linearregressionbaseline method)": [[14, "experiments.baselines.linear_regression.LinearRegressionBaseline.fit"]], "predict() (linearregressionbaseline method)": [[14, "experiments.baselines.linear_regression.LinearRegressionBaseline.predict"]], "experiments.baselines.logistic_regression": [[15, "module-experiments.baselines.logistic_regression"]], "binarylogisticregressionbaseline (class in experiments.baselines.logistic_regression)": [[16, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline"]], "__init__() (binarylogisticregressionbaseline method)": [[16, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__init__"]], "__repr__() (binarylogisticregressionbaseline method)": [[16, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__repr__"]], "fit() (binarylogisticregressionbaseline method)": [[16, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.fit"]], "predict() (binarylogisticregressionbaseline method)": [[16, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.predict"]], "train() (binarylogisticregressionbaseline method)": [[16, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.train"]], "experiments.baselines.random_classifiers": [[17, "module-experiments.baselines.random_classifiers"]], "uniformrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[18, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline"]], "__init__() (uniformrandomclassifierbaseline method)": [[18, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__init__"]], "__repr__() (uniformrandomclassifierbaseline method)": [[18, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__repr__"]], "predict() (uniformrandomclassifierbaseline method)": [[18, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.predict"]], "weightedrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[19, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline"]], "__init__() (weightedrandomclassifierbaseline method)": [[19, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__init__"]], "__repr__() (weightedrandomclassifierbaseline method)": [[19, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__repr__"]], "predict() (weightedrandomclassifierbaseline method)": [[19, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.predict"]], "experiments.baselines.random_forest": [[20, "module-experiments.baselines.random_forest"]], "randomforestclassifierbaseline (class in experiments.baselines.random_forest)": [[21, "experiments.baselines.random_forest.RandomForestClassifierBaseline"]], "__init__() (randomforestclassifierbaseline method)": [[21, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__init__"]], "__repr__() (randomforestclassifierbaseline method)": [[21, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__repr__"]], "predict() (randomforestclassifierbaseline method)": [[21, "experiments.baselines.random_forest.RandomForestClassifierBaseline.predict"]], "train() (randomforestclassifierbaseline method)": [[21, "experiments.baselines.random_forest.RandomForestClassifierBaseline.train"]], "experiments.experiment_utils": [[22, "module-experiments.experiment_utils"]], "batch_predictions() (in module experiments.experiment_utils)": [[23, "experiments.experiment_utils.batch_predictions"]], "generate_behavior_policy_episodes() (in module experiments.experiment_utils)": [[24, "experiments.experiment_utils.generate_behavior_policy_episodes"]], "generate_episodes_and_calc_j() (in module experiments.experiment_utils)": [[25, "experiments.experiment_utils.generate_episodes_and_calc_J"]], "generate_resampled_datasets() (in module experiments.experiment_utils)": [[26, "experiments.experiment_utils.generate_resampled_datasets"]], "has_failed() (in module experiments.experiment_utils)": [[27, "experiments.experiment_utils.has_failed"]], "load_regenerated_episodes() (in module experiments.experiment_utils)": [[28, "experiments.experiment_utils.load_regenerated_episodes"]], "load_resampled_dataset() (in module experiments.experiment_utils)": [[29, "experiments.experiment_utils.load_resampled_dataset"]], "make_batch_epoch_dict_fixedniter() (in module experiments.experiment_utils)": [[30, "experiments.experiment_utils.make_batch_epoch_dict_fixedniter"]], "make_batch_epoch_dict_min_sample_repeat() (in module experiments.experiment_utils)": [[31, "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat"]], "prep_feat_labels() (in module experiments.experiment_utils)": [[32, "experiments.experiment_utils.prep_feat_labels"]], "setup_sa_spec_for_exp() (in module experiments.experiment_utils)": [[33, "experiments.experiment_utils.setup_SA_spec_for_exp"]], "trial_arg_chunker() (in module experiments.experiment_utils)": [[34, "experiments.experiment_utils.trial_arg_chunker"]], "experiments.experiments": [[35, "module-experiments.experiments"]], "baselineexperiment (class in experiments.experiments)": [[36, "experiments.experiments.BaselineExperiment"]], "__init__() (baselineexperiment method)": [[36, "experiments.experiments.BaselineExperiment.__init__"]], "__repr__() (baselineexperiment method)": [[36, "experiments.experiments.BaselineExperiment.__repr__"]], "aggregate_results() (baselineexperiment method)": [[36, "experiments.experiments.BaselineExperiment.aggregate_results"]], "evaluate_constraint_functions() (baselineexperiment method)": [[36, "experiments.experiments.BaselineExperiment.evaluate_constraint_functions"]], "run_baseline_trial() (baselineexperiment method)": [[36, "experiments.experiments.BaselineExperiment.run_baseline_trial"]], "run_experiment() (baselineexperiment method)": [[36, "experiments.experiments.BaselineExperiment.run_experiment"]], "write_trial_result() (baselineexperiment method)": [[36, "experiments.experiments.BaselineExperiment.write_trial_result"]], "experiment (class in experiments.experiments)": [[37, "experiments.experiments.Experiment"]], "__init__() (experiment method)": [[37, "experiments.experiments.Experiment.__init__"]], "__repr__() (experiment method)": [[37, "experiments.experiments.Experiment.__repr__"]], "aggregate_results() (experiment method)": [[37, "experiments.experiments.Experiment.aggregate_results"]], "write_trial_result() (experiment method)": [[37, "experiments.experiments.Experiment.write_trial_result"]], "fairlearnexperiment (class in experiments.experiments)": [[38, "experiments.experiments.FairlearnExperiment"]], "__init__() (fairlearnexperiment method)": [[38, "experiments.experiments.FairlearnExperiment.__init__"]], "__repr__() (fairlearnexperiment method)": [[38, "experiments.experiments.FairlearnExperiment.__repr__"]], "aggregate_results() (fairlearnexperiment method)": [[38, "experiments.experiments.FairlearnExperiment.aggregate_results"]], "evaluate_constraint_function() (fairlearnexperiment method)": [[38, "experiments.experiments.FairlearnExperiment.evaluate_constraint_function"]], "get_fairlearn_predictions() (fairlearnexperiment method)": [[38, "experiments.experiments.FairlearnExperiment.get_fairlearn_predictions"]], "run_experiment() (fairlearnexperiment method)": [[38, "experiments.experiments.FairlearnExperiment.run_experiment"]], "run_fairlearn_trial() (fairlearnexperiment method)": [[38, "experiments.experiments.FairlearnExperiment.run_fairlearn_trial"]], "write_trial_result() (fairlearnexperiment method)": [[38, "experiments.experiments.FairlearnExperiment.write_trial_result"]], "seldonianexperiment (class in experiments.experiments)": [[39, "experiments.experiments.SeldonianExperiment"]], "__init__() (seldonianexperiment method)": [[39, "experiments.experiments.SeldonianExperiment.__init__"]], "__repr__() (seldonianexperiment method)": [[39, "experiments.experiments.SeldonianExperiment.__repr__"]], "aggregate_results() (seldonianexperiment method)": [[39, "experiments.experiments.SeldonianExperiment.aggregate_results"]], "evaluate_constraint_functions() (seldonianexperiment method)": [[39, "experiments.experiments.SeldonianExperiment.evaluate_constraint_functions"]], "run_qsa_trial() (seldonianexperiment method)": [[39, "experiments.experiments.SeldonianExperiment.run_QSA_trial"]], "run_experiment() (seldonianexperiment method)": [[39, "experiments.experiments.SeldonianExperiment.run_experiment"]], "write_trial_result() (seldonianexperiment method)": [[39, "experiments.experiments.SeldonianExperiment.write_trial_result"]], "experiments.generate_plots": [[40, "module-experiments.generate_plots"]], "plotgenerator (class in experiments.generate_plots)": [[41, "experiments.generate_plots.PlotGenerator"]], "__init__() (plotgenerator method)": [[41, "experiments.generate_plots.PlotGenerator.__init__"]], "__repr__() (plotgenerator method)": [[41, "experiments.generate_plots.PlotGenerator.__repr__"]], "make_plots() (plotgenerator method)": [[41, "experiments.generate_plots.PlotGenerator.make_plots"]], "rlplotgenerator (class in experiments.generate_plots)": [[42, "experiments.generate_plots.RLPlotGenerator"]], "__init__() (rlplotgenerator method)": [[42, "experiments.generate_plots.RLPlotGenerator.__init__"]], "__repr__() (rlplotgenerator method)": [[42, "experiments.generate_plots.RLPlotGenerator.__repr__"]], "make_plots() (rlplotgenerator method)": [[42, "experiments.generate_plots.RLPlotGenerator.make_plots"]], "plot_importance_weights() (rlplotgenerator method)": [[42, "experiments.generate_plots.RLPlotGenerator.plot_importance_weights"]], "run_baseline_experiment() (rlplotgenerator method)": [[42, "experiments.generate_plots.RLPlotGenerator.run_baseline_experiment"]], "run_seldonian_experiment() (rlplotgenerator method)": [[42, "experiments.generate_plots.RLPlotGenerator.run_seldonian_experiment"]], "supervisedplotgenerator (class in experiments.generate_plots)": [[43, "experiments.generate_plots.SupervisedPlotGenerator"]], "__init__() (supervisedplotgenerator method)": [[43, "experiments.generate_plots.SupervisedPlotGenerator.__init__"]], "__repr__() (supervisedplotgenerator method)": [[43, "experiments.generate_plots.SupervisedPlotGenerator.__repr__"]], "make_plots() (supervisedplotgenerator method)": [[43, "experiments.generate_plots.SupervisedPlotGenerator.make_plots"]], "run_baseline_experiment() (supervisedplotgenerator method)": [[43, "experiments.generate_plots.SupervisedPlotGenerator.run_baseline_experiment"]], "run_fairlearn_experiment() (supervisedplotgenerator method)": [[43, "experiments.generate_plots.SupervisedPlotGenerator.run_fairlearn_experiment"]], "run_headless_seldonian_experiment() (supervisedplotgenerator method)": [[43, "experiments.generate_plots.SupervisedPlotGenerator.run_headless_seldonian_experiment"]], "run_seldonian_experiment() (supervisedplotgenerator method)": [[43, "experiments.generate_plots.SupervisedPlotGenerator.run_seldonian_experiment"]], "experiments.headless_example": [[44, "module-experiments.headless_example"]], "headlessexample (class in experiments.headless_example)": [[45, "experiments.headless_example.HeadlessExample"]], "__init__() (headlessexample method)": [[45, "experiments.headless_example.HeadlessExample.__init__"]], "__repr__() (headlessexample method)": [[45, "experiments.headless_example.HeadlessExample.__repr__"]], "run() (headlessexample method)": [[45, "experiments.headless_example.HeadlessExample.run"]], "experiments.perf_eval_funcs": [[46, "module-experiments.perf_eval_funcs"]], "mse() (in module experiments.perf_eval_funcs)": [[47, "experiments.perf_eval_funcs.MSE"]], "binary_logistic_loss() (in module experiments.perf_eval_funcs)": [[48, "experiments.perf_eval_funcs.binary_logistic_loss"]], "deterministic_accuracy() (in module experiments.perf_eval_funcs)": [[49, "experiments.perf_eval_funcs.deterministic_accuracy"]], "multiclass_accuracy() (in module experiments.perf_eval_funcs)": [[50, "experiments.perf_eval_funcs.multiclass_accuracy"]], "multiclass_logistic_loss() (in module experiments.perf_eval_funcs)": [[51, "experiments.perf_eval_funcs.multiclass_logistic_loss"]], "probabilistic_accuracy() (in module experiments.perf_eval_funcs)": [[52, "experiments.perf_eval_funcs.probabilistic_accuracy"]]}})