Search.setIndex({"docnames": ["_autosummary/experiments", "_autosummary/experiments.base_example", "_autosummary/experiments.base_example.BaseExample", "_autosummary/experiments.baselines", "_autosummary/experiments.baselines.decision_tree", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "_autosummary/experiments.baselines.decision_tree_leaf_tuning", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline", "_autosummary/experiments.baselines.diabetes_US_baseline", "_autosummary/experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline", "_autosummary/experiments.baselines.linear_regression", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline", "_autosummary/experiments.baselines.logistic_regression", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "_autosummary/experiments.baselines.random_classifiers", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "_autosummary/experiments.baselines.random_forest", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline", "_autosummary/experiments.experiment_utils", "_autosummary/experiments.experiment_utils.batch_predictions", "_autosummary/experiments.experiment_utils.generate_behavior_policy_episodes", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J", "_autosummary/experiments.experiment_utils.generate_resampled_datasets", "_autosummary/experiments.experiment_utils.has_failed", "_autosummary/experiments.experiment_utils.load_regenerated_episodes", "_autosummary/experiments.experiment_utils.load_resampled_dataset", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "_autosummary/experiments.experiment_utils.prep_feat_labels", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp", "_autosummary/experiments.experiment_utils.trial_arg_chunker", "_autosummary/experiments.experiments", "_autosummary/experiments.experiments.BaselineExperiment", "_autosummary/experiments.experiments.Experiment", "_autosummary/experiments.experiments.FairlearnExperiment", "_autosummary/experiments.experiments.SeldonianExperiment", "_autosummary/experiments.generate_plots", "_autosummary/experiments.generate_plots.PlotGenerator", "_autosummary/experiments.generate_plots.RLPlotGenerator", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator", "_autosummary/experiments.headless_example", "_autosummary/experiments.headless_example.HeadlessExample", "_autosummary/experiments.perf_eval_funcs", "_autosummary/experiments.perf_eval_funcs.MSE", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy", "api", "index", "overview"], "filenames": ["_autosummary/experiments.rst", "_autosummary/experiments.base_example.rst", "_autosummary/experiments.base_example.BaseExample.rst", "_autosummary/experiments.baselines.rst", "_autosummary/experiments.baselines.decision_tree.rst", "_autosummary/experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.rst", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.rst", "_autosummary/experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.rst", "_autosummary/experiments.baselines.diabetes_US_baseline.rst", "_autosummary/experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.rst", "_autosummary/experiments.baselines.linear_regression.rst", "_autosummary/experiments.baselines.linear_regression.LinearRegressionBaseline.rst", "_autosummary/experiments.baselines.logistic_regression.rst", "_autosummary/experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.rst", "_autosummary/experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.rst", "_autosummary/experiments.baselines.random_forest.rst", "_autosummary/experiments.baselines.random_forest.RandomForestClassifierBaseline.rst", "_autosummary/experiments.experiment_utils.rst", "_autosummary/experiments.experiment_utils.batch_predictions.rst", "_autosummary/experiments.experiment_utils.generate_behavior_policy_episodes.rst", "_autosummary/experiments.experiment_utils.generate_episodes_and_calc_J.rst", "_autosummary/experiments.experiment_utils.generate_resampled_datasets.rst", "_autosummary/experiments.experiment_utils.has_failed.rst", "_autosummary/experiments.experiment_utils.load_regenerated_episodes.rst", "_autosummary/experiments.experiment_utils.load_resampled_dataset.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_fixedniter.rst", "_autosummary/experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat.rst", "_autosummary/experiments.experiment_utils.prep_feat_labels.rst", "_autosummary/experiments.experiment_utils.setup_SA_spec_for_exp.rst", "_autosummary/experiments.experiment_utils.trial_arg_chunker.rst", "_autosummary/experiments.experiments.rst", "_autosummary/experiments.experiments.BaselineExperiment.rst", "_autosummary/experiments.experiments.Experiment.rst", "_autosummary/experiments.experiments.FairlearnExperiment.rst", "_autosummary/experiments.experiments.SeldonianExperiment.rst", "_autosummary/experiments.generate_plots.rst", "_autosummary/experiments.generate_plots.PlotGenerator.rst", "_autosummary/experiments.generate_plots.RLPlotGenerator.rst", "_autosummary/experiments.generate_plots.SupervisedPlotGenerator.rst", "_autosummary/experiments.headless_example.rst", "_autosummary/experiments.headless_example.HeadlessExample.rst", "_autosummary/experiments.perf_eval_funcs.rst", "_autosummary/experiments.perf_eval_funcs.MSE.rst", "_autosummary/experiments.perf_eval_funcs.binary_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.deterministic_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_accuracy.rst", "_autosummary/experiments.perf_eval_funcs.multiclass_logistic_loss.rst", "_autosummary/experiments.perf_eval_funcs.probabilistic_accuracy.rst", "api.rst", "index.rst", "overview.rst"], "titles": ["experiments", "experiments.base_example", "experiments.base_example.BaseExample", "experiments.baselines", "experiments.baselines.decision_tree", "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline", "experiments.baselines.decision_tree_leaf_tuning", "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline", "experiments.baselines.diabetes_US_baseline", "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline", "experiments.baselines.linear_regression", "experiments.baselines.linear_regression.LinearRegressionBaseline", "experiments.baselines.logistic_regression", "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline", "experiments.baselines.random_classifiers", "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline", "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline", "experiments.baselines.random_forest", "experiments.baselines.random_forest.RandomForestClassifierBaseline", "experiments.experiment_utils", "experiments.experiment_utils.batch_predictions", "experiments.experiment_utils.generate_behavior_policy_episodes", "experiments.experiment_utils.generate_episodes_and_calc_J", "experiments.experiment_utils.generate_resampled_datasets", "experiments.experiment_utils.has_failed", "experiments.experiment_utils.load_regenerated_episodes", "experiments.experiment_utils.load_resampled_dataset", "experiments.experiment_utils.make_batch_epoch_dict_fixedniter", "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat", "experiments.experiment_utils.prep_feat_labels", "experiments.experiment_utils.setup_SA_spec_for_exp", "experiments.experiment_utils.trial_arg_chunker", "experiments.experiments", "experiments.experiments.BaselineExperiment", "experiments.experiments.Experiment", "experiments.experiments.FairlearnExperiment", "experiments.experiments.SeldonianExperiment", "experiments.generate_plots", "experiments.generate_plots.PlotGenerator", "experiments.generate_plots.RLPlotGenerator", "experiments.generate_plots.SupervisedPlotGenerator", "experiments.headless_example", "experiments.headless_example.HeadlessExample", "experiments.perf_eval_funcs", "experiments.perf_eval_funcs.MSE", "experiments.perf_eval_funcs.binary_logistic_loss", "experiments.perf_eval_funcs.deterministic_accuracy", "experiments.perf_eval_funcs.multiclass_accuracy", "experiments.perf_eval_funcs.multiclass_logistic_loss", "experiments.perf_eval_funcs.probabilistic_accuracy", "API", "Seldonian Experiments documentation", "Overview"], "terms": {"modul": [0, 1, 3, 32, 37, 41], "run": [0, 1, 2, 7, 9, 27, 28, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 51, 52], "seldonian": [0, 29, 32, 33, 36, 38, 39, 40], "gener": [0, 21, 22, 23, 26, 38, 39, 40, 51], "three": [0, 2, 37, 38, 39, 40, 42, 51], "plot": [0, 2, 24, 37, 38, 39, 40, 42, 51], "contain": [1, 21, 29, 41, 52], "base": [1, 2, 5, 7, 9, 11, 13, 15, 16, 18, 33, 34, 35, 36, 38, 39, 40, 41, 42], "class": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 52], "exampl": [1, 2, 41, 42, 52], "spec": [2, 30, 38, 39, 40, 42, 51], "object": [2, 5, 7, 9, 18, 29, 34, 38, 39, 40, 51], "__init__": [2, 5, 7, 9, 11, 13, 15, 16, 18, 33, 34, 35, 36, 38, 39, 40, 42, 51], "__repr__": [2, 5, 7, 9, 11, 13, 15, 16, 18, 33, 34, 35, 36, 38, 39, 40, 42, 51], "return": [2, 5, 7, 9, 11, 13, 15, 16, 18, 22, 24, 27, 28, 29, 33, 34, 35, 36, 38, 39, 40, 42, 48, 52], "repr": [2, 5, 7, 9, 11, 13, 15, 16, 18, 33, 34, 35, 36, 38, 39, 40, 42], "self": [2, 5, 7, 9, 11, 13, 15, 16, 18, 33, 34, 35, 36, 38, 39, 40, 42], "method": [2, 5, 7, 9, 11, 13, 15, 16, 18, 33, 34, 35, 36, 38, 39, 40, 42, 52], "n_trial": [2, 21, 23, 26, 31, 38, 39, 40, 42, 51], "data_frac": [2, 25, 26, 27, 28, 30, 31, 33, 35, 36, 38, 39, 40, 42, 51], "results_dir": [2, 25, 26, 30, 33, 34, 35, 36, 38, 39, 40, 42, 51], "perf_eval_fn": [2, 38, 39, 40, 42, 51], "n_worker": [2, 31, 38, 39, 40, 42, 51], "1": [2, 9, 13, 27, 28, 35, 38, 42, 46, 47, 49, 52], "datagen_method": [2, 30, 38, 39, 40, 42, 51], "resampl": [2, 23, 26, 38, 39, 40, 42, 52], "verbos": [2, 21, 25, 26, 33, 34, 35, 36, 39, 40, 42], "fals": [2, 21, 24, 25, 26, 29, 33, 34, 35, 36, 39, 40, 42, 52], "baselin": [2, 33, 34, 42, 51], "model_label_dict": [2, 38, 39, 40, 42], "include_fairlearn_model": 2, "fairlearn_kwarg": 2, "performance_label": [2, 38, 39, 40, 42], "perform": [2, 7, 38, 39, 40, 42, 51, 52], "performance_yscal": [2, 38, 39, 40, 42], "linear": [2, 11, 38, 39, 40, 42], "plot_savenam": [2, 42], "none": [2, 5, 18, 38, 39, 40, 42], "plot_save_format": 2, "pdf": [2, 38, 39, 40], "include_legend": [2, 38, 39, 40], "true": [2, 24, 33, 34, 35, 36, 38, 39, 40, 44, 46, 47, 49, 52], "plot_fonts": [2, 42], "12": [2, 38, 39, 40, 42], "legend_fonts": [2, 38, 39, 40, 42], "8": [2, 38, 39, 40, 42], "thi": [2, 5, 7, 9, 18, 24, 26, 29, 38, 39, 40, 42, 51, 52], "ani": [2, 5, 7, 33, 34, 35, 36, 38, 39, 40, 42], "model": [2, 5, 7, 11, 13, 18, 20, 24, 33, 34, 35, 36, 38, 39, 40, 42, 46, 47, 49, 52], "includ": [2, 13, 38, 39, 40, 42, 52], "paramet": [2, 5, 7, 9, 11, 13, 15, 16, 18, 21, 23, 24, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 40, 42, 44, 46, 47, 49, 52], "first": [2, 7, 42, 52], "Then": [2, 7, 42], "produc": [2, 42, 52], "dt_kwarg": [5, 7], "implement": [5, 7, 9, 11, 13, 15, 16, 18, 52], "decis": [5, 7], "tree": [5, 7, 33, 36, 38, 39, 40, 52], "classifi": [5, 7, 11, 13, 15, 16, 18, 52], "binari": [5, 7, 13, 18, 49], "classif": [5, 7, 13, 18, 47, 48, 49, 52], "task": [5, 7, 18], "keyword": [5, 7, 33, 36, 38, 39, 40], "argument": [5, 7, 33, 36, 38, 39, 40, 52], "scikit": [5, 7], "learn": [5, 7, 21, 23, 26, 33, 52], "": [5, 7, 28, 38, 39, 40], "decisiontreeclassifi": [5, 7], "take": [5, 7], "predict": [5, 7, 11, 13, 15, 16, 18, 35, 44, 46, 47, 49, 51, 52], "theta": [5, 7, 9, 11, 13, 15, 16, 18, 38, 39, 40], "x": [5, 7, 11, 13, 15, 16, 18], "us": [5, 7, 9, 11, 13, 18, 19, 21, 23, 24, 26, 33, 35, 36, 38, 39, 40, 46, 47, 49, 51, 52], "train": [5, 7, 9, 11, 13, 18, 33, 51, 52], "posit": [5, 7, 11, 13, 15, 16, 18, 52], "probabl": [5, 7, 13, 15, 16, 18, 47, 49, 52], "isn": [5, 7, 18], "t": [5, 7, 18, 28], "here": [5, 18, 52], "becaus": [5, 18, 52], "ar": [5, 7, 18, 23, 26, 27, 28, 35, 38, 39, 40, 51, 52], "fit": [5, 7, 11, 13, 18, 51], "param": [5, 7, 18], "weight": [5, 7, 9, 11, 13, 15, 16, 18, 33, 35, 36], "case": [5, 18, 52], "featur": [5, 7, 11, 13, 15, 16, 18, 23, 26, 29, 35], "type": [5, 7, 11, 13, 15, 16, 18, 22, 33, 36, 38, 39, 40, 48, 52], "2d": [5, 7, 13, 18], "np": [5, 7, 13, 18, 27, 28, 33, 36, 52], "ndarrai": [5, 7, 11, 13, 15, 16, 18, 27, 28, 33, 36], "y": [5, 7, 11, 13, 18, 38, 39, 40, 44, 45, 46, 47, 48, 49], "instanti": [5, 7, 18], "new": [5, 7, 18, 21, 51, 52], "instanc": [5, 7, 18], "data": [5, 7, 13, 18, 24, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 40, 48, 52], "label": [5, 7, 11, 13, 15, 16, 18, 23, 26, 29, 35, 38, 39, 40, 44, 46, 47, 49], "1d": [5, 7, 13, 18, 35], "primary_objective_fn": [7, 9, 51], "sub_regim": 7, "adam_kwarg": 7, "seldoniandecisiontre": 7, "leaf": 7, "node": 7, "tune": 7, "primary_object": 7, "The": [7, 11, 13, 15, 16, 21, 23, 24, 26, 27, 28, 29, 33, 34, 35, 36, 38, 39, 40, 46, 51, 52], "primari": [7, 52], "function": [7, 9, 19, 21, 23, 26, 27, 28, 29, 33, 35, 36, 38, 39, 40, 43, 52], "minim": [7, 9], "dure": [7, 33, 36], "process": [7, 27, 28], "sub": 7, "categori": 7, "ml": [7, 52], "problem": [7, 52], "e": [7, 9, 23, 33, 34, 38, 39, 40, 52], "g": [7, 24, 33, 34, 36, 38, 39, 40, 52], "pass": [7, 33, 36, 38, 39, 40, 52], "adam": [7, 51], "optim": [7, 27, 28], "theta_init": 7, "kwarg": [7, 9, 20, 22, 30, 33, 34, 35, 36, 38, 39, 40, 44, 45, 46, 47, 48, 49], "gradient": 7, "descent": 7, "initi": [7, 9], "begin": 7, "best_theta": 7, "A": [7, 27, 28, 38, 39, 40, 52], "wrapper": [7, 13], "around": 7, "sklearn": 7, "built": [7, 52], "numpi": [7, 11, 15, 16, 33, 36], "arrai": [7, 9, 13, 27, 28, 35, 44, 46, 47, 49, 52], "onli": [7, 33, 36, 38, 39, 40, 46, 49, 52], "order": [7, 38, 39, 40, 52], "from": [7, 11, 23, 33, 34, 35, 36, 38, 39, 40, 52], "left": [7, 38, 39, 40, 52], "right": [7, 24, 38, 39, 40, 52], "forward_pass": [7, 51], "do": [7, 38, 39, 40, 52], "forward": 7, "through": 7, "probs_pos_class": 7, "vector": [7, 33, 36], "leaf_nodes_hit": 7, "id": 7, "were": 7, "hit": 7, "each": [7, 13, 15, 16, 21, 23, 26, 27, 28, 33, 34, 35, 36, 38, 39, 40, 47, 49, 52], "sampl": [7, 9, 28, 44, 46, 52], "These": [7, 33, 34, 35, 36], "need": [7, 9, 21, 52], "comput": 7, "jacobian": 7, "get_jacobian": [7, 51], "an": [7, 9, 33, 36, 38, 39, 40, 51], "d": [7, 27, 28], "_i": 7, "dtheta_j": 7, "where": [7, 22, 27, 28, 38, 39, 40], "i": [7, 9, 13, 22, 23, 24, 28, 36, 38, 39, 40, 46, 47, 49, 51, 52], "over": [7, 48], "datapoint": [7, 13], "j": [7, 13, 22], "result": [7, 26, 33, 34, 35, 36, 38, 39, 40, 52], "evalu": [7, 24, 33, 35, 36, 38, 39, 40, 51, 52], "which": [7, 21, 23, 26, 33, 34, 35, 36, 38, 39, 40, 52], "get_leaf_node_prob": [7, 51], "retriev": 7, "current": [7, 33, 36, 52], "call": [7, 52], "autograd": 7, "primit": 7, "workaround": 7, "sinc": 7, "our": 7, "involv": [7, 52], "extern": 7, "librari": [7, 19, 40, 51, 52], "pred": 7, "rtype": 7, "same": [7, 23, 26, 35, 38, 39, 40, 52], "shape": [7, 13, 23, 26, 35], "set_leaf_node_valu": [7, 51], "prob": [7, 11, 15, 16, 38, 39, 40], "updat": 7, "actual": 7, "number": [7, 13, 21, 23, 27, 28, 29, 38, 39, 40, 52], "set": [7, 9, 52], "wrapped_primary_object": [7, 51], "get": [7, 35], "via": [7, 52], "we": [7, 9, 35, 52], "want": [7, 9, 27, 28, 38, 39, 40, 52], "inherit": 7, "so": [7, 9], "arg": 7, "initial_solut": 9, "env_kwarg": 9, "bb_crmin": 9, "5": [9, 11, 15, 16, 52], "0": [9, 11, 15, 16, 46, 52], "bb_crmax": 9, "15": 9, "bb_cfmin": 9, "bb_cfmax": 9, "25": 9, "cr_shrink_factor": 9, "7320508075688772": 9, "cf_shrink_factor": 9, "rl": [9, 39, 52], "import": 9, "unequ": 9, "support": [9, 33, 52], "u": 9, "fix": [9, 27, 28], "area": 9, "polici": [9, 21, 52], "In": [9, 52], "maxim": 9, "expect": [9, 22], "neg": 9, "set_new_param": [9, 51], "new_param": 9, "agent": [9, 21], "dataset": [9, 23, 26, 29, 33, 35, 36, 38, 39, 40, 52], "cma": 9, "start": [9, 52], "random": [9, 18, 52], "parameter": 9, "linearregressionmodel": 11, "alwai": [11, 15, 16], "ha": [11, 15, 16, 52], "regardless": [11, 15, 16, 52], "input": [11, 15, 16, 23, 26, 52], "pair": 11, "nxm": 11, "nx1": 11, "binarylogisticregressionmodel": 13, "logist": [13, 48, 52], "regress": [13, 52], "let": 13, "bia": 13, "term": 13, "provi": 13, "k": 13, "have": [13, 15, 16, 52], "point": [13, 27, 28, 29, 35, 38, 39, 40, 48, 52], "length": [13, 52], "observ": [13, 15, 16], "just": 13, "parent": [13, 21, 23, 33, 34, 35, 36], "randomclassifiermodel": [15, 16], "float": [15, 16, 22, 24, 26, 33, 35, 36, 38, 39, 40, 48], "overrid": 16, "child": 16, "rf_kwarg": 18, "forest": 18, "util": [19, 21, 23, 26, 29], "rest": 19, "solut": [20, 33, 36, 38, 39, 40, 52], "x_test": 20, "hyperparameter_and_setting_dict": [21, 39], "save_dir": [21, 23], "reinforc": [21, 52], "episod": [21, 22, 52], "behavior": [21, 24, 52], "trial": [21, 23, 26, 29, 33, 34, 35, 36, 38, 39, 40, 52], "dict": [21, 33, 36, 38, 39, 40], "environ": 21, "etc": [21, 52], "str": [21, 23, 26, 33, 34, 35, 36, 38, 39, 40], "directori": [21, 23, 26, 33, 34, 35, 36, 38, 39, 40, 52], "save": [21, 23, 26, 33, 34, 35, 36, 38, 39, 40, 52], "regenerated_episod": 21, "calcul": [22, 44, 48], "discount": 22, "list": [22, 33, 34, 35, 36, 38, 39, 40, 52], "ground": [22, 33, 36, 38, 39, 40, 52], "truth": [22, 33, 36, 38, 39, 40, 52], "supervis": [23, 26, 33, 39, 40, 52], "replac": [23, 26, 52], "sensit": [23, 26, 29, 35], "attribut": [23, 26, 29, 39, 40], "creat": [23, 26, 52], "version": [23, 26], "panda": 23, "datafram": 23, "origin": [23, 52], "int": [23, 26, 27, 28, 29, 33, 35, 36, 38, 39, 40], "make": [23, 37, 38, 39, 40, 51, 52], "file_format": 23, "format": 23, "option": [23, 35, 36, 38, 39, 40, 52], "csv": [23, 33, 34, 35, 36, 52], "pkl": [23, 52], "condit": 24, "whether": [24, 29, 33, 36, 38, 39, 40, 52], "valu": [24, 27, 28, 33, 35, 36, 38, 39, 40, 52], "unsaf": 24, "determin": [24, 33, 36, 38, 39, 40, 52], "failur": [24, 38, 39, 40, 52], "rate": [24, 38, 39, 40, 47, 49, 52], "most": 24, "constraint": [24, 33, 35, 36, 38, 39, 40, 52], "safe": [24, 33, 36, 52], "trial_i": [25, 26, 30, 33, 35, 36, 52], "orig_meta": 25, "index": [26, 33, 35, 36], "fraction": [26, 27, 28, 33, 35, 36, 38, 39, 40, 46, 52], "boolean": [26, 52], "flag": [26, 52], "niter": 27, "n_max": [27, 28], "batch_siz": [27, 28], "conveni": [27, 28], "figur": [27, 28, 35, 38, 39, 40, 52], "out": [27, 28, 33, 34, 35, 36], "epoch": [27, 28], "necessari": [27, 28], "ensur": [27, 28], "total": [27, 28], "iter": [27, 28], "batch": [27, 28, 38, 39, 40], "size": [27, 28, 33, 35, 36, 38, 39, 40, 52], "you": [27, 28, 38, 39, 40, 51, 52], "everi": [27, 28, 52], "maximum": [27, 28], "batch_epoch_dict": [27, 28, 30, 38, 39, 40, 42], "dictionari": [27, 28, 38, 39, 40, 52], "kei": [27, 28, 38, 39, 40], "num_epoch": [27, 28], "niter_min": 28, "num_repeat": 28, "frac": [28, 38, 39, 40, 52], "max": [28, 52], "seen": 28, "time": [28, 38, 39, 40, 52], "minimum": 28, "must": [28, 52], "trial_dataset": 29, "n_point": 29, "include_sensitive_attr": 29, "prepar": 29, "given": [29, 33, 36, 52], "bool": [29, 33, 34, 35, 36, 38, 39, 40], "prep": 29, "well": 29, "regim": [30, 52], "perf_eval_kwarg": [30, 38, 39, 40, 42, 51], "baseline_model": [33, 39, 40], "against": [33, 52], "compar": [33, 52], "model_nam": [33, 34, 36, 52], "string": [33, 34, 36], "name": [33, 34, 35, 36, 38, 39, 40, 52], "logistic_regress": [33, 34, 51, 52], "experiment": [33, 34, 35, 36], "aggregate_result": [33, 34, 35, 36, 51], "group": [33, 34, 35, 36], "togeth": [33, 34, 35, 36], "file": [33, 34, 35, 36, 38, 39, 40, 51], "singl": [33, 34, 35, 36, 52], "evaluate_constraint_funct": [33, 35, 36, 51], "constraint_eval_fn": [33, 36, 38, 39, 40, 51], "constraint_eval_kwarg": [33, 36, 38, 39, 40, 42, 51], "helper": [33, 36], "wa": [33, 36, 52], "found": [33, 36, 52], "empti": [33, 36, 38, 39, 40, 52], "default": [33, 35, 38, 39, 40, 52], "pars": [33, 36, 38, 39, 40, 52], "run_baseline_tri": [33, 51], "overal": [33, 35, 36, 38, 39, 40], "run_experi": [33, 35, 36, 51], "write_trial_result": [33, 34, 35, 36, 51], "colnam": [33, 34, 35, 36], "trial_dir": [33, 34, 35, 36], "write": [33, 34, 35, 36], "inform": [33, 34, 35, 36], "item": [33, 34, 35, 36], "compris": [33, 34, 35, 36, 52], "header": [33, 34, 35, 36], "print": [33, 34, 35, 36], "filenam": [33, 34, 35, 36, 38, 39, 40], "fairlearn_epsilon_constraint": [35, 40], "fairlearn": [35, 40, 52], "epsilon": 35, "threshold": [35, 52], "y_pred": [35, 44, 45, 46, 47, 48, 49], "test_label": 35, "fairlearn_constraint_nam": [35, 40], "epsilon_ev": 35, "eval_method": 35, "nativ": 35, "sensitive_featur": 35, "two": [35, 52], "column": [35, 38, 39, 40], "consid": [35, 52], "get_fairlearn_predict": [35, 51], "mitig": 35, "x_test_fairlearn": 35, "consist": 35, "potenti": 35, "more": [35, 52], "than": [35, 52], "one": [35, 52], "predictor": 35, "For": [35, 47, 49, 52], "non": 35, "zero": 35, "how": [35, 52], "mani": [35, 52], "normal": 35, "across": 35, "all": [35, 38, 39, 40, 48, 52], "test": [35, 52], "run_fairlearn_tri": [35, 51], "qsa": 36, "quasi": [36, 52], "algorithm": [36, 38, 39, 40, 51, 52], "candid": [36, 38, 39, 40], "select": [36, 38, 39, 40], "run_qsa_tri": [36, 51], "2": 38, "3": [38, 39, 40, 52], "v": 38, "amount": [38, 39, 40, 52], "specif": [38, 39, 40], "error": [38, 39, 40, 44, 47, 49], "bar": [38, 39, 40], "proport": [38, 39, 40], "horizont": [38, 39, 40, 52], "axi": [38, 39, 40, 52], "obtain": [38, 39, 40, 52], "signatur": [38, 39, 40], "func": [38, 39, 40], "worker": [38, 39, 40, 52], "multiprocess": [38, 39, 40], "If": [38, 39, 40, 51, 52], "provid": [38, 39, 40, 52], "extra": [38, 39, 40], "instruct": [38, 39, 40], "n_epoch": [38, 39, 40], "make_plot": [38, 39, 40, 51, 52], "ignore_model": [38, 39, 40], "fontsiz": [38, 39, 40], "title_fonts": [38, 39, 40], "ncols_legend": [38, 39, 40], "accuraci": [38, 39, 40, 52], "sr_label": [38, 39, 40], "fr_label": [38, 39, 40], "violat": [38, 39, 40], "performance_ylim": [38, 39, 40], "hoz_axis_label": [38, 39, 40], "show_confidence_level": [38, 39, 40], "marker_s": [38, 39, 40], "20": [38, 39, 40], "save_format": [38, 39, 40], "show_titl": [38, 39, 40], "custom_titl": [38, 39, 40], "savenam": [38, 39, 40], "look": [38, 39, 40, 52], "up": [38, 39, 40], "them": [38, 39, 40, 52], "shown": [38, 39, 40, 52], "legend": [38, 39, 40], "note": [38, 39, 40], "specifi": [38, 39, 40, 52], "appear": [38, 39, 40], "thei": [38, 39, 40, 52], "show": [38, 39, 40, 52], "font": [38, 39, 40], "text": [38, 39, 40], "middl": [38, 39, 40, 52], "scale": [38, 39, 40], "log": [38, 39, 40, 52], "limit": [38, 39, 40], "matplotlib": [38, 39, 40], "automat": [38, 39, 40], "what": [38, 39, 40, 52], "black": [38, 39, 40, 52], "dot": [38, 39, 40, 52], "line": [38, 39, 40, 52], "delta": [38, 39, 40, 52], "titl": [38, 39, 40], "top": [38, 39, 40, 52], "custom": [38, 39, 40, 52], "disk": [38, 39, 40], "plotgener": [39, 40, 51], "run_baseline_experi": [39, 40, 51, 52], "assign": [39, 40], "displai": [39, 40], "stdout": [39, 40], "while": [39, 40, 52], "run_seldonian_experi": [39, 40, 51, 52], "run_fairlearn_experi": [40, 51], "fairlearn_sensitive_feature_nam": 40, "fairlearn_epsilon_ev": 40, "fairlearn_eval_kwarg": 40, "run_headless_seldonian_experi": [40, 51], "full_pretraining_model": [40, 42], "initial_state_dict": 40, "headless_pretraining_model": [40, 42], "head_layer_nam": [40, 42], "latent_feature_shap": [40, 42], "loss_func_pretrain": [40, 42], "learning_rate_pretrain": [40, 42], "pretraining_devic": [40, 42], "batch_epoch_dict_pretrain": [40, 42], "safety_batch_size_pretrain": [40, 42], "1000": 40, "headless": [40, 42], "baseexampl": [42, 51], "mean": 44, "squar": 44, "correct": 46, "best": 46, "when": [46, 47, 49, 52], "output": [46, 47, 49], "multi": [47, 48], "dimension": [47, 49], "averag": 48, "loss": 48, "welcom": 51, "design": 51, "help": [51, 52], "safeti": [51, 52], "sourc": 51, "code": [51, 52], "host": 51, "github": 51, "heavi": 51, "engin": [51, 52], "core": [51, 52], "complet": 51, "see": [51, 52], "overview": 51, "api": [51, 52], "base_exampl": 51, "decision_tre": 51, "decisiontreeclassifierbaselin": 51, "decision_tree_leaf_tun": 51, "decisiontreeclassifierleaftuningbaselin": 51, "diabetes_us_baselin": 51, "rldiabetesusagentbaselin": 51, "linear_regress": 51, "linearregressionbaselin": 51, "binarylogisticregressionbaselin": 51, "random_classifi": 51, "uniformrandomclassifierbaselin": 51, "weightedrandomclassifierbaselin": 51, "random_forest": 51, "randomforestclassifierbaselin": 51, "experiment_util": 51, "batch_predict": 51, "generate_behavior_policy_episod": 51, "generate_episodes_and_calc_j": 51, "generate_resampled_dataset": 51, "has_fail": 51, "load_regenerated_episod": 51, "load_resampled_dataset": 51, "make_batch_epoch_dict_fixednit": 51, "make_batch_epoch_dict_min_sample_repeat": 51, "prep_feat_label": 51, "setup_sa_spec_for_exp": 51, "trial_arg_chunk": 51, "baselineexperi": [51, 52], "fairlearnexperi": [51, 52], "seldonianexperi": 51, "generate_plot": 51, "rlplotgener": [51, 52], "supervisedplotgener": [51, 52], "headless_exampl": 51, "headlessexampl": 51, "perf_eval_func": 51, "mse": 51, "binary_logistic_loss": 51, "deterministic_accuraci": 51, "multiclass_accuraci": 51, "multiclass_logistic_loss": 51, "probabilistic_accuraci": 51, "document": 52, "explain": 52, "sa": 52, "detail": 52, "descript": 52, "machin": 52, "toolkit": 52, "homepag": 52, "heavili": 52, "depend": 52, "wai": 52, "It": 52, "increas": 52, "some": 52, "indic": 52, "satisfi": 52, "sometim": 52, "come": 52, "cost": 52, "reduc": 52, "can": 52, "understand": 52, "trade": 52, "off": 52, "cannot": 52, "No": 52, "despit": 52, "quantiti": 52, "assum": 52, "access": 52, "real": 52, "world": 52, "typic": 52, "doe": 52, "instead": 52, "adopt": 52, "strategi": 52, "bootstrap": 52, "approxim": 52, "gpa": 52, "discuss": 52, "scienc": 52, "paper": 52, "panel": 52, "thoma": 52, "et": 52, "al": 52, "2019": 52, "fair": 52, "dispar": 52, "impact": 52, "green": 52, "dash": 52, "sever": 52, "standard": 52, "red": 52, "also": 52, "awar": 52, "blue": 52, "magenta": 52, "criteria": 52, "repres": 52, "confid": 52, "05": 52, "your": 52, "either": 52, "both": 52, "describ": 52, "follow": 52, "requir": 52, "often": 52, "interfac": 52, "everyth": 52, "underli": 52, "estim": 52, "uncertainti": 52, "multipli": 52, "within": 52, "differ": 52, "dimens": 52, "At": 52, "generate_episod": 52, "parallel": 52, "multipl": 52, "avail": 52, "independ": 52, "other": 52, "embarrassingli": 52, "program": 52, "less": 52, "explicitli": 52, "nsf": 52, "plot_gener": 52, "easi": 52, "develop": 52, "easili": 52, "add": 52, "own": 52, "ad": 52, "alreadi": 52, "p": 52, "abov": 52, "would": 52, "simpli": 52, "block": 52, "like": 52, "That": 52, "anoth": 52, "narrow": 52, "rang": 52, "progress": 52, "structur": 52, "insid": 52, "after": 52, "qsa_result": 52, "trial_data": 52, "data_frac_0": 52, "0010_trial_0": 52, "0010_trial_1": 52, "0010_trial_2": 52, "0010_trial_3": 52, "0010_trial_4": 52, "0022_trial_0": 52, "0022_trial_1": 52, "0022_trial_2": 52, "0022_trial_3": 52, "0022_trial_4": 52, "0046_trial_0": 52, "0046_trial_1": 52, "0046_trial_2": 52, "0046_trial_3": 52, "0046_trial_4": 52, "0050_trial_0": 52, "0100_trial_0": 52, "0100_trial_1": 52, "0100_trial_2": 52, "0100_trial_3": 52, "0100_trial_4": 52, "0215_trial_0": 52, "0215_trial_1": 52, "0215_trial_2": 52, "0215_trial_3": 52, "0215_trial_4": 52, "0464_trial_0": 52, "0464_trial_1": 52, "0464_trial_2": 52, "0464_trial_3": 52, "0464_trial_4": 52, "1000_trial_0": 52, "1000_trial_1": 52, "1000_trial_2": 52, "1000_trial_3": 52, "1000_trial_4": 52, "2154_trial_0": 52, "2154_trial_1": 52, "2154_trial_2": 52, "2154_trial_3": 52, "2154_trial_4": 52, "4642_trial_0": 52, "4642_trial_1": 52, "4642_trial_2": 52, "4642_trial_3": 52, "4642_trial_4": 52, "data_frac_1": 52, "0000_trial_0": 52, "0000_trial_1": 52, "0000_trial_2": 52, "0000_trial_3": 52, "0000_trial_4": 52, "resampled_dataset": 52, "resampled_data_trial0": 52, "resampled_data_trial1": 52, "resampled_data_trial2": 52, "resampled_data_trial3": 52, "resampled_data_trial4": 52, "logspac": 52, "10": 52, "space": 52, "001": 52, "end": 52, "As": 52, "50": 52, "fail": 52, "content": 52, "6105_trial36": 52, "passed_safeti": 52, "6105402296585326": 52, "36": 52, "6746247014792527": 52, "level": 52, "folder": 52, "_result": 52, "logistic_regression_result": 52, "its": 52, "separ": 52, "curv": 52, "autom": 52, "loan": 52, "approv": 52, "system": 52, "tutori": 52}, "objects": {"": [[0, 0, 0, "-", "experiments"]], "experiments": [[1, 0, 0, "-", "base_example"], [3, 0, 0, "-", "baselines"], [19, 0, 0, "-", "experiment_utils"], [32, 0, 0, "-", "experiments"], [37, 0, 0, "-", "generate_plots"], [41, 0, 0, "-", "headless_example"], [43, 0, 0, "-", "perf_eval_funcs"]], "experiments.base_example": [[2, 1, 1, "", "BaseExample"]], "experiments.base_example.BaseExample": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "__repr__"], [2, 2, 1, "", "run"]], "experiments.baselines": [[4, 0, 0, "-", "decision_tree"], [6, 0, 0, "-", "decision_tree_leaf_tuning"], [8, 0, 0, "-", "diabetes_US_baseline"], [10, 0, 0, "-", "linear_regression"], [12, 0, 0, "-", "logistic_regression"], [14, 0, 0, "-", "random_classifiers"], [17, 0, 0, "-", "random_forest"]], "experiments.baselines.decision_tree": [[5, 1, 1, "", "DecisionTreeClassifierBaseline"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "__repr__"], [5, 2, 1, "", "predict"], [5, 2, 1, "", "train"]], "experiments.baselines.decision_tree_leaf_tuning": [[7, 1, 1, "", "DecisionTreeClassifierLeafTuningBaseline"]], "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "__repr__"], [7, 2, 1, "", "adam"], [7, 2, 1, "", "fit"], [7, 2, 1, "", "forward_pass"], [7, 2, 1, "", "get_jacobian"], [7, 2, 1, "", "get_leaf_node_probs"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "set_leaf_node_values"], [7, 2, 1, "", "train"], [7, 2, 1, "", "wrapped_primary_objective"]], "experiments.baselines.diabetes_US_baseline": [[9, 1, 1, "", "RLDiabetesUSAgentBaseline"]], "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "__repr__"], [9, 2, 1, "", "primary_objective_fn"], [9, 2, 1, "", "set_new_params"], [9, 2, 1, "", "train"]], "experiments.baselines.linear_regression": [[11, 1, 1, "", "LinearRegressionBaseline"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "__repr__"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "predict"]], "experiments.baselines.logistic_regression": [[13, 1, 1, "", "BinaryLogisticRegressionBaseline"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "__repr__"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "train"]], "experiments.baselines.random_classifiers": [[15, 1, 1, "", "UniformRandomClassifierBaseline"], [16, 1, 1, "", "WeightedRandomClassifierBaseline"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "__repr__"], [15, 2, 1, "", "predict"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "__repr__"], [16, 2, 1, "", "predict"]], "experiments.baselines.random_forest": [[18, 1, 1, "", "RandomForestClassifierBaseline"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "train"]], "experiments.experiment_utils": [[20, 3, 1, "", "batch_predictions"], [21, 3, 1, "", "generate_behavior_policy_episodes"], [22, 3, 1, "", "generate_episodes_and_calc_J"], [23, 3, 1, "", "generate_resampled_datasets"], [24, 3, 1, "", "has_failed"], [25, 3, 1, "", "load_regenerated_episodes"], [26, 3, 1, "", "load_resampled_dataset"], [27, 3, 1, "", "make_batch_epoch_dict_fixedniter"], [28, 3, 1, "", "make_batch_epoch_dict_min_sample_repeat"], [29, 3, 1, "", "prep_feat_labels"], [30, 3, 1, "", "setup_SA_spec_for_exp"], [31, 3, 1, "", "trial_arg_chunker"]], "experiments.experiments": [[33, 1, 1, "", "BaselineExperiment"], [34, 1, 1, "", "Experiment"], [35, 1, 1, "", "FairlearnExperiment"], [36, 1, 1, "", "SeldonianExperiment"]], "experiments.experiments.BaselineExperiment": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "__repr__"], [33, 2, 1, "", "aggregate_results"], [33, 2, 1, "", "evaluate_constraint_functions"], [33, 2, 1, "", "run_baseline_trial"], [33, 2, 1, "", "run_experiment"], [33, 2, 1, "", "write_trial_result"]], "experiments.experiments.Experiment": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "__repr__"], [34, 2, 1, "", "aggregate_results"], [34, 2, 1, "", "write_trial_result"]], "experiments.experiments.FairlearnExperiment": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "__repr__"], [35, 2, 1, "", "aggregate_results"], [35, 2, 1, "", "evaluate_constraint_function"], [35, 2, 1, "", "get_fairlearn_predictions"], [35, 2, 1, "", "run_experiment"], [35, 2, 1, "", "run_fairlearn_trial"], [35, 2, 1, "", "write_trial_result"]], "experiments.experiments.SeldonianExperiment": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "__repr__"], [36, 2, 1, "", "aggregate_results"], [36, 2, 1, "", "evaluate_constraint_functions"], [36, 2, 1, "", "run_QSA_trial"], [36, 2, 1, "", "run_experiment"], [36, 2, 1, "", "write_trial_result"]], "experiments.generate_plots": [[38, 1, 1, "", "PlotGenerator"], [39, 1, 1, "", "RLPlotGenerator"], [40, 1, 1, "", "SupervisedPlotGenerator"]], "experiments.generate_plots.PlotGenerator": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "__repr__"], [38, 2, 1, "", "make_plots"]], "experiments.generate_plots.RLPlotGenerator": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "__repr__"], [39, 2, 1, "", "make_plots"], [39, 2, 1, "", "run_baseline_experiment"], [39, 2, 1, "", "run_seldonian_experiment"]], "experiments.generate_plots.SupervisedPlotGenerator": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "__repr__"], [40, 2, 1, "", "make_plots"], [40, 2, 1, "", "run_baseline_experiment"], [40, 2, 1, "", "run_fairlearn_experiment"], [40, 2, 1, "", "run_headless_seldonian_experiment"], [40, 2, 1, "", "run_seldonian_experiment"]], "experiments.headless_example": [[42, 1, 1, "", "HeadlessExample"]], "experiments.headless_example.HeadlessExample": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "__repr__"], [42, 2, 1, "", "run"]], "experiments.perf_eval_funcs": [[44, 3, 1, "", "MSE"], [45, 3, 1, "", "binary_logistic_loss"], [46, 3, 1, "", "deterministic_accuracy"], [47, 3, 1, "", "multiclass_accuracy"], [48, 3, 1, "", "multiclass_logistic_loss"], [49, 3, 1, "", "probabilistic_accuracy"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"experi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52], "base_exampl": [1, 2], "baseexampl": 2, "baselin": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 52], "decision_tre": [4, 5], "decisiontreeclassifierbaselin": 5, "decision_tree_leaf_tun": [6, 7], "decisiontreeclassifierleaftuningbaselin": 7, "diabetes_us_baselin": [8, 9], "rldiabetesusagentbaselin": 9, "linear_regress": [10, 11], "linearregressionbaselin": 11, "logistic_regress": [12, 13], "binarylogisticregressionbaselin": 13, "random_classifi": [14, 15, 16], "uniformrandomclassifierbaselin": 15, "weightedrandomclassifierbaselin": 16, "random_forest": [17, 18], "randomforestclassifierbaselin": 18, "experiment_util": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "batch_predict": 20, "generate_behavior_policy_episod": 21, "generate_episodes_and_calc_j": 22, "generate_resampled_dataset": 23, "has_fail": 24, "load_regenerated_episod": 25, "load_resampled_dataset": 26, "make_batch_epoch_dict_fixednit": 27, "make_batch_epoch_dict_min_sample_repeat": 28, "prep_feat_label": 29, "setup_sa_spec_for_exp": 30, "trial_arg_chunk": 31, "baselineexperi": 33, "fairlearnexperi": 35, "seldonianexperi": 36, "generate_plot": [37, 38, 39, 40], "plotgener": 38, "rlplotgener": 39, "supervisedplotgener": 40, "headless_exampl": [41, 42], "headlessexampl": 42, "perf_eval_func": [43, 44, 45, 46, 47, 48, 49], "mse": 44, "binary_logistic_loss": 45, "deterministic_accuraci": 46, "multiclass_accuraci": 47, "multiclass_logistic_loss": 48, "probabilistic_accuraci": 49, "api": 50, "seldonian": [51, 52], "document": 51, "tabl": 51, "content": 51, "overview": 52, "three": 52, "plot": 52, "gener": 52, "spec": 52, "object": 52, "n_trial": 52, "data_frac": 52, "datagen_method": 52, "n_worker": 52, "perf_eval_fn": 52, "perf_eval_kwarg": 52, "constraint_eval_fn": 52, "constraint_eval_kwarg": 52, "results_dir": 52, "file": 52, "an": 52}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"experiments": [[0, "module-experiments"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "experiments.base_example.BaseExample": [[2, "experiments-base-example-baseexample"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.decision_tree": [[4, "module-experiments.baselines.decision_tree"]], "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline": [[5, "experiments-baselines-decision-tree-decisiontreeclassifierbaseline"]], "experiments.baselines.decision_tree_leaf_tuning": [[6, "module-experiments.baselines.decision_tree_leaf_tuning"]], "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline": [[7, "experiments-baselines-decision-tree-leaf-tuning-decisiontreeclassifierleaftuningbaseline"]], "experiments.baselines.diabetes_US_baseline": [[8, "module-experiments.baselines.diabetes_US_baseline"]], "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline": [[9, "experiments-baselines-diabetes-us-baseline-rldiabetesusagentbaseline"]], "experiments.baselines.linear_regression": [[10, "module-experiments.baselines.linear_regression"]], "experiments.baselines.linear_regression.LinearRegressionBaseline": [[11, "experiments-baselines-linear-regression-linearregressionbaseline"]], "experiments.baselines.logistic_regression": [[12, "module-experiments.baselines.logistic_regression"]], "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline": [[13, "experiments-baselines-logistic-regression-binarylogisticregressionbaseline"]], "experiments.baselines.random_classifiers": [[14, "module-experiments.baselines.random_classifiers"]], "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline": [[15, "experiments-baselines-random-classifiers-uniformrandomclassifierbaseline"]], "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline": [[16, "experiments-baselines-random-classifiers-weightedrandomclassifierbaseline"]], "experiments.baselines.random_forest": [[17, "module-experiments.baselines.random_forest"]], "experiments.baselines.random_forest.RandomForestClassifierBaseline": [[18, "experiments-baselines-random-forest-randomforestclassifierbaseline"]], "experiments.experiment_utils": [[19, "module-experiments.experiment_utils"]], "experiments.experiment_utils.batch_predictions": [[20, "experiments-experiment-utils-batch-predictions"]], "experiments.experiment_utils.generate_behavior_policy_episodes": [[21, "experiments-experiment-utils-generate-behavior-policy-episodes"]], "experiments.experiment_utils.generate_episodes_and_calc_J": [[22, "experiments-experiment-utils-generate-episodes-and-calc-j"]], "experiments.experiment_utils.generate_resampled_datasets": [[23, "experiments-experiment-utils-generate-resampled-datasets"]], "experiments.experiment_utils.has_failed": [[24, "experiments-experiment-utils-has-failed"]], "experiments.experiment_utils.load_regenerated_episodes": [[25, "experiments-experiment-utils-load-regenerated-episodes"]], "experiments.experiment_utils.load_resampled_dataset": [[26, "experiments-experiment-utils-load-resampled-dataset"]], "experiments.experiment_utils.make_batch_epoch_dict_fixedniter": [[27, "experiments-experiment-utils-make-batch-epoch-dict-fixedniter"]], "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat": [[28, "experiments-experiment-utils-make-batch-epoch-dict-min-sample-repeat"]], "experiments.experiment_utils.prep_feat_labels": [[29, "experiments-experiment-utils-prep-feat-labels"]], "experiments.experiment_utils.setup_SA_spec_for_exp": [[30, "experiments-experiment-utils-setup-sa-spec-for-exp"]], "experiments.experiment_utils.trial_arg_chunker": [[31, "experiments-experiment-utils-trial-arg-chunker"]], "experiments.experiments": [[32, "module-experiments.experiments"]], "experiments.experiments.BaselineExperiment": [[33, "experiments-experiments-baselineexperiment"]], "experiments.experiments.Experiment": [[34, "experiments-experiments-experiment"]], "experiments.experiments.FairlearnExperiment": [[35, "experiments-experiments-fairlearnexperiment"]], "experiments.experiments.SeldonianExperiment": [[36, "experiments-experiments-seldonianexperiment"]], "experiments.generate_plots": [[37, "module-experiments.generate_plots"]], "experiments.generate_plots.PlotGenerator": [[38, "experiments-generate-plots-plotgenerator"]], "experiments.generate_plots.RLPlotGenerator": [[39, "experiments-generate-plots-rlplotgenerator"]], "experiments.generate_plots.SupervisedPlotGenerator": [[40, "experiments-generate-plots-supervisedplotgenerator"]], "experiments.headless_example": [[41, "module-experiments.headless_example"]], "experiments.headless_example.HeadlessExample": [[42, "experiments-headless-example-headlessexample"]], "experiments.perf_eval_funcs": [[43, "module-experiments.perf_eval_funcs"]], "experiments.perf_eval_funcs.MSE": [[44, "experiments-perf-eval-funcs-mse"]], "experiments.perf_eval_funcs.binary_logistic_loss": [[45, "experiments-perf-eval-funcs-binary-logistic-loss"]], "experiments.perf_eval_funcs.deterministic_accuracy": [[46, "experiments-perf-eval-funcs-deterministic-accuracy"]], "experiments.perf_eval_funcs.multiclass_accuracy": [[47, "experiments-perf-eval-funcs-multiclass-accuracy"]], "experiments.perf_eval_funcs.multiclass_logistic_loss": [[48, "experiments-perf-eval-funcs-multiclass-logistic-loss"]], "experiments.perf_eval_funcs.probabilistic_accuracy": [[49, "experiments-perf-eval-funcs-probabilistic-accuracy"]], "API": [[50, "api"]], "Seldonian Experiments documentation": [[51, "seldonian-experiments-documentation"]], "Table of contents": [[51, "table-of-contents"]], "Overview": [[52, "overview"]], "Seldonian experiments": [[52, "seldonian-experiments"]], "Three Plots": [[52, "three-plots"]], "Plot generator": [[52, "plot-generator"]], "Spec object": [[52, "spec-object"]], "n_trials": [[52, "n-trials"]], "data_fracs": [[52, "data-fracs"]], "datagen_method": [[52, "datagen-method"]], "n_workers": [[52, "n-workers"]], "perf_eval_fn": [[52, "perf-eval-fn"]], "perf_eval_kwargs": [[52, "perf-eval-kwargs"]], "constraint_eval_fns": [[52, "constraint-eval-fns"]], "constraint_eval_kwargs": [[52, "constraint-eval-kwargs"]], "results_dir": [[52, "results-dir"]], "Baselines": [[52, "baselines"]], "Files generated in an experiment": [[52, "files-generated-in-an-experiment"]]}, "indexentries": {"experiments": [[0, "module-experiments"]], "module": [[0, "module-experiments"], [1, "module-experiments.base_example"], [3, "module-experiments.baselines"], [4, "module-experiments.baselines.decision_tree"], [6, "module-experiments.baselines.decision_tree_leaf_tuning"], [8, "module-experiments.baselines.diabetes_US_baseline"], [10, "module-experiments.baselines.linear_regression"], [12, "module-experiments.baselines.logistic_regression"], [14, "module-experiments.baselines.random_classifiers"], [17, "module-experiments.baselines.random_forest"], [19, "module-experiments.experiment_utils"], [32, "module-experiments.experiments"], [37, "module-experiments.generate_plots"], [41, "module-experiments.headless_example"], [43, "module-experiments.perf_eval_funcs"]], "experiments.base_example": [[1, "module-experiments.base_example"]], "baseexample (class in experiments.base_example)": [[2, "experiments.base_example.BaseExample"]], "__init__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__init__"]], "__repr__() (baseexample method)": [[2, "experiments.base_example.BaseExample.__repr__"]], "run() (baseexample method)": [[2, "experiments.base_example.BaseExample.run"]], "experiments.baselines": [[3, "module-experiments.baselines"]], "experiments.baselines.decision_tree": [[4, "module-experiments.baselines.decision_tree"]], "decisiontreeclassifierbaseline (class in experiments.baselines.decision_tree)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline"]], "__init__() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__init__"]], "__repr__() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.__repr__"]], "predict() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.predict"]], "train() (decisiontreeclassifierbaseline method)": [[5, "experiments.baselines.decision_tree.DecisionTreeClassifierBaseline.train"]], "experiments.baselines.decision_tree_leaf_tuning": [[6, "module-experiments.baselines.decision_tree_leaf_tuning"]], "decisiontreeclassifierleaftuningbaseline (class in experiments.baselines.decision_tree_leaf_tuning)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline"]], "__init__() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.__init__"]], "__repr__() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.__repr__"]], "adam() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.adam"]], "fit() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.fit"]], "forward_pass() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.forward_pass"]], "get_jacobian() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.get_jacobian"]], "get_leaf_node_probs() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.get_leaf_node_probs"]], "predict() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.predict"]], "set_leaf_node_values() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.set_leaf_node_values"]], "train() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.train"]], "wrapped_primary_objective() (decisiontreeclassifierleaftuningbaseline method)": [[7, "experiments.baselines.decision_tree_leaf_tuning.DecisionTreeClassifierLeafTuningBaseline.wrapped_primary_objective"]], "experiments.baselines.diabetes_us_baseline": [[8, "module-experiments.baselines.diabetes_US_baseline"]], "rldiabetesusagentbaseline (class in experiments.baselines.diabetes_us_baseline)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline"]], "__init__() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.__init__"]], "__repr__() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.__repr__"]], "primary_objective_fn() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.primary_objective_fn"]], "set_new_params() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.set_new_params"]], "train() (rldiabetesusagentbaseline method)": [[9, "experiments.baselines.diabetes_US_baseline.RLDiabetesUSAgentBaseline.train"]], "experiments.baselines.linear_regression": [[10, "module-experiments.baselines.linear_regression"]], "linearregressionbaseline (class in experiments.baselines.linear_regression)": [[11, "experiments.baselines.linear_regression.LinearRegressionBaseline"]], "__init__() (linearregressionbaseline method)": [[11, "experiments.baselines.linear_regression.LinearRegressionBaseline.__init__"]], "__repr__() (linearregressionbaseline method)": [[11, "experiments.baselines.linear_regression.LinearRegressionBaseline.__repr__"]], "fit() (linearregressionbaseline method)": [[11, "experiments.baselines.linear_regression.LinearRegressionBaseline.fit"]], "predict() (linearregressionbaseline method)": [[11, "experiments.baselines.linear_regression.LinearRegressionBaseline.predict"]], "experiments.baselines.logistic_regression": [[12, "module-experiments.baselines.logistic_regression"]], "binarylogisticregressionbaseline (class in experiments.baselines.logistic_regression)": [[13, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline"]], "__init__() (binarylogisticregressionbaseline method)": [[13, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__init__"]], "__repr__() (binarylogisticregressionbaseline method)": [[13, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.__repr__"]], "fit() (binarylogisticregressionbaseline method)": [[13, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.fit"]], "predict() (binarylogisticregressionbaseline method)": [[13, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.predict"]], "train() (binarylogisticregressionbaseline method)": [[13, "experiments.baselines.logistic_regression.BinaryLogisticRegressionBaseline.train"]], "experiments.baselines.random_classifiers": [[14, "module-experiments.baselines.random_classifiers"]], "uniformrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[15, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline"]], "__init__() (uniformrandomclassifierbaseline method)": [[15, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__init__"]], "__repr__() (uniformrandomclassifierbaseline method)": [[15, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.__repr__"]], "predict() (uniformrandomclassifierbaseline method)": [[15, "experiments.baselines.random_classifiers.UniformRandomClassifierBaseline.predict"]], "weightedrandomclassifierbaseline (class in experiments.baselines.random_classifiers)": [[16, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline"]], "__init__() (weightedrandomclassifierbaseline method)": [[16, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__init__"]], "__repr__() (weightedrandomclassifierbaseline method)": [[16, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.__repr__"]], "predict() (weightedrandomclassifierbaseline method)": [[16, "experiments.baselines.random_classifiers.WeightedRandomClassifierBaseline.predict"]], "experiments.baselines.random_forest": [[17, "module-experiments.baselines.random_forest"]], "randomforestclassifierbaseline (class in experiments.baselines.random_forest)": [[18, "experiments.baselines.random_forest.RandomForestClassifierBaseline"]], "__init__() (randomforestclassifierbaseline method)": [[18, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__init__"]], "__repr__() (randomforestclassifierbaseline method)": [[18, "experiments.baselines.random_forest.RandomForestClassifierBaseline.__repr__"]], "predict() (randomforestclassifierbaseline method)": [[18, "experiments.baselines.random_forest.RandomForestClassifierBaseline.predict"]], "train() (randomforestclassifierbaseline method)": [[18, "experiments.baselines.random_forest.RandomForestClassifierBaseline.train"]], "experiments.experiment_utils": [[19, "module-experiments.experiment_utils"]], "batch_predictions() (in module experiments.experiment_utils)": [[20, "experiments.experiment_utils.batch_predictions"]], "generate_behavior_policy_episodes() (in module experiments.experiment_utils)": [[21, "experiments.experiment_utils.generate_behavior_policy_episodes"]], "generate_episodes_and_calc_j() (in module experiments.experiment_utils)": [[22, "experiments.experiment_utils.generate_episodes_and_calc_J"]], "generate_resampled_datasets() (in module experiments.experiment_utils)": [[23, "experiments.experiment_utils.generate_resampled_datasets"]], "has_failed() (in module experiments.experiment_utils)": [[24, "experiments.experiment_utils.has_failed"]], "load_regenerated_episodes() (in module experiments.experiment_utils)": [[25, "experiments.experiment_utils.load_regenerated_episodes"]], "load_resampled_dataset() (in module experiments.experiment_utils)": [[26, "experiments.experiment_utils.load_resampled_dataset"]], "make_batch_epoch_dict_fixedniter() (in module experiments.experiment_utils)": [[27, "experiments.experiment_utils.make_batch_epoch_dict_fixedniter"]], "make_batch_epoch_dict_min_sample_repeat() (in module experiments.experiment_utils)": [[28, "experiments.experiment_utils.make_batch_epoch_dict_min_sample_repeat"]], "prep_feat_labels() (in module experiments.experiment_utils)": [[29, "experiments.experiment_utils.prep_feat_labels"]], "setup_sa_spec_for_exp() (in module experiments.experiment_utils)": [[30, "experiments.experiment_utils.setup_SA_spec_for_exp"]], "trial_arg_chunker() (in module experiments.experiment_utils)": [[31, "experiments.experiment_utils.trial_arg_chunker"]], "experiments.experiments": [[32, "module-experiments.experiments"]], "baselineexperiment (class in experiments.experiments)": [[33, "experiments.experiments.BaselineExperiment"]], "__init__() (baselineexperiment method)": [[33, "experiments.experiments.BaselineExperiment.__init__"]], "__repr__() (baselineexperiment method)": [[33, "experiments.experiments.BaselineExperiment.__repr__"]], "aggregate_results() (baselineexperiment method)": [[33, "experiments.experiments.BaselineExperiment.aggregate_results"]], "evaluate_constraint_functions() (baselineexperiment method)": [[33, "experiments.experiments.BaselineExperiment.evaluate_constraint_functions"]], "run_baseline_trial() (baselineexperiment method)": [[33, "experiments.experiments.BaselineExperiment.run_baseline_trial"]], "run_experiment() (baselineexperiment method)": [[33, "experiments.experiments.BaselineExperiment.run_experiment"]], "write_trial_result() (baselineexperiment method)": [[33, "experiments.experiments.BaselineExperiment.write_trial_result"]], "experiment (class in experiments.experiments)": [[34, "experiments.experiments.Experiment"]], "__init__() (experiment method)": [[34, "experiments.experiments.Experiment.__init__"]], "__repr__() (experiment method)": [[34, "experiments.experiments.Experiment.__repr__"]], "aggregate_results() (experiment method)": [[34, "experiments.experiments.Experiment.aggregate_results"]], "write_trial_result() (experiment method)": [[34, "experiments.experiments.Experiment.write_trial_result"]], "fairlearnexperiment (class in experiments.experiments)": [[35, "experiments.experiments.FairlearnExperiment"]], "__init__() (fairlearnexperiment method)": [[35, "experiments.experiments.FairlearnExperiment.__init__"]], "__repr__() (fairlearnexperiment method)": [[35, "experiments.experiments.FairlearnExperiment.__repr__"]], "aggregate_results() (fairlearnexperiment method)": [[35, "experiments.experiments.FairlearnExperiment.aggregate_results"]], "evaluate_constraint_function() (fairlearnexperiment method)": [[35, "experiments.experiments.FairlearnExperiment.evaluate_constraint_function"]], "get_fairlearn_predictions() (fairlearnexperiment method)": [[35, "experiments.experiments.FairlearnExperiment.get_fairlearn_predictions"]], "run_experiment() (fairlearnexperiment method)": [[35, "experiments.experiments.FairlearnExperiment.run_experiment"]], "run_fairlearn_trial() (fairlearnexperiment method)": [[35, "experiments.experiments.FairlearnExperiment.run_fairlearn_trial"]], "write_trial_result() (fairlearnexperiment method)": [[35, "experiments.experiments.FairlearnExperiment.write_trial_result"]], "seldonianexperiment (class in experiments.experiments)": [[36, "experiments.experiments.SeldonianExperiment"]], "__init__() (seldonianexperiment method)": [[36, "experiments.experiments.SeldonianExperiment.__init__"]], "__repr__() (seldonianexperiment method)": [[36, "experiments.experiments.SeldonianExperiment.__repr__"]], "aggregate_results() (seldonianexperiment method)": [[36, "experiments.experiments.SeldonianExperiment.aggregate_results"]], "evaluate_constraint_functions() (seldonianexperiment method)": [[36, "experiments.experiments.SeldonianExperiment.evaluate_constraint_functions"]], "run_qsa_trial() (seldonianexperiment method)": [[36, "experiments.experiments.SeldonianExperiment.run_QSA_trial"]], "run_experiment() (seldonianexperiment method)": [[36, "experiments.experiments.SeldonianExperiment.run_experiment"]], "write_trial_result() (seldonianexperiment method)": [[36, "experiments.experiments.SeldonianExperiment.write_trial_result"]], "experiments.generate_plots": [[37, "module-experiments.generate_plots"]], "plotgenerator (class in experiments.generate_plots)": [[38, "experiments.generate_plots.PlotGenerator"]], "__init__() (plotgenerator method)": [[38, "experiments.generate_plots.PlotGenerator.__init__"]], "__repr__() (plotgenerator method)": [[38, "experiments.generate_plots.PlotGenerator.__repr__"]], "make_plots() (plotgenerator method)": [[38, "experiments.generate_plots.PlotGenerator.make_plots"]], "rlplotgenerator (class in experiments.generate_plots)": [[39, "experiments.generate_plots.RLPlotGenerator"]], "__init__() (rlplotgenerator method)": [[39, "experiments.generate_plots.RLPlotGenerator.__init__"]], "__repr__() (rlplotgenerator method)": [[39, "experiments.generate_plots.RLPlotGenerator.__repr__"]], "make_plots() (rlplotgenerator method)": [[39, "experiments.generate_plots.RLPlotGenerator.make_plots"]], "run_baseline_experiment() (rlplotgenerator method)": [[39, "experiments.generate_plots.RLPlotGenerator.run_baseline_experiment"]], "run_seldonian_experiment() (rlplotgenerator method)": [[39, "experiments.generate_plots.RLPlotGenerator.run_seldonian_experiment"]], "supervisedplotgenerator (class in experiments.generate_plots)": [[40, "experiments.generate_plots.SupervisedPlotGenerator"]], "__init__() (supervisedplotgenerator method)": [[40, "experiments.generate_plots.SupervisedPlotGenerator.__init__"]], "__repr__() (supervisedplotgenerator method)": [[40, "experiments.generate_plots.SupervisedPlotGenerator.__repr__"]], "make_plots() (supervisedplotgenerator method)": [[40, "experiments.generate_plots.SupervisedPlotGenerator.make_plots"]], "run_baseline_experiment() (supervisedplotgenerator method)": [[40, "experiments.generate_plots.SupervisedPlotGenerator.run_baseline_experiment"]], "run_fairlearn_experiment() (supervisedplotgenerator method)": [[40, "experiments.generate_plots.SupervisedPlotGenerator.run_fairlearn_experiment"]], "run_headless_seldonian_experiment() (supervisedplotgenerator method)": [[40, "experiments.generate_plots.SupervisedPlotGenerator.run_headless_seldonian_experiment"]], "run_seldonian_experiment() (supervisedplotgenerator method)": [[40, "experiments.generate_plots.SupervisedPlotGenerator.run_seldonian_experiment"]], "experiments.headless_example": [[41, "module-experiments.headless_example"]], "headlessexample (class in experiments.headless_example)": [[42, "experiments.headless_example.HeadlessExample"]], "__init__() (headlessexample method)": [[42, "experiments.headless_example.HeadlessExample.__init__"]], "__repr__() (headlessexample method)": [[42, "experiments.headless_example.HeadlessExample.__repr__"]], "run() (headlessexample method)": [[42, "experiments.headless_example.HeadlessExample.run"]], "experiments.perf_eval_funcs": [[43, "module-experiments.perf_eval_funcs"]], "mse() (in module experiments.perf_eval_funcs)": [[44, "experiments.perf_eval_funcs.MSE"]], "binary_logistic_loss() (in module experiments.perf_eval_funcs)": [[45, "experiments.perf_eval_funcs.binary_logistic_loss"]], "deterministic_accuracy() (in module experiments.perf_eval_funcs)": [[46, "experiments.perf_eval_funcs.deterministic_accuracy"]], "multiclass_accuracy() (in module experiments.perf_eval_funcs)": [[47, "experiments.perf_eval_funcs.multiclass_accuracy"]], "multiclass_logistic_loss() (in module experiments.perf_eval_funcs)": [[48, "experiments.perf_eval_funcs.multiclass_logistic_loss"]], "probabilistic_accuracy() (in module experiments.perf_eval_funcs)": [[49, "experiments.perf_eval_funcs.probabilistic_accuracy"]]}})